# MIT License
#
# Copyright (c) 2023-2024 Advanced Micro Devices, Inc.
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

# This file has been autogenerated, do not modify.

from libc cimport stdlib
from libc cimport string
from libc.stdint cimport *
cimport cpython.long
cimport cpython.buffer
ctypedef bint _Bool # bool is not a reserved keyword in C, _Bool is
from .hip cimport ihipStream_t

cimport hip._util.types
from hip cimport chiprand

cdef class uint4(hip._util.types.Pointer):
    cdef bint _is_ptr_owner

    cdef chiprand.uint4* getElementPtr(self)

    @staticmethod
    cdef uint4 fromPtr(void* ptr, bint owner=*)
    @staticmethod
    cdef uint4 fromPyobj(object pyobj)
    @staticmethod
    cdef __allocate(void* ptr)
    @staticmethod
    cdef uint4 new()
    @staticmethod
    cdef uint4 fromValue(chiprand.uint4 other)


cdef class rocrand_discrete_distribution_st(hip._util.types.Pointer):
    cdef bint _is_ptr_owner

    cdef chiprand.rocrand_discrete_distribution_st* getElementPtr(self)

    @staticmethod
    cdef rocrand_discrete_distribution_st fromPtr(void* ptr, bint owner=*)
    @staticmethod
    cdef rocrand_discrete_distribution_st fromPyobj(object pyobj)
    @staticmethod
    cdef __allocate(void* ptr)
    @staticmethod
    cdef rocrand_discrete_distribution_st new()
    @staticmethod
    cdef rocrand_discrete_distribution_st fromValue(chiprand.rocrand_discrete_distribution_st other)


cdef class rocrand_generator_base_type(hip._util.types.Pointer):
    cdef bint _is_ptr_owner

    cdef chiprand.rocrand_generator_base_type* getElementPtr(self)

    @staticmethod
    cdef rocrand_generator_base_type fromPtr(void* ptr, bint owner=*)
    @staticmethod
    cdef rocrand_generator_base_type fromPyobj(object pyobj)


cdef class hiprandDirectionVectors32_t(hip._util.types.Pointer):
    cdef bint _is_ptr_owner

    cdef chiprand.hiprandDirectionVectors32_t* getElementPtr(self)

    @staticmethod
    cdef hiprandDirectionVectors32_t fromPtr(void* ptr, bint owner=*)
    @staticmethod
    cdef hiprandDirectionVectors32_t fromPyobj(object pyobj)
    @staticmethod
    cdef __allocate(void* ptr)
    @staticmethod
    cdef hiprandDirectionVectors32_t new()
    @staticmethod
    cdef hiprandDirectionVectors32_t fromValue(chiprand.hiprandDirectionVectors32_t other)


cdef class hiprandDirectionVectors64_t(hip._util.types.Pointer):
    cdef bint _is_ptr_owner

    cdef chiprand.hiprandDirectionVectors64_t* getElementPtr(self)

    @staticmethod
    cdef hiprandDirectionVectors64_t fromPtr(void* ptr, bint owner=*)
    @staticmethod
    cdef hiprandDirectionVectors64_t fromPyobj(object pyobj)
    @staticmethod
    cdef __allocate(void* ptr)
    @staticmethod
    cdef hiprandDirectionVectors64_t new()
    @staticmethod
    cdef hiprandDirectionVectors64_t fromValue(chiprand.hiprandDirectionVectors64_t other)
