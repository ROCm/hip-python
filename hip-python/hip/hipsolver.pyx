# MIT License
#
# Copyright (c) 2023-2024 Advanced Micro Devices, Inc.
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

# This file has been autogenerated, do not modify.


"""
(No short description)

Attributes:
    hipsolverVersionMajor (`~.int`):
        Macro constant.

    hipsolverVersionMinor (`~.int`):
        Macro constant.

    hipsolverVersionPatch (`~.int`):
        Macro constant.

    FP_NAN:
        (undocumented)
    FP_INFINITE:
        (undocumented)
    FP_ZERO:
        (undocumented)
    FP_SUBNORMAL:
        (undocumented)
    FP_NORMAL:
        (undocumented)
    FP_NAN:
        (undocumented)
    FP_INFINITE:
        (undocumented)
    FP_ZERO:
        (undocumented)
    FP_SUBNORMAL:
        (undocumented)
    FP_NORMAL:
        (undocumented)
    FP_NAN:
        (undocumented)
    FP_INFINITE:
        (undocumented)
    FP_ZERO:
        (undocumented)
    FP_SUBNORMAL:
        (undocumented)
    FP_NORMAL:
        (undocumented)
    FP_NAN:
        (undocumented)
    FP_INFINITE:
        (undocumented)
    FP_ZERO:
        (undocumented)
    FP_SUBNORMAL:
        (undocumented)
    FP_NORMAL:
        (undocumented)
    FP_NAN:
        (undocumented)
    FP_INFINITE:
        (undocumented)
    FP_ZERO:
        (undocumented)
    FP_SUBNORMAL:
        (undocumented)
    FP_NORMAL:
        (undocumented)
    HIP_SUCCESS:
        (undocumented)
    HIP_ERROR_INVALID_VALUE:
        (undocumented)
    HIP_ERROR_NOT_INITIALIZED:
        (undocumented)
    HIP_ERROR_LAUNCH_OUT_OF_RESOURCES:
        (undocumented)
    HIP_SUCCESS:
        (undocumented)
    HIP_ERROR_INVALID_VALUE:
        (undocumented)
    HIP_ERROR_NOT_INITIALIZED:
        (undocumented)
    HIP_ERROR_LAUNCH_OUT_OF_RESOURCES:
        (undocumented)
    HIP_SUCCESS:
        (undocumented)
    HIP_ERROR_INVALID_VALUE:
        (undocumented)
    HIP_ERROR_NOT_INITIALIZED:
        (undocumented)
    HIP_ERROR_LAUNCH_OUT_OF_RESOURCES:
        (undocumented)
    HIP_SUCCESS:
        (undocumented)
    HIP_ERROR_INVALID_VALUE:
        (undocumented)
    HIP_ERROR_NOT_INITIALIZED:
        (undocumented)
    HIP_ERROR_LAUNCH_OUT_OF_RESOURCES:
        (undocumented)
"""

import cython
import ctypes
import enum
from .hipblas import _hipblasSideMode_t__Base
from .hipblas import _hipblasFillMode_t__Base
from .hipblas import _hipblasOperation_t__Base
hipsolverVersionMajor = chipsolver.hipsolverVersionMajor

hipsolverVersionMinor = chipsolver.hipsolverVersionMinor

hipsolverVersionPatch = chipsolver.hipsolverVersionPatch

FP_NAN = chipsolver.FP_NAN
FP_INFINITE = chipsolver.FP_INFINITE
FP_ZERO = chipsolver.FP_ZERO
FP_SUBNORMAL = chipsolver.FP_SUBNORMAL
FP_NORMAL = chipsolver.FP_NORMAL

class _hipsolverStatus_t__Base(enum.IntEnum):
    """Empty enum base class that allows subclassing.
    """
    pass
class hipsolverStatus_t(_hipsolverStatus_t__Base):
    """hipsolverStatus_t

    Attributes:
        HIPSOLVER_STATUS_SUCCESS:
            (undocumented)
        HIPSOLVER_STATUS_NOT_INITIALIZED:
            (undocumented)
        HIPSOLVER_STATUS_ALLOC_FAILED:
            (undocumented)
        HIPSOLVER_STATUS_INVALID_VALUE:
            (undocumented)
        HIPSOLVER_STATUS_MAPPING_ERROR:
            (undocumented)
        HIPSOLVER_STATUS_EXECUTION_FAILED:
            (undocumented)
        HIPSOLVER_STATUS_INTERNAL_ERROR:
            (undocumented)
        HIPSOLVER_STATUS_NOT_SUPPORTED:
            (undocumented)
        HIPSOLVER_STATUS_ARCH_MISMATCH:
            (undocumented)
        HIPSOLVER_STATUS_HANDLE_IS_NULLPTR:
            (undocumented)
        HIPSOLVER_STATUS_INVALID_ENUM:
            (undocumented)
        HIPSOLVER_STATUS_UNKNOWN:
            (undocumented)
        HIPSOLVER_STATUS_ZERO_PIVOT:
            (undocumented)
    """
    HIPSOLVER_STATUS_SUCCESS = chipsolver.HIPSOLVER_STATUS_SUCCESS
    HIPSOLVER_STATUS_NOT_INITIALIZED = chipsolver.HIPSOLVER_STATUS_NOT_INITIALIZED
    HIPSOLVER_STATUS_ALLOC_FAILED = chipsolver.HIPSOLVER_STATUS_ALLOC_FAILED
    HIPSOLVER_STATUS_INVALID_VALUE = chipsolver.HIPSOLVER_STATUS_INVALID_VALUE
    HIPSOLVER_STATUS_MAPPING_ERROR = chipsolver.HIPSOLVER_STATUS_MAPPING_ERROR
    HIPSOLVER_STATUS_EXECUTION_FAILED = chipsolver.HIPSOLVER_STATUS_EXECUTION_FAILED
    HIPSOLVER_STATUS_INTERNAL_ERROR = chipsolver.HIPSOLVER_STATUS_INTERNAL_ERROR
    HIPSOLVER_STATUS_NOT_SUPPORTED = chipsolver.HIPSOLVER_STATUS_NOT_SUPPORTED
    HIPSOLVER_STATUS_ARCH_MISMATCH = chipsolver.HIPSOLVER_STATUS_ARCH_MISMATCH
    HIPSOLVER_STATUS_HANDLE_IS_NULLPTR = chipsolver.HIPSOLVER_STATUS_HANDLE_IS_NULLPTR
    HIPSOLVER_STATUS_INVALID_ENUM = chipsolver.HIPSOLVER_STATUS_INVALID_ENUM
    HIPSOLVER_STATUS_UNKNOWN = chipsolver.HIPSOLVER_STATUS_UNKNOWN
    HIPSOLVER_STATUS_ZERO_PIVOT = chipsolver.HIPSOLVER_STATUS_ZERO_PIVOT
    @staticmethod
    def ctypes_type():
        """The type of the enum constants as ctypes type."""
        return ctypes.c_uint


class _hipsolverEigMode_t__Base(enum.IntEnum):
    """Empty enum base class that allows subclassing.
    """
    pass
class hipsolverEigMode_t(_hipsolverEigMode_t__Base):
    """hipsolverEigMode_t

    Attributes:
        HIPSOLVER_EIG_MODE_NOVECTOR:
            (undocumented)
        HIPSOLVER_EIG_MODE_VECTOR:
            (undocumented)
    """
    HIPSOLVER_EIG_MODE_NOVECTOR = chipsolver.HIPSOLVER_EIG_MODE_NOVECTOR
    HIPSOLVER_EIG_MODE_VECTOR = chipsolver.HIPSOLVER_EIG_MODE_VECTOR
    @staticmethod
    def ctypes_type():
        """The type of the enum constants as ctypes type."""
        return ctypes.c_uint


class _hipsolverEigType_t__Base(enum.IntEnum):
    """Empty enum base class that allows subclassing.
    """
    pass
class hipsolverEigType_t(_hipsolverEigType_t__Base):
    """hipsolverEigType_t

    Attributes:
        HIPSOLVER_EIG_TYPE_1:
            (undocumented)
        HIPSOLVER_EIG_TYPE_2:
            (undocumented)
        HIPSOLVER_EIG_TYPE_3:
            (undocumented)
    """
    HIPSOLVER_EIG_TYPE_1 = chipsolver.HIPSOLVER_EIG_TYPE_1
    HIPSOLVER_EIG_TYPE_2 = chipsolver.HIPSOLVER_EIG_TYPE_2
    HIPSOLVER_EIG_TYPE_3 = chipsolver.HIPSOLVER_EIG_TYPE_3
    @staticmethod
    def ctypes_type():
        """The type of the enum constants as ctypes type."""
        return ctypes.c_uint


HIP_SUCCESS = chipsolver.HIP_SUCCESS
HIP_ERROR_INVALID_VALUE = chipsolver.HIP_ERROR_INVALID_VALUE
HIP_ERROR_NOT_INITIALIZED = chipsolver.HIP_ERROR_NOT_INITIALIZED
HIP_ERROR_LAUNCH_OUT_OF_RESOURCES = chipsolver.HIP_ERROR_LAUNCH_OUT_OF_RESOURCES

@cython.embedsignature(True)
def hipsolverCreate():
    r"""(No short description, might be part of a group.)

    Returns:
        A `~.tuple` of size 1 that contains (in that order):

        * handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)
    """
    handle = hip._util.types.Pointer.fromPtr(NULL)
    _hipsolverCreate__retval = hipsolverStatus_t(chipsolver.hipsolverCreate(
        <void **>&handle._ptr))
    return (_hipsolverCreate__retval,None if handle._ptr == NULL else handle)


@cython.embedsignature(True)
def hipsolverDestroy(object handle):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)
    """
    _hipsolverDestroy__retval = hipsolverStatus_t(chipsolver.hipsolverDestroy(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr))
    return (_hipsolverDestroy__retval,)


@cython.embedsignature(True)
def hipsolverSetStream(object handle, object streamId):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        streamId (`~.ihipStream_t`/`~.object`):
            (undocumented)
    """
    _hipsolverSetStream__retval = hipsolverStatus_t(chipsolver.hipsolverSetStream(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,
        ihipStream_t.fromPyobj(streamId).getElementPtr()))
    return (_hipsolverSetStream__retval,)


@cython.embedsignature(True)
def hipsolverGetStream(object handle, object streamId):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        streamId (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)
    """
    _hipsolverGetStream__retval = hipsolverStatus_t(chipsolver.hipsolverGetStream(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,
        <chipsolver.hipStream_t*>hip._util.types.Pointer.fromPyobj(streamId)._ptr))
    return (_hipsolverGetStream__retval,)


@cython.embedsignature(True)
def hipsolverCreateGesvdjInfo(object info):
    r"""(No short description, might be part of a group.)

    Args:
        info (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)
    """
    _hipsolverCreateGesvdjInfo__retval = hipsolverStatus_t(chipsolver.hipsolverCreateGesvdjInfo(
        <void **>hip._util.types.Pointer.fromPyobj(info)._ptr))
    return (_hipsolverCreateGesvdjInfo__retval,)


@cython.embedsignature(True)
def hipsolverDestroyGesvdjInfo(object info):
    r"""(No short description, might be part of a group.)

    Args:
        info (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)
    """
    _hipsolverDestroyGesvdjInfo__retval = hipsolverStatus_t(chipsolver.hipsolverDestroyGesvdjInfo(
        <void *>hip._util.types.Pointer.fromPyobj(info)._ptr))
    return (_hipsolverDestroyGesvdjInfo__retval,)


@cython.embedsignature(True)
def hipsolverXgesvdjSetMaxSweeps(object info, int max_sweeps):
    r"""(No short description, might be part of a group.)

    Args:
        info (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        max_sweeps (`~.int`):
            (undocumented)
    """
    _hipsolverXgesvdjSetMaxSweeps__retval = hipsolverStatus_t(chipsolver.hipsolverXgesvdjSetMaxSweeps(
        <void *>hip._util.types.Pointer.fromPyobj(info)._ptr,max_sweeps))
    return (_hipsolverXgesvdjSetMaxSweeps__retval,)


@cython.embedsignature(True)
def hipsolverXgesvdjSetSortEig(object info, int sort_eig):
    r"""(No short description, might be part of a group.)

    Args:
        info (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        sort_eig (`~.int`):
            (undocumented)
    """
    _hipsolverXgesvdjSetSortEig__retval = hipsolverStatus_t(chipsolver.hipsolverXgesvdjSetSortEig(
        <void *>hip._util.types.Pointer.fromPyobj(info)._ptr,sort_eig))
    return (_hipsolverXgesvdjSetSortEig__retval,)


@cython.embedsignature(True)
def hipsolverXgesvdjSetTolerance(object info, double tolerance):
    r"""(No short description, might be part of a group.)

    Args:
        info (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        tolerance (`~.float`/`~.int`):
            (undocumented)
    """
    _hipsolverXgesvdjSetTolerance__retval = hipsolverStatus_t(chipsolver.hipsolverXgesvdjSetTolerance(
        <void *>hip._util.types.Pointer.fromPyobj(info)._ptr,tolerance))
    return (_hipsolverXgesvdjSetTolerance__retval,)


@cython.embedsignature(True)
def hipsolverXgesvdjGetResidual(object handle, object info, object residual):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        info (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        residual (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)
    """
    _hipsolverXgesvdjGetResidual__retval = hipsolverStatus_t(chipsolver.hipsolverXgesvdjGetResidual(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,
        <void *>hip._util.types.Pointer.fromPyobj(info)._ptr,
        <double *>hip._util.types.Pointer.fromPyobj(residual)._ptr))
    return (_hipsolverXgesvdjGetResidual__retval,)


@cython.embedsignature(True)
def hipsolverXgesvdjGetSweeps(object handle, object info, object executed_sweeps):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        info (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        executed_sweeps (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)
    """
    _hipsolverXgesvdjGetSweeps__retval = hipsolverStatus_t(chipsolver.hipsolverXgesvdjGetSweeps(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,
        <void *>hip._util.types.Pointer.fromPyobj(info)._ptr,
        <int *>hip._util.types.ListOfInt.fromPyobj(executed_sweeps)._ptr))
    return (_hipsolverXgesvdjGetSweeps__retval,)


@cython.embedsignature(True)
def hipsolverCreateSyevjInfo(object info):
    r"""(No short description, might be part of a group.)

    Args:
        info (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)
    """
    _hipsolverCreateSyevjInfo__retval = hipsolverStatus_t(chipsolver.hipsolverCreateSyevjInfo(
        <void **>hip._util.types.Pointer.fromPyobj(info)._ptr))
    return (_hipsolverCreateSyevjInfo__retval,)


@cython.embedsignature(True)
def hipsolverDestroySyevjInfo(object info):
    r"""(No short description, might be part of a group.)

    Args:
        info (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)
    """
    _hipsolverDestroySyevjInfo__retval = hipsolverStatus_t(chipsolver.hipsolverDestroySyevjInfo(
        <void *>hip._util.types.Pointer.fromPyobj(info)._ptr))
    return (_hipsolverDestroySyevjInfo__retval,)


@cython.embedsignature(True)
def hipsolverXsyevjSetMaxSweeps(object info, int max_sweeps):
    r"""(No short description, might be part of a group.)

    Args:
        info (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        max_sweeps (`~.int`):
            (undocumented)
    """
    _hipsolverXsyevjSetMaxSweeps__retval = hipsolverStatus_t(chipsolver.hipsolverXsyevjSetMaxSweeps(
        <void *>hip._util.types.Pointer.fromPyobj(info)._ptr,max_sweeps))
    return (_hipsolverXsyevjSetMaxSweeps__retval,)


@cython.embedsignature(True)
def hipsolverXsyevjSetSortEig(object info, int sort_eig):
    r"""(No short description, might be part of a group.)

    Args:
        info (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        sort_eig (`~.int`):
            (undocumented)
    """
    _hipsolverXsyevjSetSortEig__retval = hipsolverStatus_t(chipsolver.hipsolverXsyevjSetSortEig(
        <void *>hip._util.types.Pointer.fromPyobj(info)._ptr,sort_eig))
    return (_hipsolverXsyevjSetSortEig__retval,)


@cython.embedsignature(True)
def hipsolverXsyevjSetTolerance(object info, double tolerance):
    r"""(No short description, might be part of a group.)

    Args:
        info (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        tolerance (`~.float`/`~.int`):
            (undocumented)
    """
    _hipsolverXsyevjSetTolerance__retval = hipsolverStatus_t(chipsolver.hipsolverXsyevjSetTolerance(
        <void *>hip._util.types.Pointer.fromPyobj(info)._ptr,tolerance))
    return (_hipsolverXsyevjSetTolerance__retval,)


@cython.embedsignature(True)
def hipsolverXsyevjGetResidual(object handle, object info, object residual):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        info (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        residual (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)
    """
    _hipsolverXsyevjGetResidual__retval = hipsolverStatus_t(chipsolver.hipsolverXsyevjGetResidual(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,
        <void *>hip._util.types.Pointer.fromPyobj(info)._ptr,
        <double *>hip._util.types.Pointer.fromPyobj(residual)._ptr))
    return (_hipsolverXsyevjGetResidual__retval,)


@cython.embedsignature(True)
def hipsolverXsyevjGetSweeps(object handle, object info, object executed_sweeps):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        info (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        executed_sweeps (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)
    """
    _hipsolverXsyevjGetSweeps__retval = hipsolverStatus_t(chipsolver.hipsolverXsyevjGetSweeps(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,
        <void *>hip._util.types.Pointer.fromPyobj(info)._ptr,
        <int *>hip._util.types.ListOfInt.fromPyobj(executed_sweeps)._ptr))
    return (_hipsolverXsyevjGetSweeps__retval,)


@cython.embedsignature(True)
def hipsolverSorgbr_bufferSize(object handle, object side, int m, int n, int k, object A, int lda, object tau, object lwork):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        side (`~.hipblasSideMode_t`):
            (undocumented)

        m (`~.int`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        k (`~.int`):
            (undocumented)

        A (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        tau (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lwork (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)
    """
    if not isinstance(side,_hipblasSideMode_t__Base):
        raise TypeError("argument 'side' must be of type '_hipblasSideMode_t__Base'")
    _hipsolverSorgbr_bufferSize__retval = hipsolverStatus_t(chipsolver.hipsolverSorgbr_bufferSize(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,side.value,m,n,k,
        <float *>hip._util.types.Pointer.fromPyobj(A)._ptr,lda,
        <float *>hip._util.types.Pointer.fromPyobj(tau)._ptr,
        <int *>hip._util.types.ListOfInt.fromPyobj(lwork)._ptr))
    return (_hipsolverSorgbr_bufferSize__retval,)


@cython.embedsignature(True)
def hipsolverDorgbr_bufferSize(object handle, object side, int m, int n, int k, object A, int lda, object tau, object lwork):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        side (`~.hipblasSideMode_t`):
            (undocumented)

        m (`~.int`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        k (`~.int`):
            (undocumented)

        A (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        tau (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lwork (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)
    """
    if not isinstance(side,_hipblasSideMode_t__Base):
        raise TypeError("argument 'side' must be of type '_hipblasSideMode_t__Base'")
    _hipsolverDorgbr_bufferSize__retval = hipsolverStatus_t(chipsolver.hipsolverDorgbr_bufferSize(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,side.value,m,n,k,
        <double *>hip._util.types.Pointer.fromPyobj(A)._ptr,lda,
        <double *>hip._util.types.Pointer.fromPyobj(tau)._ptr,
        <int *>hip._util.types.ListOfInt.fromPyobj(lwork)._ptr))
    return (_hipsolverDorgbr_bufferSize__retval,)


@cython.embedsignature(True)
def hipsolverCungbr_bufferSize(object handle, object side, int m, int n, int k, object A, int lda, object tau, object lwork):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        side (`~.hipblasSideMode_t`):
            (undocumented)

        m (`~.int`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        k (`~.int`):
            (undocumented)

        A (`~.float2`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        tau (`~.float2`/`~.object`):
            (undocumented)

        lwork (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)
    """
    if not isinstance(side,_hipblasSideMode_t__Base):
        raise TypeError("argument 'side' must be of type '_hipblasSideMode_t__Base'")
    _hipsolverCungbr_bufferSize__retval = hipsolverStatus_t(chipsolver.hipsolverCungbr_bufferSize(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,side.value,m,n,k,
        float2.fromPyobj(A).getElementPtr(),lda,
        float2.fromPyobj(tau).getElementPtr(),
        <int *>hip._util.types.ListOfInt.fromPyobj(lwork)._ptr))
    return (_hipsolverCungbr_bufferSize__retval,)


@cython.embedsignature(True)
def hipsolverZungbr_bufferSize(object handle, object side, int m, int n, int k, object A, int lda, object tau, object lwork):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        side (`~.hipblasSideMode_t`):
            (undocumented)

        m (`~.int`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        k (`~.int`):
            (undocumented)

        A (`~.double2`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        tau (`~.double2`/`~.object`):
            (undocumented)

        lwork (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)
    """
    if not isinstance(side,_hipblasSideMode_t__Base):
        raise TypeError("argument 'side' must be of type '_hipblasSideMode_t__Base'")
    _hipsolverZungbr_bufferSize__retval = hipsolverStatus_t(chipsolver.hipsolverZungbr_bufferSize(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,side.value,m,n,k,
        double2.fromPyobj(A).getElementPtr(),lda,
        double2.fromPyobj(tau).getElementPtr(),
        <int *>hip._util.types.ListOfInt.fromPyobj(lwork)._ptr))
    return (_hipsolverZungbr_bufferSize__retval,)


@cython.embedsignature(True)
def hipsolverSorgbr(object handle, object side, int m, int n, int k, object A, int lda, object tau, object work, int lwork, object devInfo):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        side (`~.hipblasSideMode_t`):
            (undocumented)

        m (`~.int`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        k (`~.int`):
            (undocumented)

        A (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        tau (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        work (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lwork (`~.int`):
            (undocumented)

        devInfo (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)
    """
    if not isinstance(side,_hipblasSideMode_t__Base):
        raise TypeError("argument 'side' must be of type '_hipblasSideMode_t__Base'")
    _hipsolverSorgbr__retval = hipsolverStatus_t(chipsolver.hipsolverSorgbr(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,side.value,m,n,k,
        <float *>hip._util.types.Pointer.fromPyobj(A)._ptr,lda,
        <float *>hip._util.types.Pointer.fromPyobj(tau)._ptr,
        <float *>hip._util.types.Pointer.fromPyobj(work)._ptr,lwork,
        <int *>hip._util.types.ListOfInt.fromPyobj(devInfo)._ptr))
    return (_hipsolverSorgbr__retval,)


@cython.embedsignature(True)
def hipsolverDorgbr(object handle, object side, int m, int n, int k, object A, int lda, object tau, object work, int lwork, object devInfo):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        side (`~.hipblasSideMode_t`):
            (undocumented)

        m (`~.int`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        k (`~.int`):
            (undocumented)

        A (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        tau (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        work (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lwork (`~.int`):
            (undocumented)

        devInfo (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)
    """
    if not isinstance(side,_hipblasSideMode_t__Base):
        raise TypeError("argument 'side' must be of type '_hipblasSideMode_t__Base'")
    _hipsolverDorgbr__retval = hipsolverStatus_t(chipsolver.hipsolverDorgbr(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,side.value,m,n,k,
        <double *>hip._util.types.Pointer.fromPyobj(A)._ptr,lda,
        <double *>hip._util.types.Pointer.fromPyobj(tau)._ptr,
        <double *>hip._util.types.Pointer.fromPyobj(work)._ptr,lwork,
        <int *>hip._util.types.ListOfInt.fromPyobj(devInfo)._ptr))
    return (_hipsolverDorgbr__retval,)


@cython.embedsignature(True)
def hipsolverCungbr(object handle, object side, int m, int n, int k, object A, int lda, object tau, object work, int lwork, object devInfo):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        side (`~.hipblasSideMode_t`):
            (undocumented)

        m (`~.int`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        k (`~.int`):
            (undocumented)

        A (`~.float2`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        tau (`~.float2`/`~.object`):
            (undocumented)

        work (`~.float2`/`~.object`):
            (undocumented)

        lwork (`~.int`):
            (undocumented)

        devInfo (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)
    """
    if not isinstance(side,_hipblasSideMode_t__Base):
        raise TypeError("argument 'side' must be of type '_hipblasSideMode_t__Base'")
    _hipsolverCungbr__retval = hipsolverStatus_t(chipsolver.hipsolverCungbr(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,side.value,m,n,k,
        float2.fromPyobj(A).getElementPtr(),lda,
        float2.fromPyobj(tau).getElementPtr(),
        float2.fromPyobj(work).getElementPtr(),lwork,
        <int *>hip._util.types.ListOfInt.fromPyobj(devInfo)._ptr))
    return (_hipsolverCungbr__retval,)


@cython.embedsignature(True)
def hipsolverZungbr(object handle, object side, int m, int n, int k, object A, int lda, object tau, object work, int lwork, object devInfo):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        side (`~.hipblasSideMode_t`):
            (undocumented)

        m (`~.int`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        k (`~.int`):
            (undocumented)

        A (`~.double2`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        tau (`~.double2`/`~.object`):
            (undocumented)

        work (`~.double2`/`~.object`):
            (undocumented)

        lwork (`~.int`):
            (undocumented)

        devInfo (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)
    """
    if not isinstance(side,_hipblasSideMode_t__Base):
        raise TypeError("argument 'side' must be of type '_hipblasSideMode_t__Base'")
    _hipsolverZungbr__retval = hipsolverStatus_t(chipsolver.hipsolverZungbr(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,side.value,m,n,k,
        double2.fromPyobj(A).getElementPtr(),lda,
        double2.fromPyobj(tau).getElementPtr(),
        double2.fromPyobj(work).getElementPtr(),lwork,
        <int *>hip._util.types.ListOfInt.fromPyobj(devInfo)._ptr))
    return (_hipsolverZungbr__retval,)


@cython.embedsignature(True)
def hipsolverSorgqr_bufferSize(object handle, int m, int n, int k, object A, int lda, object tau, object lwork):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        m (`~.int`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        k (`~.int`):
            (undocumented)

        A (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        tau (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lwork (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)
    """
    _hipsolverSorgqr_bufferSize__retval = hipsolverStatus_t(chipsolver.hipsolverSorgqr_bufferSize(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,m,n,k,
        <float *>hip._util.types.Pointer.fromPyobj(A)._ptr,lda,
        <float *>hip._util.types.Pointer.fromPyobj(tau)._ptr,
        <int *>hip._util.types.ListOfInt.fromPyobj(lwork)._ptr))
    return (_hipsolverSorgqr_bufferSize__retval,)


@cython.embedsignature(True)
def hipsolverDorgqr_bufferSize(object handle, int m, int n, int k, object A, int lda, object tau, object lwork):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        m (`~.int`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        k (`~.int`):
            (undocumented)

        A (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        tau (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lwork (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)
    """
    _hipsolverDorgqr_bufferSize__retval = hipsolverStatus_t(chipsolver.hipsolverDorgqr_bufferSize(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,m,n,k,
        <double *>hip._util.types.Pointer.fromPyobj(A)._ptr,lda,
        <double *>hip._util.types.Pointer.fromPyobj(tau)._ptr,
        <int *>hip._util.types.ListOfInt.fromPyobj(lwork)._ptr))
    return (_hipsolverDorgqr_bufferSize__retval,)


@cython.embedsignature(True)
def hipsolverCungqr_bufferSize(object handle, int m, int n, int k, object A, int lda, object tau, object lwork):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        m (`~.int`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        k (`~.int`):
            (undocumented)

        A (`~.float2`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        tau (`~.float2`/`~.object`):
            (undocumented)

        lwork (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)
    """
    _hipsolverCungqr_bufferSize__retval = hipsolverStatus_t(chipsolver.hipsolverCungqr_bufferSize(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,m,n,k,
        float2.fromPyobj(A).getElementPtr(),lda,
        float2.fromPyobj(tau).getElementPtr(),
        <int *>hip._util.types.ListOfInt.fromPyobj(lwork)._ptr))
    return (_hipsolverCungqr_bufferSize__retval,)


@cython.embedsignature(True)
def hipsolverZungqr_bufferSize(object handle, int m, int n, int k, object A, int lda, object tau, object lwork):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        m (`~.int`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        k (`~.int`):
            (undocumented)

        A (`~.double2`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        tau (`~.double2`/`~.object`):
            (undocumented)

        lwork (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)
    """
    _hipsolverZungqr_bufferSize__retval = hipsolverStatus_t(chipsolver.hipsolverZungqr_bufferSize(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,m,n,k,
        double2.fromPyobj(A).getElementPtr(),lda,
        double2.fromPyobj(tau).getElementPtr(),
        <int *>hip._util.types.ListOfInt.fromPyobj(lwork)._ptr))
    return (_hipsolverZungqr_bufferSize__retval,)


@cython.embedsignature(True)
def hipsolverSorgqr(object handle, int m, int n, int k, object A, int lda, object tau, object work, int lwork, object devInfo):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        m (`~.int`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        k (`~.int`):
            (undocumented)

        A (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        tau (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        work (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lwork (`~.int`):
            (undocumented)

        devInfo (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)
    """
    _hipsolverSorgqr__retval = hipsolverStatus_t(chipsolver.hipsolverSorgqr(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,m,n,k,
        <float *>hip._util.types.Pointer.fromPyobj(A)._ptr,lda,
        <float *>hip._util.types.Pointer.fromPyobj(tau)._ptr,
        <float *>hip._util.types.Pointer.fromPyobj(work)._ptr,lwork,
        <int *>hip._util.types.ListOfInt.fromPyobj(devInfo)._ptr))
    return (_hipsolverSorgqr__retval,)


@cython.embedsignature(True)
def hipsolverDorgqr(object handle, int m, int n, int k, object A, int lda, object tau, object work, int lwork, object devInfo):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        m (`~.int`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        k (`~.int`):
            (undocumented)

        A (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        tau (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        work (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lwork (`~.int`):
            (undocumented)

        devInfo (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)
    """
    _hipsolverDorgqr__retval = hipsolverStatus_t(chipsolver.hipsolverDorgqr(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,m,n,k,
        <double *>hip._util.types.Pointer.fromPyobj(A)._ptr,lda,
        <double *>hip._util.types.Pointer.fromPyobj(tau)._ptr,
        <double *>hip._util.types.Pointer.fromPyobj(work)._ptr,lwork,
        <int *>hip._util.types.ListOfInt.fromPyobj(devInfo)._ptr))
    return (_hipsolverDorgqr__retval,)


@cython.embedsignature(True)
def hipsolverCungqr(object handle, int m, int n, int k, object A, int lda, object tau, object work, int lwork, object devInfo):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        m (`~.int`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        k (`~.int`):
            (undocumented)

        A (`~.float2`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        tau (`~.float2`/`~.object`):
            (undocumented)

        work (`~.float2`/`~.object`):
            (undocumented)

        lwork (`~.int`):
            (undocumented)

        devInfo (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)
    """
    _hipsolverCungqr__retval = hipsolverStatus_t(chipsolver.hipsolverCungqr(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,m,n,k,
        float2.fromPyobj(A).getElementPtr(),lda,
        float2.fromPyobj(tau).getElementPtr(),
        float2.fromPyobj(work).getElementPtr(),lwork,
        <int *>hip._util.types.ListOfInt.fromPyobj(devInfo)._ptr))
    return (_hipsolverCungqr__retval,)


@cython.embedsignature(True)
def hipsolverZungqr(object handle, int m, int n, int k, object A, int lda, object tau, object work, int lwork, object devInfo):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        m (`~.int`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        k (`~.int`):
            (undocumented)

        A (`~.double2`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        tau (`~.double2`/`~.object`):
            (undocumented)

        work (`~.double2`/`~.object`):
            (undocumented)

        lwork (`~.int`):
            (undocumented)

        devInfo (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)
    """
    _hipsolverZungqr__retval = hipsolverStatus_t(chipsolver.hipsolverZungqr(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,m,n,k,
        double2.fromPyobj(A).getElementPtr(),lda,
        double2.fromPyobj(tau).getElementPtr(),
        double2.fromPyobj(work).getElementPtr(),lwork,
        <int *>hip._util.types.ListOfInt.fromPyobj(devInfo)._ptr))
    return (_hipsolverZungqr__retval,)


@cython.embedsignature(True)
def hipsolverSorgtr_bufferSize(object handle, object uplo, int n, object A, int lda, object tau, object lwork):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        uplo (`~.hipblasFillMode_t`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        A (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        tau (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lwork (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)
    """
    if not isinstance(uplo,_hipblasFillMode_t__Base):
        raise TypeError("argument 'uplo' must be of type '_hipblasFillMode_t__Base'")
    _hipsolverSorgtr_bufferSize__retval = hipsolverStatus_t(chipsolver.hipsolverSorgtr_bufferSize(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,uplo.value,n,
        <float *>hip._util.types.Pointer.fromPyobj(A)._ptr,lda,
        <float *>hip._util.types.Pointer.fromPyobj(tau)._ptr,
        <int *>hip._util.types.ListOfInt.fromPyobj(lwork)._ptr))
    return (_hipsolverSorgtr_bufferSize__retval,)


@cython.embedsignature(True)
def hipsolverDorgtr_bufferSize(object handle, object uplo, int n, object A, int lda, object tau, object lwork):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        uplo (`~.hipblasFillMode_t`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        A (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        tau (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lwork (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)
    """
    if not isinstance(uplo,_hipblasFillMode_t__Base):
        raise TypeError("argument 'uplo' must be of type '_hipblasFillMode_t__Base'")
    _hipsolverDorgtr_bufferSize__retval = hipsolverStatus_t(chipsolver.hipsolverDorgtr_bufferSize(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,uplo.value,n,
        <double *>hip._util.types.Pointer.fromPyobj(A)._ptr,lda,
        <double *>hip._util.types.Pointer.fromPyobj(tau)._ptr,
        <int *>hip._util.types.ListOfInt.fromPyobj(lwork)._ptr))
    return (_hipsolverDorgtr_bufferSize__retval,)


@cython.embedsignature(True)
def hipsolverCungtr_bufferSize(object handle, object uplo, int n, object A, int lda, object tau, object lwork):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        uplo (`~.hipblasFillMode_t`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        A (`~.float2`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        tau (`~.float2`/`~.object`):
            (undocumented)

        lwork (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)
    """
    if not isinstance(uplo,_hipblasFillMode_t__Base):
        raise TypeError("argument 'uplo' must be of type '_hipblasFillMode_t__Base'")
    _hipsolverCungtr_bufferSize__retval = hipsolverStatus_t(chipsolver.hipsolverCungtr_bufferSize(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,uplo.value,n,
        float2.fromPyobj(A).getElementPtr(),lda,
        float2.fromPyobj(tau).getElementPtr(),
        <int *>hip._util.types.ListOfInt.fromPyobj(lwork)._ptr))
    return (_hipsolverCungtr_bufferSize__retval,)


@cython.embedsignature(True)
def hipsolverZungtr_bufferSize(object handle, object uplo, int n, object A, int lda, object tau, object lwork):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        uplo (`~.hipblasFillMode_t`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        A (`~.double2`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        tau (`~.double2`/`~.object`):
            (undocumented)

        lwork (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)
    """
    if not isinstance(uplo,_hipblasFillMode_t__Base):
        raise TypeError("argument 'uplo' must be of type '_hipblasFillMode_t__Base'")
    _hipsolverZungtr_bufferSize__retval = hipsolverStatus_t(chipsolver.hipsolverZungtr_bufferSize(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,uplo.value,n,
        double2.fromPyobj(A).getElementPtr(),lda,
        double2.fromPyobj(tau).getElementPtr(),
        <int *>hip._util.types.ListOfInt.fromPyobj(lwork)._ptr))
    return (_hipsolverZungtr_bufferSize__retval,)


@cython.embedsignature(True)
def hipsolverSorgtr(object handle, object uplo, int n, object A, int lda, object tau, object work, int lwork, object devInfo):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        uplo (`~.hipblasFillMode_t`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        A (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        tau (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        work (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lwork (`~.int`):
            (undocumented)

        devInfo (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)
    """
    if not isinstance(uplo,_hipblasFillMode_t__Base):
        raise TypeError("argument 'uplo' must be of type '_hipblasFillMode_t__Base'")
    _hipsolverSorgtr__retval = hipsolverStatus_t(chipsolver.hipsolverSorgtr(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,uplo.value,n,
        <float *>hip._util.types.Pointer.fromPyobj(A)._ptr,lda,
        <float *>hip._util.types.Pointer.fromPyobj(tau)._ptr,
        <float *>hip._util.types.Pointer.fromPyobj(work)._ptr,lwork,
        <int *>hip._util.types.ListOfInt.fromPyobj(devInfo)._ptr))
    return (_hipsolverSorgtr__retval,)


@cython.embedsignature(True)
def hipsolverDorgtr(object handle, object uplo, int n, object A, int lda, object tau, object work, int lwork, object devInfo):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        uplo (`~.hipblasFillMode_t`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        A (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        tau (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        work (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lwork (`~.int`):
            (undocumented)

        devInfo (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)
    """
    if not isinstance(uplo,_hipblasFillMode_t__Base):
        raise TypeError("argument 'uplo' must be of type '_hipblasFillMode_t__Base'")
    _hipsolverDorgtr__retval = hipsolverStatus_t(chipsolver.hipsolverDorgtr(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,uplo.value,n,
        <double *>hip._util.types.Pointer.fromPyobj(A)._ptr,lda,
        <double *>hip._util.types.Pointer.fromPyobj(tau)._ptr,
        <double *>hip._util.types.Pointer.fromPyobj(work)._ptr,lwork,
        <int *>hip._util.types.ListOfInt.fromPyobj(devInfo)._ptr))
    return (_hipsolverDorgtr__retval,)


@cython.embedsignature(True)
def hipsolverCungtr(object handle, object uplo, int n, object A, int lda, object tau, object work, int lwork, object devInfo):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        uplo (`~.hipblasFillMode_t`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        A (`~.float2`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        tau (`~.float2`/`~.object`):
            (undocumented)

        work (`~.float2`/`~.object`):
            (undocumented)

        lwork (`~.int`):
            (undocumented)

        devInfo (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)
    """
    if not isinstance(uplo,_hipblasFillMode_t__Base):
        raise TypeError("argument 'uplo' must be of type '_hipblasFillMode_t__Base'")
    _hipsolverCungtr__retval = hipsolverStatus_t(chipsolver.hipsolverCungtr(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,uplo.value,n,
        float2.fromPyobj(A).getElementPtr(),lda,
        float2.fromPyobj(tau).getElementPtr(),
        float2.fromPyobj(work).getElementPtr(),lwork,
        <int *>hip._util.types.ListOfInt.fromPyobj(devInfo)._ptr))
    return (_hipsolverCungtr__retval,)


@cython.embedsignature(True)
def hipsolverZungtr(object handle, object uplo, int n, object A, int lda, object tau, object work, int lwork, object devInfo):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        uplo (`~.hipblasFillMode_t`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        A (`~.double2`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        tau (`~.double2`/`~.object`):
            (undocumented)

        work (`~.double2`/`~.object`):
            (undocumented)

        lwork (`~.int`):
            (undocumented)

        devInfo (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)
    """
    if not isinstance(uplo,_hipblasFillMode_t__Base):
        raise TypeError("argument 'uplo' must be of type '_hipblasFillMode_t__Base'")
    _hipsolverZungtr__retval = hipsolverStatus_t(chipsolver.hipsolverZungtr(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,uplo.value,n,
        double2.fromPyobj(A).getElementPtr(),lda,
        double2.fromPyobj(tau).getElementPtr(),
        double2.fromPyobj(work).getElementPtr(),lwork,
        <int *>hip._util.types.ListOfInt.fromPyobj(devInfo)._ptr))
    return (_hipsolverZungtr__retval,)


@cython.embedsignature(True)
def hipsolverSormqr_bufferSize(object handle, object side, object trans, int m, int n, int k, object A, int lda, object tau, object C, int ldc, object lwork):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        side (`~.hipblasSideMode_t`):
            (undocumented)

        trans (`~.hipblasOperation_t`):
            (undocumented)

        m (`~.int`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        k (`~.int`):
            (undocumented)

        A (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        tau (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        C (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        ldc (`~.int`):
            (undocumented)

        lwork (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)
    """
    if not isinstance(side,_hipblasSideMode_t__Base):
        raise TypeError("argument 'side' must be of type '_hipblasSideMode_t__Base'")                    
    if not isinstance(trans,_hipblasOperation_t__Base):
        raise TypeError("argument 'trans' must be of type '_hipblasOperation_t__Base'")
    _hipsolverSormqr_bufferSize__retval = hipsolverStatus_t(chipsolver.hipsolverSormqr_bufferSize(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,side.value,trans.value,m,n,k,
        <float *>hip._util.types.Pointer.fromPyobj(A)._ptr,lda,
        <float *>hip._util.types.Pointer.fromPyobj(tau)._ptr,
        <float *>hip._util.types.Pointer.fromPyobj(C)._ptr,ldc,
        <int *>hip._util.types.ListOfInt.fromPyobj(lwork)._ptr))
    return (_hipsolverSormqr_bufferSize__retval,)


@cython.embedsignature(True)
def hipsolverDormqr_bufferSize(object handle, object side, object trans, int m, int n, int k, object A, int lda, object tau, object C, int ldc, object lwork):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        side (`~.hipblasSideMode_t`):
            (undocumented)

        trans (`~.hipblasOperation_t`):
            (undocumented)

        m (`~.int`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        k (`~.int`):
            (undocumented)

        A (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        tau (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        C (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        ldc (`~.int`):
            (undocumented)

        lwork (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)
    """
    if not isinstance(side,_hipblasSideMode_t__Base):
        raise TypeError("argument 'side' must be of type '_hipblasSideMode_t__Base'")                    
    if not isinstance(trans,_hipblasOperation_t__Base):
        raise TypeError("argument 'trans' must be of type '_hipblasOperation_t__Base'")
    _hipsolverDormqr_bufferSize__retval = hipsolverStatus_t(chipsolver.hipsolverDormqr_bufferSize(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,side.value,trans.value,m,n,k,
        <double *>hip._util.types.Pointer.fromPyobj(A)._ptr,lda,
        <double *>hip._util.types.Pointer.fromPyobj(tau)._ptr,
        <double *>hip._util.types.Pointer.fromPyobj(C)._ptr,ldc,
        <int *>hip._util.types.ListOfInt.fromPyobj(lwork)._ptr))
    return (_hipsolverDormqr_bufferSize__retval,)


@cython.embedsignature(True)
def hipsolverCunmqr_bufferSize(object handle, object side, object trans, int m, int n, int k, object A, int lda, object tau, object C, int ldc, object lwork):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        side (`~.hipblasSideMode_t`):
            (undocumented)

        trans (`~.hipblasOperation_t`):
            (undocumented)

        m (`~.int`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        k (`~.int`):
            (undocumented)

        A (`~.float2`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        tau (`~.float2`/`~.object`):
            (undocumented)

        C (`~.float2`/`~.object`):
            (undocumented)

        ldc (`~.int`):
            (undocumented)

        lwork (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)
    """
    if not isinstance(side,_hipblasSideMode_t__Base):
        raise TypeError("argument 'side' must be of type '_hipblasSideMode_t__Base'")                    
    if not isinstance(trans,_hipblasOperation_t__Base):
        raise TypeError("argument 'trans' must be of type '_hipblasOperation_t__Base'")
    _hipsolverCunmqr_bufferSize__retval = hipsolverStatus_t(chipsolver.hipsolverCunmqr_bufferSize(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,side.value,trans.value,m,n,k,
        float2.fromPyobj(A).getElementPtr(),lda,
        float2.fromPyobj(tau).getElementPtr(),
        float2.fromPyobj(C).getElementPtr(),ldc,
        <int *>hip._util.types.ListOfInt.fromPyobj(lwork)._ptr))
    return (_hipsolverCunmqr_bufferSize__retval,)


@cython.embedsignature(True)
def hipsolverZunmqr_bufferSize(object handle, object side, object trans, int m, int n, int k, object A, int lda, object tau, object C, int ldc, object lwork):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        side (`~.hipblasSideMode_t`):
            (undocumented)

        trans (`~.hipblasOperation_t`):
            (undocumented)

        m (`~.int`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        k (`~.int`):
            (undocumented)

        A (`~.double2`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        tau (`~.double2`/`~.object`):
            (undocumented)

        C (`~.double2`/`~.object`):
            (undocumented)

        ldc (`~.int`):
            (undocumented)

        lwork (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)
    """
    if not isinstance(side,_hipblasSideMode_t__Base):
        raise TypeError("argument 'side' must be of type '_hipblasSideMode_t__Base'")                    
    if not isinstance(trans,_hipblasOperation_t__Base):
        raise TypeError("argument 'trans' must be of type '_hipblasOperation_t__Base'")
    _hipsolverZunmqr_bufferSize__retval = hipsolverStatus_t(chipsolver.hipsolverZunmqr_bufferSize(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,side.value,trans.value,m,n,k,
        double2.fromPyobj(A).getElementPtr(),lda,
        double2.fromPyobj(tau).getElementPtr(),
        double2.fromPyobj(C).getElementPtr(),ldc,
        <int *>hip._util.types.ListOfInt.fromPyobj(lwork)._ptr))
    return (_hipsolverZunmqr_bufferSize__retval,)


@cython.embedsignature(True)
def hipsolverSormqr(object handle, object side, object trans, int m, int n, int k, object A, int lda, object tau, object C, int ldc, object work, int lwork, object devInfo):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        side (`~.hipblasSideMode_t`):
            (undocumented)

        trans (`~.hipblasOperation_t`):
            (undocumented)

        m (`~.int`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        k (`~.int`):
            (undocumented)

        A (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        tau (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        C (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        ldc (`~.int`):
            (undocumented)

        work (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lwork (`~.int`):
            (undocumented)

        devInfo (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)
    """
    if not isinstance(side,_hipblasSideMode_t__Base):
        raise TypeError("argument 'side' must be of type '_hipblasSideMode_t__Base'")                    
    if not isinstance(trans,_hipblasOperation_t__Base):
        raise TypeError("argument 'trans' must be of type '_hipblasOperation_t__Base'")
    _hipsolverSormqr__retval = hipsolverStatus_t(chipsolver.hipsolverSormqr(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,side.value,trans.value,m,n,k,
        <float *>hip._util.types.Pointer.fromPyobj(A)._ptr,lda,
        <float *>hip._util.types.Pointer.fromPyobj(tau)._ptr,
        <float *>hip._util.types.Pointer.fromPyobj(C)._ptr,ldc,
        <float *>hip._util.types.Pointer.fromPyobj(work)._ptr,lwork,
        <int *>hip._util.types.ListOfInt.fromPyobj(devInfo)._ptr))
    return (_hipsolverSormqr__retval,)


@cython.embedsignature(True)
def hipsolverDormqr(object handle, object side, object trans, int m, int n, int k, object A, int lda, object tau, object C, int ldc, object work, int lwork, object devInfo):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        side (`~.hipblasSideMode_t`):
            (undocumented)

        trans (`~.hipblasOperation_t`):
            (undocumented)

        m (`~.int`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        k (`~.int`):
            (undocumented)

        A (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        tau (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        C (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        ldc (`~.int`):
            (undocumented)

        work (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lwork (`~.int`):
            (undocumented)

        devInfo (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)
    """
    if not isinstance(side,_hipblasSideMode_t__Base):
        raise TypeError("argument 'side' must be of type '_hipblasSideMode_t__Base'")                    
    if not isinstance(trans,_hipblasOperation_t__Base):
        raise TypeError("argument 'trans' must be of type '_hipblasOperation_t__Base'")
    _hipsolverDormqr__retval = hipsolverStatus_t(chipsolver.hipsolverDormqr(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,side.value,trans.value,m,n,k,
        <double *>hip._util.types.Pointer.fromPyobj(A)._ptr,lda,
        <double *>hip._util.types.Pointer.fromPyobj(tau)._ptr,
        <double *>hip._util.types.Pointer.fromPyobj(C)._ptr,ldc,
        <double *>hip._util.types.Pointer.fromPyobj(work)._ptr,lwork,
        <int *>hip._util.types.ListOfInt.fromPyobj(devInfo)._ptr))
    return (_hipsolverDormqr__retval,)


@cython.embedsignature(True)
def hipsolverCunmqr(object handle, object side, object trans, int m, int n, int k, object A, int lda, object tau, object C, int ldc, object work, int lwork, object devInfo):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        side (`~.hipblasSideMode_t`):
            (undocumented)

        trans (`~.hipblasOperation_t`):
            (undocumented)

        m (`~.int`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        k (`~.int`):
            (undocumented)

        A (`~.float2`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        tau (`~.float2`/`~.object`):
            (undocumented)

        C (`~.float2`/`~.object`):
            (undocumented)

        ldc (`~.int`):
            (undocumented)

        work (`~.float2`/`~.object`):
            (undocumented)

        lwork (`~.int`):
            (undocumented)

        devInfo (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)
    """
    if not isinstance(side,_hipblasSideMode_t__Base):
        raise TypeError("argument 'side' must be of type '_hipblasSideMode_t__Base'")                    
    if not isinstance(trans,_hipblasOperation_t__Base):
        raise TypeError("argument 'trans' must be of type '_hipblasOperation_t__Base'")
    _hipsolverCunmqr__retval = hipsolverStatus_t(chipsolver.hipsolverCunmqr(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,side.value,trans.value,m,n,k,
        float2.fromPyobj(A).getElementPtr(),lda,
        float2.fromPyobj(tau).getElementPtr(),
        float2.fromPyobj(C).getElementPtr(),ldc,
        float2.fromPyobj(work).getElementPtr(),lwork,
        <int *>hip._util.types.ListOfInt.fromPyobj(devInfo)._ptr))
    return (_hipsolverCunmqr__retval,)


@cython.embedsignature(True)
def hipsolverZunmqr(object handle, object side, object trans, int m, int n, int k, object A, int lda, object tau, object C, int ldc, object work, int lwork, object devInfo):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        side (`~.hipblasSideMode_t`):
            (undocumented)

        trans (`~.hipblasOperation_t`):
            (undocumented)

        m (`~.int`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        k (`~.int`):
            (undocumented)

        A (`~.double2`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        tau (`~.double2`/`~.object`):
            (undocumented)

        C (`~.double2`/`~.object`):
            (undocumented)

        ldc (`~.int`):
            (undocumented)

        work (`~.double2`/`~.object`):
            (undocumented)

        lwork (`~.int`):
            (undocumented)

        devInfo (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)
    """
    if not isinstance(side,_hipblasSideMode_t__Base):
        raise TypeError("argument 'side' must be of type '_hipblasSideMode_t__Base'")                    
    if not isinstance(trans,_hipblasOperation_t__Base):
        raise TypeError("argument 'trans' must be of type '_hipblasOperation_t__Base'")
    _hipsolverZunmqr__retval = hipsolverStatus_t(chipsolver.hipsolverZunmqr(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,side.value,trans.value,m,n,k,
        double2.fromPyobj(A).getElementPtr(),lda,
        double2.fromPyobj(tau).getElementPtr(),
        double2.fromPyobj(C).getElementPtr(),ldc,
        double2.fromPyobj(work).getElementPtr(),lwork,
        <int *>hip._util.types.ListOfInt.fromPyobj(devInfo)._ptr))
    return (_hipsolverZunmqr__retval,)


@cython.embedsignature(True)
def hipsolverSormtr_bufferSize(object handle, object side, object uplo, object trans, int m, int n, object A, int lda, object tau, object C, int ldc, object lwork):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        side (`~.hipblasSideMode_t`):
            (undocumented)

        uplo (`~.hipblasFillMode_t`):
            (undocumented)

        trans (`~.hipblasOperation_t`):
            (undocumented)

        m (`~.int`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        A (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        tau (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        C (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        ldc (`~.int`):
            (undocumented)

        lwork (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)
    """
    if not isinstance(side,_hipblasSideMode_t__Base):
        raise TypeError("argument 'side' must be of type '_hipblasSideMode_t__Base'")                    
    if not isinstance(uplo,_hipblasFillMode_t__Base):
        raise TypeError("argument 'uplo' must be of type '_hipblasFillMode_t__Base'")                    
    if not isinstance(trans,_hipblasOperation_t__Base):
        raise TypeError("argument 'trans' must be of type '_hipblasOperation_t__Base'")
    _hipsolverSormtr_bufferSize__retval = hipsolverStatus_t(chipsolver.hipsolverSormtr_bufferSize(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,side.value,uplo.value,trans.value,m,n,
        <float *>hip._util.types.Pointer.fromPyobj(A)._ptr,lda,
        <float *>hip._util.types.Pointer.fromPyobj(tau)._ptr,
        <float *>hip._util.types.Pointer.fromPyobj(C)._ptr,ldc,
        <int *>hip._util.types.ListOfInt.fromPyobj(lwork)._ptr))
    return (_hipsolverSormtr_bufferSize__retval,)


@cython.embedsignature(True)
def hipsolverDormtr_bufferSize(object handle, object side, object uplo, object trans, int m, int n, object A, int lda, object tau, object C, int ldc, object lwork):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        side (`~.hipblasSideMode_t`):
            (undocumented)

        uplo (`~.hipblasFillMode_t`):
            (undocumented)

        trans (`~.hipblasOperation_t`):
            (undocumented)

        m (`~.int`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        A (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        tau (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        C (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        ldc (`~.int`):
            (undocumented)

        lwork (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)
    """
    if not isinstance(side,_hipblasSideMode_t__Base):
        raise TypeError("argument 'side' must be of type '_hipblasSideMode_t__Base'")                    
    if not isinstance(uplo,_hipblasFillMode_t__Base):
        raise TypeError("argument 'uplo' must be of type '_hipblasFillMode_t__Base'")                    
    if not isinstance(trans,_hipblasOperation_t__Base):
        raise TypeError("argument 'trans' must be of type '_hipblasOperation_t__Base'")
    _hipsolverDormtr_bufferSize__retval = hipsolverStatus_t(chipsolver.hipsolverDormtr_bufferSize(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,side.value,uplo.value,trans.value,m,n,
        <double *>hip._util.types.Pointer.fromPyobj(A)._ptr,lda,
        <double *>hip._util.types.Pointer.fromPyobj(tau)._ptr,
        <double *>hip._util.types.Pointer.fromPyobj(C)._ptr,ldc,
        <int *>hip._util.types.ListOfInt.fromPyobj(lwork)._ptr))
    return (_hipsolverDormtr_bufferSize__retval,)


@cython.embedsignature(True)
def hipsolverCunmtr_bufferSize(object handle, object side, object uplo, object trans, int m, int n, object A, int lda, object tau, object C, int ldc, object lwork):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        side (`~.hipblasSideMode_t`):
            (undocumented)

        uplo (`~.hipblasFillMode_t`):
            (undocumented)

        trans (`~.hipblasOperation_t`):
            (undocumented)

        m (`~.int`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        A (`~.float2`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        tau (`~.float2`/`~.object`):
            (undocumented)

        C (`~.float2`/`~.object`):
            (undocumented)

        ldc (`~.int`):
            (undocumented)

        lwork (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)
    """
    if not isinstance(side,_hipblasSideMode_t__Base):
        raise TypeError("argument 'side' must be of type '_hipblasSideMode_t__Base'")                    
    if not isinstance(uplo,_hipblasFillMode_t__Base):
        raise TypeError("argument 'uplo' must be of type '_hipblasFillMode_t__Base'")                    
    if not isinstance(trans,_hipblasOperation_t__Base):
        raise TypeError("argument 'trans' must be of type '_hipblasOperation_t__Base'")
    _hipsolverCunmtr_bufferSize__retval = hipsolverStatus_t(chipsolver.hipsolverCunmtr_bufferSize(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,side.value,uplo.value,trans.value,m,n,
        float2.fromPyobj(A).getElementPtr(),lda,
        float2.fromPyobj(tau).getElementPtr(),
        float2.fromPyobj(C).getElementPtr(),ldc,
        <int *>hip._util.types.ListOfInt.fromPyobj(lwork)._ptr))
    return (_hipsolverCunmtr_bufferSize__retval,)


@cython.embedsignature(True)
def hipsolverZunmtr_bufferSize(object handle, object side, object uplo, object trans, int m, int n, object A, int lda, object tau, object C, int ldc, object lwork):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        side (`~.hipblasSideMode_t`):
            (undocumented)

        uplo (`~.hipblasFillMode_t`):
            (undocumented)

        trans (`~.hipblasOperation_t`):
            (undocumented)

        m (`~.int`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        A (`~.double2`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        tau (`~.double2`/`~.object`):
            (undocumented)

        C (`~.double2`/`~.object`):
            (undocumented)

        ldc (`~.int`):
            (undocumented)

        lwork (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)
    """
    if not isinstance(side,_hipblasSideMode_t__Base):
        raise TypeError("argument 'side' must be of type '_hipblasSideMode_t__Base'")                    
    if not isinstance(uplo,_hipblasFillMode_t__Base):
        raise TypeError("argument 'uplo' must be of type '_hipblasFillMode_t__Base'")                    
    if not isinstance(trans,_hipblasOperation_t__Base):
        raise TypeError("argument 'trans' must be of type '_hipblasOperation_t__Base'")
    _hipsolverZunmtr_bufferSize__retval = hipsolverStatus_t(chipsolver.hipsolverZunmtr_bufferSize(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,side.value,uplo.value,trans.value,m,n,
        double2.fromPyobj(A).getElementPtr(),lda,
        double2.fromPyobj(tau).getElementPtr(),
        double2.fromPyobj(C).getElementPtr(),ldc,
        <int *>hip._util.types.ListOfInt.fromPyobj(lwork)._ptr))
    return (_hipsolverZunmtr_bufferSize__retval,)


@cython.embedsignature(True)
def hipsolverSormtr(object handle, object side, object uplo, object trans, int m, int n, object A, int lda, object tau, object C, int ldc, object work, int lwork, object devInfo):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        side (`~.hipblasSideMode_t`):
            (undocumented)

        uplo (`~.hipblasFillMode_t`):
            (undocumented)

        trans (`~.hipblasOperation_t`):
            (undocumented)

        m (`~.int`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        A (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        tau (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        C (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        ldc (`~.int`):
            (undocumented)

        work (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lwork (`~.int`):
            (undocumented)

        devInfo (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)
    """
    if not isinstance(side,_hipblasSideMode_t__Base):
        raise TypeError("argument 'side' must be of type '_hipblasSideMode_t__Base'")                    
    if not isinstance(uplo,_hipblasFillMode_t__Base):
        raise TypeError("argument 'uplo' must be of type '_hipblasFillMode_t__Base'")                    
    if not isinstance(trans,_hipblasOperation_t__Base):
        raise TypeError("argument 'trans' must be of type '_hipblasOperation_t__Base'")
    _hipsolverSormtr__retval = hipsolverStatus_t(chipsolver.hipsolverSormtr(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,side.value,uplo.value,trans.value,m,n,
        <float *>hip._util.types.Pointer.fromPyobj(A)._ptr,lda,
        <float *>hip._util.types.Pointer.fromPyobj(tau)._ptr,
        <float *>hip._util.types.Pointer.fromPyobj(C)._ptr,ldc,
        <float *>hip._util.types.Pointer.fromPyobj(work)._ptr,lwork,
        <int *>hip._util.types.ListOfInt.fromPyobj(devInfo)._ptr))
    return (_hipsolverSormtr__retval,)


@cython.embedsignature(True)
def hipsolverDormtr(object handle, object side, object uplo, object trans, int m, int n, object A, int lda, object tau, object C, int ldc, object work, int lwork, object devInfo):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        side (`~.hipblasSideMode_t`):
            (undocumented)

        uplo (`~.hipblasFillMode_t`):
            (undocumented)

        trans (`~.hipblasOperation_t`):
            (undocumented)

        m (`~.int`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        A (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        tau (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        C (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        ldc (`~.int`):
            (undocumented)

        work (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lwork (`~.int`):
            (undocumented)

        devInfo (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)
    """
    if not isinstance(side,_hipblasSideMode_t__Base):
        raise TypeError("argument 'side' must be of type '_hipblasSideMode_t__Base'")                    
    if not isinstance(uplo,_hipblasFillMode_t__Base):
        raise TypeError("argument 'uplo' must be of type '_hipblasFillMode_t__Base'")                    
    if not isinstance(trans,_hipblasOperation_t__Base):
        raise TypeError("argument 'trans' must be of type '_hipblasOperation_t__Base'")
    _hipsolverDormtr__retval = hipsolverStatus_t(chipsolver.hipsolverDormtr(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,side.value,uplo.value,trans.value,m,n,
        <double *>hip._util.types.Pointer.fromPyobj(A)._ptr,lda,
        <double *>hip._util.types.Pointer.fromPyobj(tau)._ptr,
        <double *>hip._util.types.Pointer.fromPyobj(C)._ptr,ldc,
        <double *>hip._util.types.Pointer.fromPyobj(work)._ptr,lwork,
        <int *>hip._util.types.ListOfInt.fromPyobj(devInfo)._ptr))
    return (_hipsolverDormtr__retval,)


@cython.embedsignature(True)
def hipsolverCunmtr(object handle, object side, object uplo, object trans, int m, int n, object A, int lda, object tau, object C, int ldc, object work, int lwork, object devInfo):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        side (`~.hipblasSideMode_t`):
            (undocumented)

        uplo (`~.hipblasFillMode_t`):
            (undocumented)

        trans (`~.hipblasOperation_t`):
            (undocumented)

        m (`~.int`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        A (`~.float2`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        tau (`~.float2`/`~.object`):
            (undocumented)

        C (`~.float2`/`~.object`):
            (undocumented)

        ldc (`~.int`):
            (undocumented)

        work (`~.float2`/`~.object`):
            (undocumented)

        lwork (`~.int`):
            (undocumented)

        devInfo (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)
    """
    if not isinstance(side,_hipblasSideMode_t__Base):
        raise TypeError("argument 'side' must be of type '_hipblasSideMode_t__Base'")                    
    if not isinstance(uplo,_hipblasFillMode_t__Base):
        raise TypeError("argument 'uplo' must be of type '_hipblasFillMode_t__Base'")                    
    if not isinstance(trans,_hipblasOperation_t__Base):
        raise TypeError("argument 'trans' must be of type '_hipblasOperation_t__Base'")
    _hipsolverCunmtr__retval = hipsolverStatus_t(chipsolver.hipsolverCunmtr(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,side.value,uplo.value,trans.value,m,n,
        float2.fromPyobj(A).getElementPtr(),lda,
        float2.fromPyobj(tau).getElementPtr(),
        float2.fromPyobj(C).getElementPtr(),ldc,
        float2.fromPyobj(work).getElementPtr(),lwork,
        <int *>hip._util.types.ListOfInt.fromPyobj(devInfo)._ptr))
    return (_hipsolverCunmtr__retval,)


@cython.embedsignature(True)
def hipsolverZunmtr(object handle, object side, object uplo, object trans, int m, int n, object A, int lda, object tau, object C, int ldc, object work, int lwork, object devInfo):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        side (`~.hipblasSideMode_t`):
            (undocumented)

        uplo (`~.hipblasFillMode_t`):
            (undocumented)

        trans (`~.hipblasOperation_t`):
            (undocumented)

        m (`~.int`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        A (`~.double2`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        tau (`~.double2`/`~.object`):
            (undocumented)

        C (`~.double2`/`~.object`):
            (undocumented)

        ldc (`~.int`):
            (undocumented)

        work (`~.double2`/`~.object`):
            (undocumented)

        lwork (`~.int`):
            (undocumented)

        devInfo (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)
    """
    if not isinstance(side,_hipblasSideMode_t__Base):
        raise TypeError("argument 'side' must be of type '_hipblasSideMode_t__Base'")                    
    if not isinstance(uplo,_hipblasFillMode_t__Base):
        raise TypeError("argument 'uplo' must be of type '_hipblasFillMode_t__Base'")                    
    if not isinstance(trans,_hipblasOperation_t__Base):
        raise TypeError("argument 'trans' must be of type '_hipblasOperation_t__Base'")
    _hipsolverZunmtr__retval = hipsolverStatus_t(chipsolver.hipsolverZunmtr(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,side.value,uplo.value,trans.value,m,n,
        double2.fromPyobj(A).getElementPtr(),lda,
        double2.fromPyobj(tau).getElementPtr(),
        double2.fromPyobj(C).getElementPtr(),ldc,
        double2.fromPyobj(work).getElementPtr(),lwork,
        <int *>hip._util.types.ListOfInt.fromPyobj(devInfo)._ptr))
    return (_hipsolverZunmtr__retval,)


@cython.embedsignature(True)
def hipsolverSgebrd_bufferSize(object handle, int m, int n, object lwork):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        m (`~.int`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        lwork (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)
    """
    _hipsolverSgebrd_bufferSize__retval = hipsolverStatus_t(chipsolver.hipsolverSgebrd_bufferSize(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,m,n,
        <int *>hip._util.types.ListOfInt.fromPyobj(lwork)._ptr))
    return (_hipsolverSgebrd_bufferSize__retval,)


@cython.embedsignature(True)
def hipsolverDgebrd_bufferSize(object handle, int m, int n, object lwork):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        m (`~.int`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        lwork (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)
    """
    _hipsolverDgebrd_bufferSize__retval = hipsolverStatus_t(chipsolver.hipsolverDgebrd_bufferSize(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,m,n,
        <int *>hip._util.types.ListOfInt.fromPyobj(lwork)._ptr))
    return (_hipsolverDgebrd_bufferSize__retval,)


@cython.embedsignature(True)
def hipsolverCgebrd_bufferSize(object handle, int m, int n, object lwork):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        m (`~.int`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        lwork (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)
    """
    _hipsolverCgebrd_bufferSize__retval = hipsolverStatus_t(chipsolver.hipsolverCgebrd_bufferSize(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,m,n,
        <int *>hip._util.types.ListOfInt.fromPyobj(lwork)._ptr))
    return (_hipsolverCgebrd_bufferSize__retval,)


@cython.embedsignature(True)
def hipsolverZgebrd_bufferSize(object handle, int m, int n, object lwork):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        m (`~.int`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        lwork (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)
    """
    _hipsolverZgebrd_bufferSize__retval = hipsolverStatus_t(chipsolver.hipsolverZgebrd_bufferSize(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,m,n,
        <int *>hip._util.types.ListOfInt.fromPyobj(lwork)._ptr))
    return (_hipsolverZgebrd_bufferSize__retval,)


@cython.embedsignature(True)
def hipsolverSgebrd(object handle, int m, int n, object A, int lda, object D, object E, object tauq, object taup, object work, int lwork, object devInfo):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        m (`~.int`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        A (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        D (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        E (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        tauq (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        taup (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        work (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lwork (`~.int`):
            (undocumented)

        devInfo (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)
    """
    _hipsolverSgebrd__retval = hipsolverStatus_t(chipsolver.hipsolverSgebrd(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,m,n,
        <float *>hip._util.types.Pointer.fromPyobj(A)._ptr,lda,
        <float *>hip._util.types.Pointer.fromPyobj(D)._ptr,
        <float *>hip._util.types.Pointer.fromPyobj(E)._ptr,
        <float *>hip._util.types.Pointer.fromPyobj(tauq)._ptr,
        <float *>hip._util.types.Pointer.fromPyobj(taup)._ptr,
        <float *>hip._util.types.Pointer.fromPyobj(work)._ptr,lwork,
        <int *>hip._util.types.ListOfInt.fromPyobj(devInfo)._ptr))
    return (_hipsolverSgebrd__retval,)


@cython.embedsignature(True)
def hipsolverDgebrd(object handle, int m, int n, object A, int lda, object D, object E, object tauq, object taup, object work, int lwork, object devInfo):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        m (`~.int`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        A (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        D (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        E (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        tauq (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        taup (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        work (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lwork (`~.int`):
            (undocumented)

        devInfo (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)
    """
    _hipsolverDgebrd__retval = hipsolverStatus_t(chipsolver.hipsolverDgebrd(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,m,n,
        <double *>hip._util.types.Pointer.fromPyobj(A)._ptr,lda,
        <double *>hip._util.types.Pointer.fromPyobj(D)._ptr,
        <double *>hip._util.types.Pointer.fromPyobj(E)._ptr,
        <double *>hip._util.types.Pointer.fromPyobj(tauq)._ptr,
        <double *>hip._util.types.Pointer.fromPyobj(taup)._ptr,
        <double *>hip._util.types.Pointer.fromPyobj(work)._ptr,lwork,
        <int *>hip._util.types.ListOfInt.fromPyobj(devInfo)._ptr))
    return (_hipsolverDgebrd__retval,)


@cython.embedsignature(True)
def hipsolverCgebrd(object handle, int m, int n, object A, int lda, object D, object E, object tauq, object taup, object work, int lwork, object devInfo):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        m (`~.int`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        A (`~.float2`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        D (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        E (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        tauq (`~.float2`/`~.object`):
            (undocumented)

        taup (`~.float2`/`~.object`):
            (undocumented)

        work (`~.float2`/`~.object`):
            (undocumented)

        lwork (`~.int`):
            (undocumented)

        devInfo (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)
    """
    _hipsolverCgebrd__retval = hipsolverStatus_t(chipsolver.hipsolverCgebrd(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,m,n,
        float2.fromPyobj(A).getElementPtr(),lda,
        <float *>hip._util.types.Pointer.fromPyobj(D)._ptr,
        <float *>hip._util.types.Pointer.fromPyobj(E)._ptr,
        float2.fromPyobj(tauq).getElementPtr(),
        float2.fromPyobj(taup).getElementPtr(),
        float2.fromPyobj(work).getElementPtr(),lwork,
        <int *>hip._util.types.ListOfInt.fromPyobj(devInfo)._ptr))
    return (_hipsolverCgebrd__retval,)


@cython.embedsignature(True)
def hipsolverZgebrd(object handle, int m, int n, object A, int lda, object D, object E, object tauq, object taup, object work, int lwork, object devInfo):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        m (`~.int`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        A (`~.double2`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        D (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        E (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        tauq (`~.double2`/`~.object`):
            (undocumented)

        taup (`~.double2`/`~.object`):
            (undocumented)

        work (`~.double2`/`~.object`):
            (undocumented)

        lwork (`~.int`):
            (undocumented)

        devInfo (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)
    """
    _hipsolverZgebrd__retval = hipsolverStatus_t(chipsolver.hipsolverZgebrd(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,m,n,
        double2.fromPyobj(A).getElementPtr(),lda,
        <double *>hip._util.types.Pointer.fromPyobj(D)._ptr,
        <double *>hip._util.types.Pointer.fromPyobj(E)._ptr,
        double2.fromPyobj(tauq).getElementPtr(),
        double2.fromPyobj(taup).getElementPtr(),
        double2.fromPyobj(work).getElementPtr(),lwork,
        <int *>hip._util.types.ListOfInt.fromPyobj(devInfo)._ptr))
    return (_hipsolverZgebrd__retval,)


@cython.embedsignature(True)
def hipsolverSSgels_bufferSize(object handle, int m, int n, int nrhs, object A, int lda, object B, int ldb, object X, int ldx, object lwork):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        m (`~.int`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        nrhs (`~.int`):
            (undocumented)

        A (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        B (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        ldb (`~.int`):
            (undocumented)

        X (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        ldx (`~.int`):
            (undocumented)

        lwork (`~.hip._util.types.ListOfUnsignedLong`/`~.object`):
            (undocumented)
    """
    _hipsolverSSgels_bufferSize__retval = hipsolverStatus_t(chipsolver.hipsolverSSgels_bufferSize(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,m,n,nrhs,
        <float *>hip._util.types.Pointer.fromPyobj(A)._ptr,lda,
        <float *>hip._util.types.Pointer.fromPyobj(B)._ptr,ldb,
        <float *>hip._util.types.Pointer.fromPyobj(X)._ptr,ldx,
        <unsigned long *>hip._util.types.ListOfUnsignedLong.fromPyobj(lwork)._ptr))
    return (_hipsolverSSgels_bufferSize__retval,)


@cython.embedsignature(True)
def hipsolverDDgels_bufferSize(object handle, int m, int n, int nrhs, object A, int lda, object B, int ldb, object X, int ldx, object lwork):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        m (`~.int`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        nrhs (`~.int`):
            (undocumented)

        A (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        B (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        ldb (`~.int`):
            (undocumented)

        X (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        ldx (`~.int`):
            (undocumented)

        lwork (`~.hip._util.types.ListOfUnsignedLong`/`~.object`):
            (undocumented)
    """
    _hipsolverDDgels_bufferSize__retval = hipsolverStatus_t(chipsolver.hipsolverDDgels_bufferSize(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,m,n,nrhs,
        <double *>hip._util.types.Pointer.fromPyobj(A)._ptr,lda,
        <double *>hip._util.types.Pointer.fromPyobj(B)._ptr,ldb,
        <double *>hip._util.types.Pointer.fromPyobj(X)._ptr,ldx,
        <unsigned long *>hip._util.types.ListOfUnsignedLong.fromPyobj(lwork)._ptr))
    return (_hipsolverDDgels_bufferSize__retval,)


@cython.embedsignature(True)
def hipsolverCCgels_bufferSize(object handle, int m, int n, int nrhs, object A, int lda, object B, int ldb, object X, int ldx, object lwork):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        m (`~.int`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        nrhs (`~.int`):
            (undocumented)

        A (`~.float2`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        B (`~.float2`/`~.object`):
            (undocumented)

        ldb (`~.int`):
            (undocumented)

        X (`~.float2`/`~.object`):
            (undocumented)

        ldx (`~.int`):
            (undocumented)

        lwork (`~.hip._util.types.ListOfUnsignedLong`/`~.object`):
            (undocumented)
    """
    _hipsolverCCgels_bufferSize__retval = hipsolverStatus_t(chipsolver.hipsolverCCgels_bufferSize(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,m,n,nrhs,
        float2.fromPyobj(A).getElementPtr(),lda,
        float2.fromPyobj(B).getElementPtr(),ldb,
        float2.fromPyobj(X).getElementPtr(),ldx,
        <unsigned long *>hip._util.types.ListOfUnsignedLong.fromPyobj(lwork)._ptr))
    return (_hipsolverCCgels_bufferSize__retval,)


@cython.embedsignature(True)
def hipsolverZZgels_bufferSize(object handle, int m, int n, int nrhs, object A, int lda, object B, int ldb, object X, int ldx, object lwork):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        m (`~.int`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        nrhs (`~.int`):
            (undocumented)

        A (`~.double2`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        B (`~.double2`/`~.object`):
            (undocumented)

        ldb (`~.int`):
            (undocumented)

        X (`~.double2`/`~.object`):
            (undocumented)

        ldx (`~.int`):
            (undocumented)

        lwork (`~.hip._util.types.ListOfUnsignedLong`/`~.object`):
            (undocumented)
    """
    _hipsolverZZgels_bufferSize__retval = hipsolverStatus_t(chipsolver.hipsolverZZgels_bufferSize(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,m,n,nrhs,
        double2.fromPyobj(A).getElementPtr(),lda,
        double2.fromPyobj(B).getElementPtr(),ldb,
        double2.fromPyobj(X).getElementPtr(),ldx,
        <unsigned long *>hip._util.types.ListOfUnsignedLong.fromPyobj(lwork)._ptr))
    return (_hipsolverZZgels_bufferSize__retval,)


@cython.embedsignature(True)
def hipsolverSSgels(object handle, int m, int n, int nrhs, object A, int lda, object B, int ldb, object X, int ldx, object work, unsigned long lwork, object niters, object devInfo):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        m (`~.int`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        nrhs (`~.int`):
            (undocumented)

        A (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        B (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        ldb (`~.int`):
            (undocumented)

        X (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        ldx (`~.int`):
            (undocumented)

        work (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lwork (`~.int`):
            (undocumented)

        niters (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)

        devInfo (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)
    """
    _hipsolverSSgels__retval = hipsolverStatus_t(chipsolver.hipsolverSSgels(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,m,n,nrhs,
        <float *>hip._util.types.Pointer.fromPyobj(A)._ptr,lda,
        <float *>hip._util.types.Pointer.fromPyobj(B)._ptr,ldb,
        <float *>hip._util.types.Pointer.fromPyobj(X)._ptr,ldx,
        <void *>hip._util.types.Pointer.fromPyobj(work)._ptr,lwork,
        <int *>hip._util.types.ListOfInt.fromPyobj(niters)._ptr,
        <int *>hip._util.types.ListOfInt.fromPyobj(devInfo)._ptr))
    return (_hipsolverSSgels__retval,)


@cython.embedsignature(True)
def hipsolverDDgels(object handle, int m, int n, int nrhs, object A, int lda, object B, int ldb, object X, int ldx, object work, unsigned long lwork, object niters, object devInfo):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        m (`~.int`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        nrhs (`~.int`):
            (undocumented)

        A (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        B (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        ldb (`~.int`):
            (undocumented)

        X (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        ldx (`~.int`):
            (undocumented)

        work (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lwork (`~.int`):
            (undocumented)

        niters (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)

        devInfo (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)
    """
    _hipsolverDDgels__retval = hipsolverStatus_t(chipsolver.hipsolverDDgels(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,m,n,nrhs,
        <double *>hip._util.types.Pointer.fromPyobj(A)._ptr,lda,
        <double *>hip._util.types.Pointer.fromPyobj(B)._ptr,ldb,
        <double *>hip._util.types.Pointer.fromPyobj(X)._ptr,ldx,
        <void *>hip._util.types.Pointer.fromPyobj(work)._ptr,lwork,
        <int *>hip._util.types.ListOfInt.fromPyobj(niters)._ptr,
        <int *>hip._util.types.ListOfInt.fromPyobj(devInfo)._ptr))
    return (_hipsolverDDgels__retval,)


@cython.embedsignature(True)
def hipsolverCCgels(object handle, int m, int n, int nrhs, object A, int lda, object B, int ldb, object X, int ldx, object work, unsigned long lwork, object niters, object devInfo):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        m (`~.int`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        nrhs (`~.int`):
            (undocumented)

        A (`~.float2`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        B (`~.float2`/`~.object`):
            (undocumented)

        ldb (`~.int`):
            (undocumented)

        X (`~.float2`/`~.object`):
            (undocumented)

        ldx (`~.int`):
            (undocumented)

        work (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lwork (`~.int`):
            (undocumented)

        niters (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)

        devInfo (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)
    """
    _hipsolverCCgels__retval = hipsolverStatus_t(chipsolver.hipsolverCCgels(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,m,n,nrhs,
        float2.fromPyobj(A).getElementPtr(),lda,
        float2.fromPyobj(B).getElementPtr(),ldb,
        float2.fromPyobj(X).getElementPtr(),ldx,
        <void *>hip._util.types.Pointer.fromPyobj(work)._ptr,lwork,
        <int *>hip._util.types.ListOfInt.fromPyobj(niters)._ptr,
        <int *>hip._util.types.ListOfInt.fromPyobj(devInfo)._ptr))
    return (_hipsolverCCgels__retval,)


@cython.embedsignature(True)
def hipsolverZZgels(object handle, int m, int n, int nrhs, object A, int lda, object B, int ldb, object X, int ldx, object work, unsigned long lwork, object niters, object devInfo):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        m (`~.int`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        nrhs (`~.int`):
            (undocumented)

        A (`~.double2`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        B (`~.double2`/`~.object`):
            (undocumented)

        ldb (`~.int`):
            (undocumented)

        X (`~.double2`/`~.object`):
            (undocumented)

        ldx (`~.int`):
            (undocumented)

        work (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lwork (`~.int`):
            (undocumented)

        niters (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)

        devInfo (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)
    """
    _hipsolverZZgels__retval = hipsolverStatus_t(chipsolver.hipsolverZZgels(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,m,n,nrhs,
        double2.fromPyobj(A).getElementPtr(),lda,
        double2.fromPyobj(B).getElementPtr(),ldb,
        double2.fromPyobj(X).getElementPtr(),ldx,
        <void *>hip._util.types.Pointer.fromPyobj(work)._ptr,lwork,
        <int *>hip._util.types.ListOfInt.fromPyobj(niters)._ptr,
        <int *>hip._util.types.ListOfInt.fromPyobj(devInfo)._ptr))
    return (_hipsolverZZgels__retval,)


@cython.embedsignature(True)
def hipsolverSgeqrf_bufferSize(object handle, int m, int n, object A, int lda, object lwork):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        m (`~.int`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        A (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        lwork (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)
    """
    _hipsolverSgeqrf_bufferSize__retval = hipsolverStatus_t(chipsolver.hipsolverSgeqrf_bufferSize(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,m,n,
        <float *>hip._util.types.Pointer.fromPyobj(A)._ptr,lda,
        <int *>hip._util.types.ListOfInt.fromPyobj(lwork)._ptr))
    return (_hipsolverSgeqrf_bufferSize__retval,)


@cython.embedsignature(True)
def hipsolverDgeqrf_bufferSize(object handle, int m, int n, object A, int lda, object lwork):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        m (`~.int`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        A (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        lwork (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)
    """
    _hipsolverDgeqrf_bufferSize__retval = hipsolverStatus_t(chipsolver.hipsolverDgeqrf_bufferSize(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,m,n,
        <double *>hip._util.types.Pointer.fromPyobj(A)._ptr,lda,
        <int *>hip._util.types.ListOfInt.fromPyobj(lwork)._ptr))
    return (_hipsolverDgeqrf_bufferSize__retval,)


@cython.embedsignature(True)
def hipsolverCgeqrf_bufferSize(object handle, int m, int n, object A, int lda, object lwork):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        m (`~.int`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        A (`~.float2`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        lwork (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)
    """
    _hipsolverCgeqrf_bufferSize__retval = hipsolverStatus_t(chipsolver.hipsolverCgeqrf_bufferSize(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,m,n,
        float2.fromPyobj(A).getElementPtr(),lda,
        <int *>hip._util.types.ListOfInt.fromPyobj(lwork)._ptr))
    return (_hipsolverCgeqrf_bufferSize__retval,)


@cython.embedsignature(True)
def hipsolverZgeqrf_bufferSize(object handle, int m, int n, object A, int lda, object lwork):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        m (`~.int`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        A (`~.double2`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        lwork (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)
    """
    _hipsolverZgeqrf_bufferSize__retval = hipsolverStatus_t(chipsolver.hipsolverZgeqrf_bufferSize(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,m,n,
        double2.fromPyobj(A).getElementPtr(),lda,
        <int *>hip._util.types.ListOfInt.fromPyobj(lwork)._ptr))
    return (_hipsolverZgeqrf_bufferSize__retval,)


@cython.embedsignature(True)
def hipsolverSgeqrf(object handle, int m, int n, object A, int lda, object tau, object work, int lwork, object devInfo):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        m (`~.int`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        A (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        tau (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        work (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lwork (`~.int`):
            (undocumented)

        devInfo (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)
    """
    _hipsolverSgeqrf__retval = hipsolverStatus_t(chipsolver.hipsolverSgeqrf(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,m,n,
        <float *>hip._util.types.Pointer.fromPyobj(A)._ptr,lda,
        <float *>hip._util.types.Pointer.fromPyobj(tau)._ptr,
        <float *>hip._util.types.Pointer.fromPyobj(work)._ptr,lwork,
        <int *>hip._util.types.ListOfInt.fromPyobj(devInfo)._ptr))
    return (_hipsolverSgeqrf__retval,)


@cython.embedsignature(True)
def hipsolverDgeqrf(object handle, int m, int n, object A, int lda, object tau, object work, int lwork, object devInfo):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        m (`~.int`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        A (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        tau (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        work (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lwork (`~.int`):
            (undocumented)

        devInfo (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)
    """
    _hipsolverDgeqrf__retval = hipsolverStatus_t(chipsolver.hipsolverDgeqrf(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,m,n,
        <double *>hip._util.types.Pointer.fromPyobj(A)._ptr,lda,
        <double *>hip._util.types.Pointer.fromPyobj(tau)._ptr,
        <double *>hip._util.types.Pointer.fromPyobj(work)._ptr,lwork,
        <int *>hip._util.types.ListOfInt.fromPyobj(devInfo)._ptr))
    return (_hipsolverDgeqrf__retval,)


@cython.embedsignature(True)
def hipsolverCgeqrf(object handle, int m, int n, object A, int lda, object tau, object work, int lwork, object devInfo):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        m (`~.int`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        A (`~.float2`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        tau (`~.float2`/`~.object`):
            (undocumented)

        work (`~.float2`/`~.object`):
            (undocumented)

        lwork (`~.int`):
            (undocumented)

        devInfo (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)
    """
    _hipsolverCgeqrf__retval = hipsolverStatus_t(chipsolver.hipsolverCgeqrf(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,m,n,
        float2.fromPyobj(A).getElementPtr(),lda,
        float2.fromPyobj(tau).getElementPtr(),
        float2.fromPyobj(work).getElementPtr(),lwork,
        <int *>hip._util.types.ListOfInt.fromPyobj(devInfo)._ptr))
    return (_hipsolverCgeqrf__retval,)


@cython.embedsignature(True)
def hipsolverZgeqrf(object handle, int m, int n, object A, int lda, object tau, object work, int lwork, object devInfo):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        m (`~.int`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        A (`~.double2`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        tau (`~.double2`/`~.object`):
            (undocumented)

        work (`~.double2`/`~.object`):
            (undocumented)

        lwork (`~.int`):
            (undocumented)

        devInfo (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)
    """
    _hipsolverZgeqrf__retval = hipsolverStatus_t(chipsolver.hipsolverZgeqrf(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,m,n,
        double2.fromPyobj(A).getElementPtr(),lda,
        double2.fromPyobj(tau).getElementPtr(),
        double2.fromPyobj(work).getElementPtr(),lwork,
        <int *>hip._util.types.ListOfInt.fromPyobj(devInfo)._ptr))
    return (_hipsolverZgeqrf__retval,)


@cython.embedsignature(True)
def hipsolverSSgesv_bufferSize(object handle, int n, int nrhs, object A, int lda, object devIpiv, object B, int ldb, object X, int ldx, object lwork):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        nrhs (`~.int`):
            (undocumented)

        A (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        devIpiv (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)

        B (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        ldb (`~.int`):
            (undocumented)

        X (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        ldx (`~.int`):
            (undocumented)

        lwork (`~.hip._util.types.ListOfUnsignedLong`/`~.object`):
            (undocumented)
    """
    _hipsolverSSgesv_bufferSize__retval = hipsolverStatus_t(chipsolver.hipsolverSSgesv_bufferSize(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,n,nrhs,
        <float *>hip._util.types.Pointer.fromPyobj(A)._ptr,lda,
        <int *>hip._util.types.ListOfInt.fromPyobj(devIpiv)._ptr,
        <float *>hip._util.types.Pointer.fromPyobj(B)._ptr,ldb,
        <float *>hip._util.types.Pointer.fromPyobj(X)._ptr,ldx,
        <unsigned long *>hip._util.types.ListOfUnsignedLong.fromPyobj(lwork)._ptr))
    return (_hipsolverSSgesv_bufferSize__retval,)


@cython.embedsignature(True)
def hipsolverDDgesv_bufferSize(object handle, int n, int nrhs, object A, int lda, object devIpiv, object B, int ldb, object X, int ldx, object lwork):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        nrhs (`~.int`):
            (undocumented)

        A (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        devIpiv (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)

        B (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        ldb (`~.int`):
            (undocumented)

        X (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        ldx (`~.int`):
            (undocumented)

        lwork (`~.hip._util.types.ListOfUnsignedLong`/`~.object`):
            (undocumented)
    """
    _hipsolverDDgesv_bufferSize__retval = hipsolverStatus_t(chipsolver.hipsolverDDgesv_bufferSize(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,n,nrhs,
        <double *>hip._util.types.Pointer.fromPyobj(A)._ptr,lda,
        <int *>hip._util.types.ListOfInt.fromPyobj(devIpiv)._ptr,
        <double *>hip._util.types.Pointer.fromPyobj(B)._ptr,ldb,
        <double *>hip._util.types.Pointer.fromPyobj(X)._ptr,ldx,
        <unsigned long *>hip._util.types.ListOfUnsignedLong.fromPyobj(lwork)._ptr))
    return (_hipsolverDDgesv_bufferSize__retval,)


@cython.embedsignature(True)
def hipsolverCCgesv_bufferSize(object handle, int n, int nrhs, object A, int lda, object devIpiv, object B, int ldb, object X, int ldx, object lwork):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        nrhs (`~.int`):
            (undocumented)

        A (`~.float2`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        devIpiv (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)

        B (`~.float2`/`~.object`):
            (undocumented)

        ldb (`~.int`):
            (undocumented)

        X (`~.float2`/`~.object`):
            (undocumented)

        ldx (`~.int`):
            (undocumented)

        lwork (`~.hip._util.types.ListOfUnsignedLong`/`~.object`):
            (undocumented)
    """
    _hipsolverCCgesv_bufferSize__retval = hipsolverStatus_t(chipsolver.hipsolverCCgesv_bufferSize(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,n,nrhs,
        float2.fromPyobj(A).getElementPtr(),lda,
        <int *>hip._util.types.ListOfInt.fromPyobj(devIpiv)._ptr,
        float2.fromPyobj(B).getElementPtr(),ldb,
        float2.fromPyobj(X).getElementPtr(),ldx,
        <unsigned long *>hip._util.types.ListOfUnsignedLong.fromPyobj(lwork)._ptr))
    return (_hipsolverCCgesv_bufferSize__retval,)


@cython.embedsignature(True)
def hipsolverZZgesv_bufferSize(object handle, int n, int nrhs, object A, int lda, object devIpiv, object B, int ldb, object X, int ldx, object lwork):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        nrhs (`~.int`):
            (undocumented)

        A (`~.double2`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        devIpiv (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)

        B (`~.double2`/`~.object`):
            (undocumented)

        ldb (`~.int`):
            (undocumented)

        X (`~.double2`/`~.object`):
            (undocumented)

        ldx (`~.int`):
            (undocumented)

        lwork (`~.hip._util.types.ListOfUnsignedLong`/`~.object`):
            (undocumented)
    """
    _hipsolverZZgesv_bufferSize__retval = hipsolverStatus_t(chipsolver.hipsolverZZgesv_bufferSize(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,n,nrhs,
        double2.fromPyobj(A).getElementPtr(),lda,
        <int *>hip._util.types.ListOfInt.fromPyobj(devIpiv)._ptr,
        double2.fromPyobj(B).getElementPtr(),ldb,
        double2.fromPyobj(X).getElementPtr(),ldx,
        <unsigned long *>hip._util.types.ListOfUnsignedLong.fromPyobj(lwork)._ptr))
    return (_hipsolverZZgesv_bufferSize__retval,)


@cython.embedsignature(True)
def hipsolverSSgesv(object handle, int n, int nrhs, object A, int lda, object devIpiv, object B, int ldb, object X, int ldx, object work, unsigned long lwork, object niters, object devInfo):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        nrhs (`~.int`):
            (undocumented)

        A (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        devIpiv (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)

        B (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        ldb (`~.int`):
            (undocumented)

        X (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        ldx (`~.int`):
            (undocumented)

        work (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lwork (`~.int`):
            (undocumented)

        niters (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)

        devInfo (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)
    """
    _hipsolverSSgesv__retval = hipsolverStatus_t(chipsolver.hipsolverSSgesv(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,n,nrhs,
        <float *>hip._util.types.Pointer.fromPyobj(A)._ptr,lda,
        <int *>hip._util.types.ListOfInt.fromPyobj(devIpiv)._ptr,
        <float *>hip._util.types.Pointer.fromPyobj(B)._ptr,ldb,
        <float *>hip._util.types.Pointer.fromPyobj(X)._ptr,ldx,
        <void *>hip._util.types.Pointer.fromPyobj(work)._ptr,lwork,
        <int *>hip._util.types.ListOfInt.fromPyobj(niters)._ptr,
        <int *>hip._util.types.ListOfInt.fromPyobj(devInfo)._ptr))
    return (_hipsolverSSgesv__retval,)


@cython.embedsignature(True)
def hipsolverDDgesv(object handle, int n, int nrhs, object A, int lda, object devIpiv, object B, int ldb, object X, int ldx, object work, unsigned long lwork, object niters, object devInfo):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        nrhs (`~.int`):
            (undocumented)

        A (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        devIpiv (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)

        B (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        ldb (`~.int`):
            (undocumented)

        X (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        ldx (`~.int`):
            (undocumented)

        work (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lwork (`~.int`):
            (undocumented)

        niters (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)

        devInfo (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)
    """
    _hipsolverDDgesv__retval = hipsolverStatus_t(chipsolver.hipsolverDDgesv(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,n,nrhs,
        <double *>hip._util.types.Pointer.fromPyobj(A)._ptr,lda,
        <int *>hip._util.types.ListOfInt.fromPyobj(devIpiv)._ptr,
        <double *>hip._util.types.Pointer.fromPyobj(B)._ptr,ldb,
        <double *>hip._util.types.Pointer.fromPyobj(X)._ptr,ldx,
        <void *>hip._util.types.Pointer.fromPyobj(work)._ptr,lwork,
        <int *>hip._util.types.ListOfInt.fromPyobj(niters)._ptr,
        <int *>hip._util.types.ListOfInt.fromPyobj(devInfo)._ptr))
    return (_hipsolverDDgesv__retval,)


@cython.embedsignature(True)
def hipsolverCCgesv(object handle, int n, int nrhs, object A, int lda, object devIpiv, object B, int ldb, object X, int ldx, object work, unsigned long lwork, object niters, object devInfo):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        nrhs (`~.int`):
            (undocumented)

        A (`~.float2`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        devIpiv (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)

        B (`~.float2`/`~.object`):
            (undocumented)

        ldb (`~.int`):
            (undocumented)

        X (`~.float2`/`~.object`):
            (undocumented)

        ldx (`~.int`):
            (undocumented)

        work (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lwork (`~.int`):
            (undocumented)

        niters (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)

        devInfo (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)
    """
    _hipsolverCCgesv__retval = hipsolverStatus_t(chipsolver.hipsolverCCgesv(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,n,nrhs,
        float2.fromPyobj(A).getElementPtr(),lda,
        <int *>hip._util.types.ListOfInt.fromPyobj(devIpiv)._ptr,
        float2.fromPyobj(B).getElementPtr(),ldb,
        float2.fromPyobj(X).getElementPtr(),ldx,
        <void *>hip._util.types.Pointer.fromPyobj(work)._ptr,lwork,
        <int *>hip._util.types.ListOfInt.fromPyobj(niters)._ptr,
        <int *>hip._util.types.ListOfInt.fromPyobj(devInfo)._ptr))
    return (_hipsolverCCgesv__retval,)


@cython.embedsignature(True)
def hipsolverZZgesv(object handle, int n, int nrhs, object A, int lda, object devIpiv, object B, int ldb, object X, int ldx, object work, unsigned long lwork, object niters, object devInfo):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        nrhs (`~.int`):
            (undocumented)

        A (`~.double2`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        devIpiv (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)

        B (`~.double2`/`~.object`):
            (undocumented)

        ldb (`~.int`):
            (undocumented)

        X (`~.double2`/`~.object`):
            (undocumented)

        ldx (`~.int`):
            (undocumented)

        work (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lwork (`~.int`):
            (undocumented)

        niters (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)

        devInfo (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)
    """
    _hipsolverZZgesv__retval = hipsolverStatus_t(chipsolver.hipsolverZZgesv(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,n,nrhs,
        double2.fromPyobj(A).getElementPtr(),lda,
        <int *>hip._util.types.ListOfInt.fromPyobj(devIpiv)._ptr,
        double2.fromPyobj(B).getElementPtr(),ldb,
        double2.fromPyobj(X).getElementPtr(),ldx,
        <void *>hip._util.types.Pointer.fromPyobj(work)._ptr,lwork,
        <int *>hip._util.types.ListOfInt.fromPyobj(niters)._ptr,
        <int *>hip._util.types.ListOfInt.fromPyobj(devInfo)._ptr))
    return (_hipsolverZZgesv__retval,)


@cython.embedsignature(True)
def hipsolverSgesvd_bufferSize(object handle, signed char jobu, signed char jobv, int m, int n, object lwork):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        jobu (`~.b`/`~.y`/`~.t`/`~.e`/`~.s`):
            (undocumented)

        jobv (`~.b`/`~.y`/`~.t`/`~.e`/`~.s`):
            (undocumented)

        m (`~.int`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        lwork (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)
    """
    _hipsolverSgesvd_bufferSize__retval = hipsolverStatus_t(chipsolver.hipsolverSgesvd_bufferSize(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,jobu,jobv,m,n,
        <int *>hip._util.types.ListOfInt.fromPyobj(lwork)._ptr))
    return (_hipsolverSgesvd_bufferSize__retval,)


@cython.embedsignature(True)
def hipsolverDgesvd_bufferSize(object handle, signed char jobu, signed char jobv, int m, int n, object lwork):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        jobu (`~.b`/`~.y`/`~.t`/`~.e`/`~.s`):
            (undocumented)

        jobv (`~.b`/`~.y`/`~.t`/`~.e`/`~.s`):
            (undocumented)

        m (`~.int`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        lwork (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)
    """
    _hipsolverDgesvd_bufferSize__retval = hipsolverStatus_t(chipsolver.hipsolverDgesvd_bufferSize(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,jobu,jobv,m,n,
        <int *>hip._util.types.ListOfInt.fromPyobj(lwork)._ptr))
    return (_hipsolverDgesvd_bufferSize__retval,)


@cython.embedsignature(True)
def hipsolverCgesvd_bufferSize(object handle, signed char jobu, signed char jobv, int m, int n, object lwork):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        jobu (`~.b`/`~.y`/`~.t`/`~.e`/`~.s`):
            (undocumented)

        jobv (`~.b`/`~.y`/`~.t`/`~.e`/`~.s`):
            (undocumented)

        m (`~.int`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        lwork (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)
    """
    _hipsolverCgesvd_bufferSize__retval = hipsolverStatus_t(chipsolver.hipsolverCgesvd_bufferSize(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,jobu,jobv,m,n,
        <int *>hip._util.types.ListOfInt.fromPyobj(lwork)._ptr))
    return (_hipsolverCgesvd_bufferSize__retval,)


@cython.embedsignature(True)
def hipsolverZgesvd_bufferSize(object handle, signed char jobu, signed char jobv, int m, int n, object lwork):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        jobu (`~.b`/`~.y`/`~.t`/`~.e`/`~.s`):
            (undocumented)

        jobv (`~.b`/`~.y`/`~.t`/`~.e`/`~.s`):
            (undocumented)

        m (`~.int`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        lwork (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)
    """
    _hipsolverZgesvd_bufferSize__retval = hipsolverStatus_t(chipsolver.hipsolverZgesvd_bufferSize(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,jobu,jobv,m,n,
        <int *>hip._util.types.ListOfInt.fromPyobj(lwork)._ptr))
    return (_hipsolverZgesvd_bufferSize__retval,)


@cython.embedsignature(True)
def hipsolverSgesvd(object handle, signed char jobu, signed char jobv, int m, int n, object A, int lda, object S, object U, int ldu, object V, int ldv, object work, int lwork, object rwork, object devInfo):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        jobu (`~.b`/`~.y`/`~.t`/`~.e`/`~.s`):
            (undocumented)

        jobv (`~.b`/`~.y`/`~.t`/`~.e`/`~.s`):
            (undocumented)

        m (`~.int`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        A (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        S (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        U (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        ldu (`~.int`):
            (undocumented)

        V (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        ldv (`~.int`):
            (undocumented)

        work (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lwork (`~.int`):
            (undocumented)

        rwork (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        devInfo (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)
    """
    _hipsolverSgesvd__retval = hipsolverStatus_t(chipsolver.hipsolverSgesvd(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,jobu,jobv,m,n,
        <float *>hip._util.types.Pointer.fromPyobj(A)._ptr,lda,
        <float *>hip._util.types.Pointer.fromPyobj(S)._ptr,
        <float *>hip._util.types.Pointer.fromPyobj(U)._ptr,ldu,
        <float *>hip._util.types.Pointer.fromPyobj(V)._ptr,ldv,
        <float *>hip._util.types.Pointer.fromPyobj(work)._ptr,lwork,
        <float *>hip._util.types.Pointer.fromPyobj(rwork)._ptr,
        <int *>hip._util.types.ListOfInt.fromPyobj(devInfo)._ptr))
    return (_hipsolverSgesvd__retval,)


@cython.embedsignature(True)
def hipsolverDgesvd(object handle, signed char jobu, signed char jobv, int m, int n, object A, int lda, object S, object U, int ldu, object V, int ldv, object work, int lwork, object rwork, object devInfo):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        jobu (`~.b`/`~.y`/`~.t`/`~.e`/`~.s`):
            (undocumented)

        jobv (`~.b`/`~.y`/`~.t`/`~.e`/`~.s`):
            (undocumented)

        m (`~.int`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        A (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        S (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        U (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        ldu (`~.int`):
            (undocumented)

        V (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        ldv (`~.int`):
            (undocumented)

        work (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lwork (`~.int`):
            (undocumented)

        rwork (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        devInfo (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)
    """
    _hipsolverDgesvd__retval = hipsolverStatus_t(chipsolver.hipsolverDgesvd(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,jobu,jobv,m,n,
        <double *>hip._util.types.Pointer.fromPyobj(A)._ptr,lda,
        <double *>hip._util.types.Pointer.fromPyobj(S)._ptr,
        <double *>hip._util.types.Pointer.fromPyobj(U)._ptr,ldu,
        <double *>hip._util.types.Pointer.fromPyobj(V)._ptr,ldv,
        <double *>hip._util.types.Pointer.fromPyobj(work)._ptr,lwork,
        <double *>hip._util.types.Pointer.fromPyobj(rwork)._ptr,
        <int *>hip._util.types.ListOfInt.fromPyobj(devInfo)._ptr))
    return (_hipsolverDgesvd__retval,)


@cython.embedsignature(True)
def hipsolverCgesvd(object handle, signed char jobu, signed char jobv, int m, int n, object A, int lda, object S, object U, int ldu, object V, int ldv, object work, int lwork, object rwork, object devInfo):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        jobu (`~.b`/`~.y`/`~.t`/`~.e`/`~.s`):
            (undocumented)

        jobv (`~.b`/`~.y`/`~.t`/`~.e`/`~.s`):
            (undocumented)

        m (`~.int`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        A (`~.float2`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        S (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        U (`~.float2`/`~.object`):
            (undocumented)

        ldu (`~.int`):
            (undocumented)

        V (`~.float2`/`~.object`):
            (undocumented)

        ldv (`~.int`):
            (undocumented)

        work (`~.float2`/`~.object`):
            (undocumented)

        lwork (`~.int`):
            (undocumented)

        rwork (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        devInfo (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)
    """
    _hipsolverCgesvd__retval = hipsolverStatus_t(chipsolver.hipsolverCgesvd(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,jobu,jobv,m,n,
        float2.fromPyobj(A).getElementPtr(),lda,
        <float *>hip._util.types.Pointer.fromPyobj(S)._ptr,
        float2.fromPyobj(U).getElementPtr(),ldu,
        float2.fromPyobj(V).getElementPtr(),ldv,
        float2.fromPyobj(work).getElementPtr(),lwork,
        <float *>hip._util.types.Pointer.fromPyobj(rwork)._ptr,
        <int *>hip._util.types.ListOfInt.fromPyobj(devInfo)._ptr))
    return (_hipsolverCgesvd__retval,)


@cython.embedsignature(True)
def hipsolverZgesvd(object handle, signed char jobu, signed char jobv, int m, int n, object A, int lda, object S, object U, int ldu, object V, int ldv, object work, int lwork, object rwork, object devInfo):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        jobu (`~.b`/`~.y`/`~.t`/`~.e`/`~.s`):
            (undocumented)

        jobv (`~.b`/`~.y`/`~.t`/`~.e`/`~.s`):
            (undocumented)

        m (`~.int`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        A (`~.double2`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        S (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        U (`~.double2`/`~.object`):
            (undocumented)

        ldu (`~.int`):
            (undocumented)

        V (`~.double2`/`~.object`):
            (undocumented)

        ldv (`~.int`):
            (undocumented)

        work (`~.double2`/`~.object`):
            (undocumented)

        lwork (`~.int`):
            (undocumented)

        rwork (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        devInfo (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)
    """
    _hipsolverZgesvd__retval = hipsolverStatus_t(chipsolver.hipsolverZgesvd(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,jobu,jobv,m,n,
        double2.fromPyobj(A).getElementPtr(),lda,
        <double *>hip._util.types.Pointer.fromPyobj(S)._ptr,
        double2.fromPyobj(U).getElementPtr(),ldu,
        double2.fromPyobj(V).getElementPtr(),ldv,
        double2.fromPyobj(work).getElementPtr(),lwork,
        <double *>hip._util.types.Pointer.fromPyobj(rwork)._ptr,
        <int *>hip._util.types.ListOfInt.fromPyobj(devInfo)._ptr))
    return (_hipsolverZgesvd__retval,)


@cython.embedsignature(True)
def hipsolverSgesvdj_bufferSize(object handle, object jobz, int econ, int m, int n, object A, int lda, object S, object U, int ldu, object V, int ldv, object lwork, object params):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        jobz (`~.hipsolverEigMode_t`):
            (undocumented)

        econ (`~.int`):
            (undocumented)

        m (`~.int`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        A (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        S (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        U (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        ldu (`~.int`):
            (undocumented)

        V (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        ldv (`~.int`):
            (undocumented)

        lwork (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)

        params (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)
    """
    if not isinstance(jobz,_hipsolverEigMode_t__Base):
        raise TypeError("argument 'jobz' must be of type '_hipsolverEigMode_t__Base'")
    _hipsolverSgesvdj_bufferSize__retval = hipsolverStatus_t(chipsolver.hipsolverSgesvdj_bufferSize(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,jobz.value,econ,m,n,
        <const float *>hip._util.types.Pointer.fromPyobj(A)._ptr,lda,
        <const float *>hip._util.types.Pointer.fromPyobj(S)._ptr,
        <const float *>hip._util.types.Pointer.fromPyobj(U)._ptr,ldu,
        <const float *>hip._util.types.Pointer.fromPyobj(V)._ptr,ldv,
        <int *>hip._util.types.ListOfInt.fromPyobj(lwork)._ptr,
        <void *>hip._util.types.Pointer.fromPyobj(params)._ptr))
    return (_hipsolverSgesvdj_bufferSize__retval,)


@cython.embedsignature(True)
def hipsolverDgesvdj_bufferSize(object handle, object jobz, int econ, int m, int n, object A, int lda, object S, object U, int ldu, object V, int ldv, object lwork, object params):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        jobz (`~.hipsolverEigMode_t`):
            (undocumented)

        econ (`~.int`):
            (undocumented)

        m (`~.int`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        A (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        S (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        U (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        ldu (`~.int`):
            (undocumented)

        V (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        ldv (`~.int`):
            (undocumented)

        lwork (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)

        params (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)
    """
    if not isinstance(jobz,_hipsolverEigMode_t__Base):
        raise TypeError("argument 'jobz' must be of type '_hipsolverEigMode_t__Base'")
    _hipsolverDgesvdj_bufferSize__retval = hipsolverStatus_t(chipsolver.hipsolverDgesvdj_bufferSize(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,jobz.value,econ,m,n,
        <const double *>hip._util.types.Pointer.fromPyobj(A)._ptr,lda,
        <const double *>hip._util.types.Pointer.fromPyobj(S)._ptr,
        <const double *>hip._util.types.Pointer.fromPyobj(U)._ptr,ldu,
        <const double *>hip._util.types.Pointer.fromPyobj(V)._ptr,ldv,
        <int *>hip._util.types.ListOfInt.fromPyobj(lwork)._ptr,
        <void *>hip._util.types.Pointer.fromPyobj(params)._ptr))
    return (_hipsolverDgesvdj_bufferSize__retval,)


@cython.embedsignature(True)
def hipsolverCgesvdj_bufferSize(object handle, object jobz, int econ, int m, int n, object A, int lda, object S, object U, int ldu, object V, int ldv, object lwork, object params):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        jobz (`~.hipsolverEigMode_t`):
            (undocumented)

        econ (`~.int`):
            (undocumented)

        m (`~.int`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        A (`~.float2`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        S (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        U (`~.float2`/`~.object`):
            (undocumented)

        ldu (`~.int`):
            (undocumented)

        V (`~.float2`/`~.object`):
            (undocumented)

        ldv (`~.int`):
            (undocumented)

        lwork (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)

        params (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)
    """
    if not isinstance(jobz,_hipsolverEigMode_t__Base):
        raise TypeError("argument 'jobz' must be of type '_hipsolverEigMode_t__Base'")
    _hipsolverCgesvdj_bufferSize__retval = hipsolverStatus_t(chipsolver.hipsolverCgesvdj_bufferSize(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,jobz.value,econ,m,n,
        float2.fromPyobj(A).getElementPtr(),lda,
        <const float *>hip._util.types.Pointer.fromPyobj(S)._ptr,
        float2.fromPyobj(U).getElementPtr(),ldu,
        float2.fromPyobj(V).getElementPtr(),ldv,
        <int *>hip._util.types.ListOfInt.fromPyobj(lwork)._ptr,
        <void *>hip._util.types.Pointer.fromPyobj(params)._ptr))
    return (_hipsolverCgesvdj_bufferSize__retval,)


@cython.embedsignature(True)
def hipsolverZgesvdj_bufferSize(object handle, object jobz, int econ, int m, int n, object A, int lda, object S, object U, int ldu, object V, int ldv, object lwork, object params):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        jobz (`~.hipsolverEigMode_t`):
            (undocumented)

        econ (`~.int`):
            (undocumented)

        m (`~.int`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        A (`~.double2`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        S (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        U (`~.double2`/`~.object`):
            (undocumented)

        ldu (`~.int`):
            (undocumented)

        V (`~.double2`/`~.object`):
            (undocumented)

        ldv (`~.int`):
            (undocumented)

        lwork (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)

        params (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)
    """
    if not isinstance(jobz,_hipsolverEigMode_t__Base):
        raise TypeError("argument 'jobz' must be of type '_hipsolverEigMode_t__Base'")
    _hipsolverZgesvdj_bufferSize__retval = hipsolverStatus_t(chipsolver.hipsolverZgesvdj_bufferSize(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,jobz.value,econ,m,n,
        double2.fromPyobj(A).getElementPtr(),lda,
        <const double *>hip._util.types.Pointer.fromPyobj(S)._ptr,
        double2.fromPyobj(U).getElementPtr(),ldu,
        double2.fromPyobj(V).getElementPtr(),ldv,
        <int *>hip._util.types.ListOfInt.fromPyobj(lwork)._ptr,
        <void *>hip._util.types.Pointer.fromPyobj(params)._ptr))
    return (_hipsolverZgesvdj_bufferSize__retval,)


@cython.embedsignature(True)
def hipsolverSgesvdj(object handle, object jobz, int econ, int m, int n, object A, int lda, object S, object U, int ldu, object V, int ldv, object work, int lwork, object devInfo, object params):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        jobz (`~.hipsolverEigMode_t`):
            (undocumented)

        econ (`~.int`):
            (undocumented)

        m (`~.int`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        A (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        S (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        U (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        ldu (`~.int`):
            (undocumented)

        V (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        ldv (`~.int`):
            (undocumented)

        work (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lwork (`~.int`):
            (undocumented)

        devInfo (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)

        params (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)
    """
    if not isinstance(jobz,_hipsolverEigMode_t__Base):
        raise TypeError("argument 'jobz' must be of type '_hipsolverEigMode_t__Base'")
    _hipsolverSgesvdj__retval = hipsolverStatus_t(chipsolver.hipsolverSgesvdj(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,jobz.value,econ,m,n,
        <float *>hip._util.types.Pointer.fromPyobj(A)._ptr,lda,
        <float *>hip._util.types.Pointer.fromPyobj(S)._ptr,
        <float *>hip._util.types.Pointer.fromPyobj(U)._ptr,ldu,
        <float *>hip._util.types.Pointer.fromPyobj(V)._ptr,ldv,
        <float *>hip._util.types.Pointer.fromPyobj(work)._ptr,lwork,
        <int *>hip._util.types.ListOfInt.fromPyobj(devInfo)._ptr,
        <void *>hip._util.types.Pointer.fromPyobj(params)._ptr))
    return (_hipsolverSgesvdj__retval,)


@cython.embedsignature(True)
def hipsolverDgesvdj(object handle, object jobz, int econ, int m, int n, object A, int lda, object S, object U, int ldu, object V, int ldv, object work, int lwork, object devInfo, object params):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        jobz (`~.hipsolverEigMode_t`):
            (undocumented)

        econ (`~.int`):
            (undocumented)

        m (`~.int`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        A (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        S (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        U (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        ldu (`~.int`):
            (undocumented)

        V (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        ldv (`~.int`):
            (undocumented)

        work (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lwork (`~.int`):
            (undocumented)

        devInfo (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)

        params (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)
    """
    if not isinstance(jobz,_hipsolverEigMode_t__Base):
        raise TypeError("argument 'jobz' must be of type '_hipsolverEigMode_t__Base'")
    _hipsolverDgesvdj__retval = hipsolverStatus_t(chipsolver.hipsolverDgesvdj(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,jobz.value,econ,m,n,
        <double *>hip._util.types.Pointer.fromPyobj(A)._ptr,lda,
        <double *>hip._util.types.Pointer.fromPyobj(S)._ptr,
        <double *>hip._util.types.Pointer.fromPyobj(U)._ptr,ldu,
        <double *>hip._util.types.Pointer.fromPyobj(V)._ptr,ldv,
        <double *>hip._util.types.Pointer.fromPyobj(work)._ptr,lwork,
        <int *>hip._util.types.ListOfInt.fromPyobj(devInfo)._ptr,
        <void *>hip._util.types.Pointer.fromPyobj(params)._ptr))
    return (_hipsolverDgesvdj__retval,)


@cython.embedsignature(True)
def hipsolverCgesvdj(object handle, object jobz, int econ, int m, int n, object A, int lda, object S, object U, int ldu, object V, int ldv, object work, int lwork, object devInfo, object params):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        jobz (`~.hipsolverEigMode_t`):
            (undocumented)

        econ (`~.int`):
            (undocumented)

        m (`~.int`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        A (`~.float2`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        S (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        U (`~.float2`/`~.object`):
            (undocumented)

        ldu (`~.int`):
            (undocumented)

        V (`~.float2`/`~.object`):
            (undocumented)

        ldv (`~.int`):
            (undocumented)

        work (`~.float2`/`~.object`):
            (undocumented)

        lwork (`~.int`):
            (undocumented)

        devInfo (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)

        params (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)
    """
    if not isinstance(jobz,_hipsolverEigMode_t__Base):
        raise TypeError("argument 'jobz' must be of type '_hipsolverEigMode_t__Base'")
    _hipsolverCgesvdj__retval = hipsolverStatus_t(chipsolver.hipsolverCgesvdj(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,jobz.value,econ,m,n,
        float2.fromPyobj(A).getElementPtr(),lda,
        <float *>hip._util.types.Pointer.fromPyobj(S)._ptr,
        float2.fromPyobj(U).getElementPtr(),ldu,
        float2.fromPyobj(V).getElementPtr(),ldv,
        float2.fromPyobj(work).getElementPtr(),lwork,
        <int *>hip._util.types.ListOfInt.fromPyobj(devInfo)._ptr,
        <void *>hip._util.types.Pointer.fromPyobj(params)._ptr))
    return (_hipsolverCgesvdj__retval,)


@cython.embedsignature(True)
def hipsolverZgesvdj(object handle, object jobz, int econ, int m, int n, object A, int lda, object S, object U, int ldu, object V, int ldv, object work, int lwork, object devInfo, object params):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        jobz (`~.hipsolverEigMode_t`):
            (undocumented)

        econ (`~.int`):
            (undocumented)

        m (`~.int`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        A (`~.double2`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        S (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        U (`~.double2`/`~.object`):
            (undocumented)

        ldu (`~.int`):
            (undocumented)

        V (`~.double2`/`~.object`):
            (undocumented)

        ldv (`~.int`):
            (undocumented)

        work (`~.double2`/`~.object`):
            (undocumented)

        lwork (`~.int`):
            (undocumented)

        devInfo (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)

        params (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)
    """
    if not isinstance(jobz,_hipsolverEigMode_t__Base):
        raise TypeError("argument 'jobz' must be of type '_hipsolverEigMode_t__Base'")
    _hipsolverZgesvdj__retval = hipsolverStatus_t(chipsolver.hipsolverZgesvdj(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,jobz.value,econ,m,n,
        double2.fromPyobj(A).getElementPtr(),lda,
        <double *>hip._util.types.Pointer.fromPyobj(S)._ptr,
        double2.fromPyobj(U).getElementPtr(),ldu,
        double2.fromPyobj(V).getElementPtr(),ldv,
        double2.fromPyobj(work).getElementPtr(),lwork,
        <int *>hip._util.types.ListOfInt.fromPyobj(devInfo)._ptr,
        <void *>hip._util.types.Pointer.fromPyobj(params)._ptr))
    return (_hipsolverZgesvdj__retval,)


@cython.embedsignature(True)
def hipsolverSgesvdjBatched_bufferSize(object handle, object jobz, int m, int n, object A, int lda, object S, object U, int ldu, object V, int ldv, object lwork, object params, int batch_count):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        jobz (`~.hipsolverEigMode_t`):
            (undocumented)

        m (`~.int`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        A (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        S (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        U (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        ldu (`~.int`):
            (undocumented)

        V (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        ldv (`~.int`):
            (undocumented)

        lwork (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)

        params (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        batch_count (`~.int`):
            (undocumented)
    """
    if not isinstance(jobz,_hipsolverEigMode_t__Base):
        raise TypeError("argument 'jobz' must be of type '_hipsolverEigMode_t__Base'")
    _hipsolverSgesvdjBatched_bufferSize__retval = hipsolverStatus_t(chipsolver.hipsolverSgesvdjBatched_bufferSize(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,jobz.value,m,n,
        <const float *>hip._util.types.Pointer.fromPyobj(A)._ptr,lda,
        <const float *>hip._util.types.Pointer.fromPyobj(S)._ptr,
        <const float *>hip._util.types.Pointer.fromPyobj(U)._ptr,ldu,
        <const float *>hip._util.types.Pointer.fromPyobj(V)._ptr,ldv,
        <int *>hip._util.types.ListOfInt.fromPyobj(lwork)._ptr,
        <void *>hip._util.types.Pointer.fromPyobj(params)._ptr,batch_count))
    return (_hipsolverSgesvdjBatched_bufferSize__retval,)


@cython.embedsignature(True)
def hipsolverDgesvdjBatched_bufferSize(object handle, object jobz, int m, int n, object A, int lda, object S, object U, int ldu, object V, int ldv, object lwork, object params, int batch_count):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        jobz (`~.hipsolverEigMode_t`):
            (undocumented)

        m (`~.int`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        A (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        S (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        U (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        ldu (`~.int`):
            (undocumented)

        V (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        ldv (`~.int`):
            (undocumented)

        lwork (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)

        params (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        batch_count (`~.int`):
            (undocumented)
    """
    if not isinstance(jobz,_hipsolverEigMode_t__Base):
        raise TypeError("argument 'jobz' must be of type '_hipsolverEigMode_t__Base'")
    _hipsolverDgesvdjBatched_bufferSize__retval = hipsolverStatus_t(chipsolver.hipsolverDgesvdjBatched_bufferSize(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,jobz.value,m,n,
        <const double *>hip._util.types.Pointer.fromPyobj(A)._ptr,lda,
        <const double *>hip._util.types.Pointer.fromPyobj(S)._ptr,
        <const double *>hip._util.types.Pointer.fromPyobj(U)._ptr,ldu,
        <const double *>hip._util.types.Pointer.fromPyobj(V)._ptr,ldv,
        <int *>hip._util.types.ListOfInt.fromPyobj(lwork)._ptr,
        <void *>hip._util.types.Pointer.fromPyobj(params)._ptr,batch_count))
    return (_hipsolverDgesvdjBatched_bufferSize__retval,)


@cython.embedsignature(True)
def hipsolverCgesvdjBatched_bufferSize(object handle, object jobz, int m, int n, object A, int lda, object S, object U, int ldu, object V, int ldv, object lwork, object params, int batch_count):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        jobz (`~.hipsolverEigMode_t`):
            (undocumented)

        m (`~.int`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        A (`~.float2`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        S (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        U (`~.float2`/`~.object`):
            (undocumented)

        ldu (`~.int`):
            (undocumented)

        V (`~.float2`/`~.object`):
            (undocumented)

        ldv (`~.int`):
            (undocumented)

        lwork (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)

        params (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        batch_count (`~.int`):
            (undocumented)
    """
    if not isinstance(jobz,_hipsolverEigMode_t__Base):
        raise TypeError("argument 'jobz' must be of type '_hipsolverEigMode_t__Base'")
    _hipsolverCgesvdjBatched_bufferSize__retval = hipsolverStatus_t(chipsolver.hipsolverCgesvdjBatched_bufferSize(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,jobz.value,m,n,
        float2.fromPyobj(A).getElementPtr(),lda,
        <const float *>hip._util.types.Pointer.fromPyobj(S)._ptr,
        float2.fromPyobj(U).getElementPtr(),ldu,
        float2.fromPyobj(V).getElementPtr(),ldv,
        <int *>hip._util.types.ListOfInt.fromPyobj(lwork)._ptr,
        <void *>hip._util.types.Pointer.fromPyobj(params)._ptr,batch_count))
    return (_hipsolverCgesvdjBatched_bufferSize__retval,)


@cython.embedsignature(True)
def hipsolverZgesvdjBatched_bufferSize(object handle, object jobz, int m, int n, object A, int lda, object S, object U, int ldu, object V, int ldv, object lwork, object params, int batch_count):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        jobz (`~.hipsolverEigMode_t`):
            (undocumented)

        m (`~.int`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        A (`~.double2`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        S (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        U (`~.double2`/`~.object`):
            (undocumented)

        ldu (`~.int`):
            (undocumented)

        V (`~.double2`/`~.object`):
            (undocumented)

        ldv (`~.int`):
            (undocumented)

        lwork (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)

        params (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        batch_count (`~.int`):
            (undocumented)
    """
    if not isinstance(jobz,_hipsolverEigMode_t__Base):
        raise TypeError("argument 'jobz' must be of type '_hipsolverEigMode_t__Base'")
    _hipsolverZgesvdjBatched_bufferSize__retval = hipsolverStatus_t(chipsolver.hipsolverZgesvdjBatched_bufferSize(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,jobz.value,m,n,
        double2.fromPyobj(A).getElementPtr(),lda,
        <const double *>hip._util.types.Pointer.fromPyobj(S)._ptr,
        double2.fromPyobj(U).getElementPtr(),ldu,
        double2.fromPyobj(V).getElementPtr(),ldv,
        <int *>hip._util.types.ListOfInt.fromPyobj(lwork)._ptr,
        <void *>hip._util.types.Pointer.fromPyobj(params)._ptr,batch_count))
    return (_hipsolverZgesvdjBatched_bufferSize__retval,)


@cython.embedsignature(True)
def hipsolverSgesvdjBatched(object handle, object jobz, int m, int n, object A, int lda, object S, object U, int ldu, object V, int ldv, object work, int lwork, object devInfo, object params, int batch_count):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        jobz (`~.hipsolverEigMode_t`):
            (undocumented)

        m (`~.int`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        A (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        S (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        U (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        ldu (`~.int`):
            (undocumented)

        V (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        ldv (`~.int`):
            (undocumented)

        work (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lwork (`~.int`):
            (undocumented)

        devInfo (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)

        params (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        batch_count (`~.int`):
            (undocumented)
    """
    if not isinstance(jobz,_hipsolverEigMode_t__Base):
        raise TypeError("argument 'jobz' must be of type '_hipsolverEigMode_t__Base'")
    _hipsolverSgesvdjBatched__retval = hipsolverStatus_t(chipsolver.hipsolverSgesvdjBatched(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,jobz.value,m,n,
        <float *>hip._util.types.Pointer.fromPyobj(A)._ptr,lda,
        <float *>hip._util.types.Pointer.fromPyobj(S)._ptr,
        <float *>hip._util.types.Pointer.fromPyobj(U)._ptr,ldu,
        <float *>hip._util.types.Pointer.fromPyobj(V)._ptr,ldv,
        <float *>hip._util.types.Pointer.fromPyobj(work)._ptr,lwork,
        <int *>hip._util.types.ListOfInt.fromPyobj(devInfo)._ptr,
        <void *>hip._util.types.Pointer.fromPyobj(params)._ptr,batch_count))
    return (_hipsolverSgesvdjBatched__retval,)


@cython.embedsignature(True)
def hipsolverDgesvdjBatched(object handle, object jobz, int m, int n, object A, int lda, object S, object U, int ldu, object V, int ldv, object work, int lwork, object devInfo, object params, int batch_count):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        jobz (`~.hipsolverEigMode_t`):
            (undocumented)

        m (`~.int`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        A (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        S (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        U (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        ldu (`~.int`):
            (undocumented)

        V (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        ldv (`~.int`):
            (undocumented)

        work (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lwork (`~.int`):
            (undocumented)

        devInfo (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)

        params (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        batch_count (`~.int`):
            (undocumented)
    """
    if not isinstance(jobz,_hipsolverEigMode_t__Base):
        raise TypeError("argument 'jobz' must be of type '_hipsolverEigMode_t__Base'")
    _hipsolverDgesvdjBatched__retval = hipsolverStatus_t(chipsolver.hipsolverDgesvdjBatched(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,jobz.value,m,n,
        <double *>hip._util.types.Pointer.fromPyobj(A)._ptr,lda,
        <double *>hip._util.types.Pointer.fromPyobj(S)._ptr,
        <double *>hip._util.types.Pointer.fromPyobj(U)._ptr,ldu,
        <double *>hip._util.types.Pointer.fromPyobj(V)._ptr,ldv,
        <double *>hip._util.types.Pointer.fromPyobj(work)._ptr,lwork,
        <int *>hip._util.types.ListOfInt.fromPyobj(devInfo)._ptr,
        <void *>hip._util.types.Pointer.fromPyobj(params)._ptr,batch_count))
    return (_hipsolverDgesvdjBatched__retval,)


@cython.embedsignature(True)
def hipsolverCgesvdjBatched(object handle, object jobz, int m, int n, object A, int lda, object S, object U, int ldu, object V, int ldv, object work, int lwork, object devInfo, object params, int batch_count):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        jobz (`~.hipsolverEigMode_t`):
            (undocumented)

        m (`~.int`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        A (`~.float2`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        S (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        U (`~.float2`/`~.object`):
            (undocumented)

        ldu (`~.int`):
            (undocumented)

        V (`~.float2`/`~.object`):
            (undocumented)

        ldv (`~.int`):
            (undocumented)

        work (`~.float2`/`~.object`):
            (undocumented)

        lwork (`~.int`):
            (undocumented)

        devInfo (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)

        params (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        batch_count (`~.int`):
            (undocumented)
    """
    if not isinstance(jobz,_hipsolverEigMode_t__Base):
        raise TypeError("argument 'jobz' must be of type '_hipsolverEigMode_t__Base'")
    _hipsolverCgesvdjBatched__retval = hipsolverStatus_t(chipsolver.hipsolverCgesvdjBatched(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,jobz.value,m,n,
        float2.fromPyobj(A).getElementPtr(),lda,
        <float *>hip._util.types.Pointer.fromPyobj(S)._ptr,
        float2.fromPyobj(U).getElementPtr(),ldu,
        float2.fromPyobj(V).getElementPtr(),ldv,
        float2.fromPyobj(work).getElementPtr(),lwork,
        <int *>hip._util.types.ListOfInt.fromPyobj(devInfo)._ptr,
        <void *>hip._util.types.Pointer.fromPyobj(params)._ptr,batch_count))
    return (_hipsolverCgesvdjBatched__retval,)


@cython.embedsignature(True)
def hipsolverZgesvdjBatched(object handle, object jobz, int m, int n, object A, int lda, object S, object U, int ldu, object V, int ldv, object work, int lwork, object devInfo, object params, int batch_count):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        jobz (`~.hipsolverEigMode_t`):
            (undocumented)

        m (`~.int`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        A (`~.double2`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        S (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        U (`~.double2`/`~.object`):
            (undocumented)

        ldu (`~.int`):
            (undocumented)

        V (`~.double2`/`~.object`):
            (undocumented)

        ldv (`~.int`):
            (undocumented)

        work (`~.double2`/`~.object`):
            (undocumented)

        lwork (`~.int`):
            (undocumented)

        devInfo (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)

        params (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        batch_count (`~.int`):
            (undocumented)
    """
    if not isinstance(jobz,_hipsolverEigMode_t__Base):
        raise TypeError("argument 'jobz' must be of type '_hipsolverEigMode_t__Base'")
    _hipsolverZgesvdjBatched__retval = hipsolverStatus_t(chipsolver.hipsolverZgesvdjBatched(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,jobz.value,m,n,
        double2.fromPyobj(A).getElementPtr(),lda,
        <double *>hip._util.types.Pointer.fromPyobj(S)._ptr,
        double2.fromPyobj(U).getElementPtr(),ldu,
        double2.fromPyobj(V).getElementPtr(),ldv,
        double2.fromPyobj(work).getElementPtr(),lwork,
        <int *>hip._util.types.ListOfInt.fromPyobj(devInfo)._ptr,
        <void *>hip._util.types.Pointer.fromPyobj(params)._ptr,batch_count))
    return (_hipsolverZgesvdjBatched__retval,)


@cython.embedsignature(True)
def hipsolverSgetrf_bufferSize(object handle, int m, int n, object A, int lda, object lwork):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        m (`~.int`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        A (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        lwork (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)
    """
    _hipsolverSgetrf_bufferSize__retval = hipsolverStatus_t(chipsolver.hipsolverSgetrf_bufferSize(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,m,n,
        <float *>hip._util.types.Pointer.fromPyobj(A)._ptr,lda,
        <int *>hip._util.types.ListOfInt.fromPyobj(lwork)._ptr))
    return (_hipsolverSgetrf_bufferSize__retval,)


@cython.embedsignature(True)
def hipsolverDgetrf_bufferSize(object handle, int m, int n, object A, int lda, object lwork):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        m (`~.int`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        A (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        lwork (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)
    """
    _hipsolverDgetrf_bufferSize__retval = hipsolverStatus_t(chipsolver.hipsolverDgetrf_bufferSize(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,m,n,
        <double *>hip._util.types.Pointer.fromPyobj(A)._ptr,lda,
        <int *>hip._util.types.ListOfInt.fromPyobj(lwork)._ptr))
    return (_hipsolverDgetrf_bufferSize__retval,)


@cython.embedsignature(True)
def hipsolverCgetrf_bufferSize(object handle, int m, int n, object A, int lda, object lwork):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        m (`~.int`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        A (`~.float2`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        lwork (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)
    """
    _hipsolverCgetrf_bufferSize__retval = hipsolverStatus_t(chipsolver.hipsolverCgetrf_bufferSize(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,m,n,
        float2.fromPyobj(A).getElementPtr(),lda,
        <int *>hip._util.types.ListOfInt.fromPyobj(lwork)._ptr))
    return (_hipsolverCgetrf_bufferSize__retval,)


@cython.embedsignature(True)
def hipsolverZgetrf_bufferSize(object handle, int m, int n, object A, int lda, object lwork):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        m (`~.int`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        A (`~.double2`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        lwork (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)
    """
    _hipsolverZgetrf_bufferSize__retval = hipsolverStatus_t(chipsolver.hipsolverZgetrf_bufferSize(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,m,n,
        double2.fromPyobj(A).getElementPtr(),lda,
        <int *>hip._util.types.ListOfInt.fromPyobj(lwork)._ptr))
    return (_hipsolverZgetrf_bufferSize__retval,)


@cython.embedsignature(True)
def hipsolverSgetrf(object handle, int m, int n, object A, int lda, object work, int lwork, object devIpiv, object devInfo):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        m (`~.int`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        A (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        work (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lwork (`~.int`):
            (undocumented)

        devIpiv (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)

        devInfo (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)
    """
    _hipsolverSgetrf__retval = hipsolverStatus_t(chipsolver.hipsolverSgetrf(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,m,n,
        <float *>hip._util.types.Pointer.fromPyobj(A)._ptr,lda,
        <float *>hip._util.types.Pointer.fromPyobj(work)._ptr,lwork,
        <int *>hip._util.types.ListOfInt.fromPyobj(devIpiv)._ptr,
        <int *>hip._util.types.ListOfInt.fromPyobj(devInfo)._ptr))
    return (_hipsolverSgetrf__retval,)


@cython.embedsignature(True)
def hipsolverDgetrf(object handle, int m, int n, object A, int lda, object work, int lwork, object devIpiv, object devInfo):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        m (`~.int`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        A (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        work (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lwork (`~.int`):
            (undocumented)

        devIpiv (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)

        devInfo (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)
    """
    _hipsolverDgetrf__retval = hipsolverStatus_t(chipsolver.hipsolverDgetrf(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,m,n,
        <double *>hip._util.types.Pointer.fromPyobj(A)._ptr,lda,
        <double *>hip._util.types.Pointer.fromPyobj(work)._ptr,lwork,
        <int *>hip._util.types.ListOfInt.fromPyobj(devIpiv)._ptr,
        <int *>hip._util.types.ListOfInt.fromPyobj(devInfo)._ptr))
    return (_hipsolverDgetrf__retval,)


@cython.embedsignature(True)
def hipsolverCgetrf(object handle, int m, int n, object A, int lda, object work, int lwork, object devIpiv, object devInfo):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        m (`~.int`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        A (`~.float2`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        work (`~.float2`/`~.object`):
            (undocumented)

        lwork (`~.int`):
            (undocumented)

        devIpiv (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)

        devInfo (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)
    """
    _hipsolverCgetrf__retval = hipsolverStatus_t(chipsolver.hipsolverCgetrf(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,m,n,
        float2.fromPyobj(A).getElementPtr(),lda,
        float2.fromPyobj(work).getElementPtr(),lwork,
        <int *>hip._util.types.ListOfInt.fromPyobj(devIpiv)._ptr,
        <int *>hip._util.types.ListOfInt.fromPyobj(devInfo)._ptr))
    return (_hipsolverCgetrf__retval,)


@cython.embedsignature(True)
def hipsolverZgetrf(object handle, int m, int n, object A, int lda, object work, int lwork, object devIpiv, object devInfo):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        m (`~.int`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        A (`~.double2`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        work (`~.double2`/`~.object`):
            (undocumented)

        lwork (`~.int`):
            (undocumented)

        devIpiv (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)

        devInfo (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)
    """
    _hipsolverZgetrf__retval = hipsolverStatus_t(chipsolver.hipsolverZgetrf(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,m,n,
        double2.fromPyobj(A).getElementPtr(),lda,
        double2.fromPyobj(work).getElementPtr(),lwork,
        <int *>hip._util.types.ListOfInt.fromPyobj(devIpiv)._ptr,
        <int *>hip._util.types.ListOfInt.fromPyobj(devInfo)._ptr))
    return (_hipsolverZgetrf__retval,)


@cython.embedsignature(True)
def hipsolverSgetrs_bufferSize(object handle, object trans, int n, int nrhs, object A, int lda, object devIpiv, object B, int ldb, object lwork):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        trans (`~.hipblasOperation_t`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        nrhs (`~.int`):
            (undocumented)

        A (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        devIpiv (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)

        B (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        ldb (`~.int`):
            (undocumented)

        lwork (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)
    """
    if not isinstance(trans,_hipblasOperation_t__Base):
        raise TypeError("argument 'trans' must be of type '_hipblasOperation_t__Base'")
    _hipsolverSgetrs_bufferSize__retval = hipsolverStatus_t(chipsolver.hipsolverSgetrs_bufferSize(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,trans.value,n,nrhs,
        <float *>hip._util.types.Pointer.fromPyobj(A)._ptr,lda,
        <int *>hip._util.types.ListOfInt.fromPyobj(devIpiv)._ptr,
        <float *>hip._util.types.Pointer.fromPyobj(B)._ptr,ldb,
        <int *>hip._util.types.ListOfInt.fromPyobj(lwork)._ptr))
    return (_hipsolverSgetrs_bufferSize__retval,)


@cython.embedsignature(True)
def hipsolverDgetrs_bufferSize(object handle, object trans, int n, int nrhs, object A, int lda, object devIpiv, object B, int ldb, object lwork):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        trans (`~.hipblasOperation_t`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        nrhs (`~.int`):
            (undocumented)

        A (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        devIpiv (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)

        B (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        ldb (`~.int`):
            (undocumented)

        lwork (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)
    """
    if not isinstance(trans,_hipblasOperation_t__Base):
        raise TypeError("argument 'trans' must be of type '_hipblasOperation_t__Base'")
    _hipsolverDgetrs_bufferSize__retval = hipsolverStatus_t(chipsolver.hipsolverDgetrs_bufferSize(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,trans.value,n,nrhs,
        <double *>hip._util.types.Pointer.fromPyobj(A)._ptr,lda,
        <int *>hip._util.types.ListOfInt.fromPyobj(devIpiv)._ptr,
        <double *>hip._util.types.Pointer.fromPyobj(B)._ptr,ldb,
        <int *>hip._util.types.ListOfInt.fromPyobj(lwork)._ptr))
    return (_hipsolverDgetrs_bufferSize__retval,)


@cython.embedsignature(True)
def hipsolverCgetrs_bufferSize(object handle, object trans, int n, int nrhs, object A, int lda, object devIpiv, object B, int ldb, object lwork):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        trans (`~.hipblasOperation_t`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        nrhs (`~.int`):
            (undocumented)

        A (`~.float2`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        devIpiv (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)

        B (`~.float2`/`~.object`):
            (undocumented)

        ldb (`~.int`):
            (undocumented)

        lwork (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)
    """
    if not isinstance(trans,_hipblasOperation_t__Base):
        raise TypeError("argument 'trans' must be of type '_hipblasOperation_t__Base'")
    _hipsolverCgetrs_bufferSize__retval = hipsolverStatus_t(chipsolver.hipsolverCgetrs_bufferSize(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,trans.value,n,nrhs,
        float2.fromPyobj(A).getElementPtr(),lda,
        <int *>hip._util.types.ListOfInt.fromPyobj(devIpiv)._ptr,
        float2.fromPyobj(B).getElementPtr(),ldb,
        <int *>hip._util.types.ListOfInt.fromPyobj(lwork)._ptr))
    return (_hipsolverCgetrs_bufferSize__retval,)


@cython.embedsignature(True)
def hipsolverZgetrs_bufferSize(object handle, object trans, int n, int nrhs, object A, int lda, object devIpiv, object B, int ldb, object lwork):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        trans (`~.hipblasOperation_t`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        nrhs (`~.int`):
            (undocumented)

        A (`~.double2`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        devIpiv (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)

        B (`~.double2`/`~.object`):
            (undocumented)

        ldb (`~.int`):
            (undocumented)

        lwork (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)
    """
    if not isinstance(trans,_hipblasOperation_t__Base):
        raise TypeError("argument 'trans' must be of type '_hipblasOperation_t__Base'")
    _hipsolverZgetrs_bufferSize__retval = hipsolverStatus_t(chipsolver.hipsolverZgetrs_bufferSize(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,trans.value,n,nrhs,
        double2.fromPyobj(A).getElementPtr(),lda,
        <int *>hip._util.types.ListOfInt.fromPyobj(devIpiv)._ptr,
        double2.fromPyobj(B).getElementPtr(),ldb,
        <int *>hip._util.types.ListOfInt.fromPyobj(lwork)._ptr))
    return (_hipsolverZgetrs_bufferSize__retval,)


@cython.embedsignature(True)
def hipsolverSgetrs(object handle, object trans, int n, int nrhs, object A, int lda, object devIpiv, object B, int ldb, object work, int lwork, object devInfo):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        trans (`~.hipblasOperation_t`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        nrhs (`~.int`):
            (undocumented)

        A (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        devIpiv (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)

        B (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        ldb (`~.int`):
            (undocumented)

        work (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lwork (`~.int`):
            (undocumented)

        devInfo (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)
    """
    if not isinstance(trans,_hipblasOperation_t__Base):
        raise TypeError("argument 'trans' must be of type '_hipblasOperation_t__Base'")
    _hipsolverSgetrs__retval = hipsolverStatus_t(chipsolver.hipsolverSgetrs(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,trans.value,n,nrhs,
        <float *>hip._util.types.Pointer.fromPyobj(A)._ptr,lda,
        <int *>hip._util.types.ListOfInt.fromPyobj(devIpiv)._ptr,
        <float *>hip._util.types.Pointer.fromPyobj(B)._ptr,ldb,
        <float *>hip._util.types.Pointer.fromPyobj(work)._ptr,lwork,
        <int *>hip._util.types.ListOfInt.fromPyobj(devInfo)._ptr))
    return (_hipsolverSgetrs__retval,)


@cython.embedsignature(True)
def hipsolverDgetrs(object handle, object trans, int n, int nrhs, object A, int lda, object devIpiv, object B, int ldb, object work, int lwork, object devInfo):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        trans (`~.hipblasOperation_t`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        nrhs (`~.int`):
            (undocumented)

        A (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        devIpiv (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)

        B (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        ldb (`~.int`):
            (undocumented)

        work (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lwork (`~.int`):
            (undocumented)

        devInfo (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)
    """
    if not isinstance(trans,_hipblasOperation_t__Base):
        raise TypeError("argument 'trans' must be of type '_hipblasOperation_t__Base'")
    _hipsolverDgetrs__retval = hipsolverStatus_t(chipsolver.hipsolverDgetrs(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,trans.value,n,nrhs,
        <double *>hip._util.types.Pointer.fromPyobj(A)._ptr,lda,
        <int *>hip._util.types.ListOfInt.fromPyobj(devIpiv)._ptr,
        <double *>hip._util.types.Pointer.fromPyobj(B)._ptr,ldb,
        <double *>hip._util.types.Pointer.fromPyobj(work)._ptr,lwork,
        <int *>hip._util.types.ListOfInt.fromPyobj(devInfo)._ptr))
    return (_hipsolverDgetrs__retval,)


@cython.embedsignature(True)
def hipsolverCgetrs(object handle, object trans, int n, int nrhs, object A, int lda, object devIpiv, object B, int ldb, object work, int lwork, object devInfo):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        trans (`~.hipblasOperation_t`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        nrhs (`~.int`):
            (undocumented)

        A (`~.float2`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        devIpiv (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)

        B (`~.float2`/`~.object`):
            (undocumented)

        ldb (`~.int`):
            (undocumented)

        work (`~.float2`/`~.object`):
            (undocumented)

        lwork (`~.int`):
            (undocumented)

        devInfo (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)
    """
    if not isinstance(trans,_hipblasOperation_t__Base):
        raise TypeError("argument 'trans' must be of type '_hipblasOperation_t__Base'")
    _hipsolverCgetrs__retval = hipsolverStatus_t(chipsolver.hipsolverCgetrs(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,trans.value,n,nrhs,
        float2.fromPyobj(A).getElementPtr(),lda,
        <int *>hip._util.types.ListOfInt.fromPyobj(devIpiv)._ptr,
        float2.fromPyobj(B).getElementPtr(),ldb,
        float2.fromPyobj(work).getElementPtr(),lwork,
        <int *>hip._util.types.ListOfInt.fromPyobj(devInfo)._ptr))
    return (_hipsolverCgetrs__retval,)


@cython.embedsignature(True)
def hipsolverZgetrs(object handle, object trans, int n, int nrhs, object A, int lda, object devIpiv, object B, int ldb, object work, int lwork, object devInfo):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        trans (`~.hipblasOperation_t`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        nrhs (`~.int`):
            (undocumented)

        A (`~.double2`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        devIpiv (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)

        B (`~.double2`/`~.object`):
            (undocumented)

        ldb (`~.int`):
            (undocumented)

        work (`~.double2`/`~.object`):
            (undocumented)

        lwork (`~.int`):
            (undocumented)

        devInfo (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)
    """
    if not isinstance(trans,_hipblasOperation_t__Base):
        raise TypeError("argument 'trans' must be of type '_hipblasOperation_t__Base'")
    _hipsolverZgetrs__retval = hipsolverStatus_t(chipsolver.hipsolverZgetrs(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,trans.value,n,nrhs,
        double2.fromPyobj(A).getElementPtr(),lda,
        <int *>hip._util.types.ListOfInt.fromPyobj(devIpiv)._ptr,
        double2.fromPyobj(B).getElementPtr(),ldb,
        double2.fromPyobj(work).getElementPtr(),lwork,
        <int *>hip._util.types.ListOfInt.fromPyobj(devInfo)._ptr))
    return (_hipsolverZgetrs__retval,)


@cython.embedsignature(True)
def hipsolverSpotrf_bufferSize(object handle, object uplo, int n, object A, int lda, object lwork):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        uplo (`~.hipblasFillMode_t`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        A (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        lwork (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)
    """
    if not isinstance(uplo,_hipblasFillMode_t__Base):
        raise TypeError("argument 'uplo' must be of type '_hipblasFillMode_t__Base'")
    _hipsolverSpotrf_bufferSize__retval = hipsolverStatus_t(chipsolver.hipsolverSpotrf_bufferSize(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,uplo.value,n,
        <float *>hip._util.types.Pointer.fromPyobj(A)._ptr,lda,
        <int *>hip._util.types.ListOfInt.fromPyobj(lwork)._ptr))
    return (_hipsolverSpotrf_bufferSize__retval,)


@cython.embedsignature(True)
def hipsolverDpotrf_bufferSize(object handle, object uplo, int n, object A, int lda, object lwork):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        uplo (`~.hipblasFillMode_t`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        A (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        lwork (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)
    """
    if not isinstance(uplo,_hipblasFillMode_t__Base):
        raise TypeError("argument 'uplo' must be of type '_hipblasFillMode_t__Base'")
    _hipsolverDpotrf_bufferSize__retval = hipsolverStatus_t(chipsolver.hipsolverDpotrf_bufferSize(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,uplo.value,n,
        <double *>hip._util.types.Pointer.fromPyobj(A)._ptr,lda,
        <int *>hip._util.types.ListOfInt.fromPyobj(lwork)._ptr))
    return (_hipsolverDpotrf_bufferSize__retval,)


@cython.embedsignature(True)
def hipsolverCpotrf_bufferSize(object handle, object uplo, int n, object A, int lda, object lwork):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        uplo (`~.hipblasFillMode_t`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        A (`~.float2`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        lwork (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)
    """
    if not isinstance(uplo,_hipblasFillMode_t__Base):
        raise TypeError("argument 'uplo' must be of type '_hipblasFillMode_t__Base'")
    _hipsolverCpotrf_bufferSize__retval = hipsolverStatus_t(chipsolver.hipsolverCpotrf_bufferSize(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,uplo.value,n,
        float2.fromPyobj(A).getElementPtr(),lda,
        <int *>hip._util.types.ListOfInt.fromPyobj(lwork)._ptr))
    return (_hipsolverCpotrf_bufferSize__retval,)


@cython.embedsignature(True)
def hipsolverZpotrf_bufferSize(object handle, object uplo, int n, object A, int lda, object lwork):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        uplo (`~.hipblasFillMode_t`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        A (`~.double2`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        lwork (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)
    """
    if not isinstance(uplo,_hipblasFillMode_t__Base):
        raise TypeError("argument 'uplo' must be of type '_hipblasFillMode_t__Base'")
    _hipsolverZpotrf_bufferSize__retval = hipsolverStatus_t(chipsolver.hipsolverZpotrf_bufferSize(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,uplo.value,n,
        double2.fromPyobj(A).getElementPtr(),lda,
        <int *>hip._util.types.ListOfInt.fromPyobj(lwork)._ptr))
    return (_hipsolverZpotrf_bufferSize__retval,)


@cython.embedsignature(True)
def hipsolverSpotrf(object handle, object uplo, int n, object A, int lda, object work, int lwork, object devInfo):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        uplo (`~.hipblasFillMode_t`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        A (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        work (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lwork (`~.int`):
            (undocumented)

        devInfo (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)
    """
    if not isinstance(uplo,_hipblasFillMode_t__Base):
        raise TypeError("argument 'uplo' must be of type '_hipblasFillMode_t__Base'")
    _hipsolverSpotrf__retval = hipsolverStatus_t(chipsolver.hipsolverSpotrf(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,uplo.value,n,
        <float *>hip._util.types.Pointer.fromPyobj(A)._ptr,lda,
        <float *>hip._util.types.Pointer.fromPyobj(work)._ptr,lwork,
        <int *>hip._util.types.ListOfInt.fromPyobj(devInfo)._ptr))
    return (_hipsolverSpotrf__retval,)


@cython.embedsignature(True)
def hipsolverDpotrf(object handle, object uplo, int n, object A, int lda, object work, int lwork, object devInfo):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        uplo (`~.hipblasFillMode_t`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        A (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        work (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lwork (`~.int`):
            (undocumented)

        devInfo (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)
    """
    if not isinstance(uplo,_hipblasFillMode_t__Base):
        raise TypeError("argument 'uplo' must be of type '_hipblasFillMode_t__Base'")
    _hipsolverDpotrf__retval = hipsolverStatus_t(chipsolver.hipsolverDpotrf(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,uplo.value,n,
        <double *>hip._util.types.Pointer.fromPyobj(A)._ptr,lda,
        <double *>hip._util.types.Pointer.fromPyobj(work)._ptr,lwork,
        <int *>hip._util.types.ListOfInt.fromPyobj(devInfo)._ptr))
    return (_hipsolverDpotrf__retval,)


@cython.embedsignature(True)
def hipsolverCpotrf(object handle, object uplo, int n, object A, int lda, object work, int lwork, object devInfo):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        uplo (`~.hipblasFillMode_t`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        A (`~.float2`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        work (`~.float2`/`~.object`):
            (undocumented)

        lwork (`~.int`):
            (undocumented)

        devInfo (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)
    """
    if not isinstance(uplo,_hipblasFillMode_t__Base):
        raise TypeError("argument 'uplo' must be of type '_hipblasFillMode_t__Base'")
    _hipsolverCpotrf__retval = hipsolverStatus_t(chipsolver.hipsolverCpotrf(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,uplo.value,n,
        float2.fromPyobj(A).getElementPtr(),lda,
        float2.fromPyobj(work).getElementPtr(),lwork,
        <int *>hip._util.types.ListOfInt.fromPyobj(devInfo)._ptr))
    return (_hipsolverCpotrf__retval,)


@cython.embedsignature(True)
def hipsolverZpotrf(object handle, object uplo, int n, object A, int lda, object work, int lwork, object devInfo):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        uplo (`~.hipblasFillMode_t`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        A (`~.double2`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        work (`~.double2`/`~.object`):
            (undocumented)

        lwork (`~.int`):
            (undocumented)

        devInfo (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)
    """
    if not isinstance(uplo,_hipblasFillMode_t__Base):
        raise TypeError("argument 'uplo' must be of type '_hipblasFillMode_t__Base'")
    _hipsolverZpotrf__retval = hipsolverStatus_t(chipsolver.hipsolverZpotrf(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,uplo.value,n,
        double2.fromPyobj(A).getElementPtr(),lda,
        double2.fromPyobj(work).getElementPtr(),lwork,
        <int *>hip._util.types.ListOfInt.fromPyobj(devInfo)._ptr))
    return (_hipsolverZpotrf__retval,)


@cython.embedsignature(True)
def hipsolverSpotrfBatched_bufferSize(object handle, object uplo, int n, object A, int lda, object lwork, int batch_count):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        uplo (`~.hipblasFillMode_t`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        A (`~.hip._util.types.ListOfPointer`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        lwork (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)

        batch_count (`~.int`):
            (undocumented)
    """
    if not isinstance(uplo,_hipblasFillMode_t__Base):
        raise TypeError("argument 'uplo' must be of type '_hipblasFillMode_t__Base'")
    _hipsolverSpotrfBatched_bufferSize__retval = hipsolverStatus_t(chipsolver.hipsolverSpotrfBatched_bufferSize(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,uplo.value,n,
        <float **>hip._util.types.ListOfPointer.fromPyobj(A)._ptr,lda,
        <int *>hip._util.types.ListOfInt.fromPyobj(lwork)._ptr,batch_count))
    return (_hipsolverSpotrfBatched_bufferSize__retval,)


@cython.embedsignature(True)
def hipsolverDpotrfBatched_bufferSize(object handle, object uplo, int n, object A, int lda, object lwork, int batch_count):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        uplo (`~.hipblasFillMode_t`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        A (`~.hip._util.types.ListOfPointer`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        lwork (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)

        batch_count (`~.int`):
            (undocumented)
    """
    if not isinstance(uplo,_hipblasFillMode_t__Base):
        raise TypeError("argument 'uplo' must be of type '_hipblasFillMode_t__Base'")
    _hipsolverDpotrfBatched_bufferSize__retval = hipsolverStatus_t(chipsolver.hipsolverDpotrfBatched_bufferSize(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,uplo.value,n,
        <double **>hip._util.types.ListOfPointer.fromPyobj(A)._ptr,lda,
        <int *>hip._util.types.ListOfInt.fromPyobj(lwork)._ptr,batch_count))
    return (_hipsolverDpotrfBatched_bufferSize__retval,)


@cython.embedsignature(True)
def hipsolverCpotrfBatched_bufferSize(object handle, object uplo, int n, object A, int lda, object lwork, int batch_count):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        uplo (`~.hipblasFillMode_t`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        A (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        lwork (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)

        batch_count (`~.int`):
            (undocumented)
    """
    if not isinstance(uplo,_hipblasFillMode_t__Base):
        raise TypeError("argument 'uplo' must be of type '_hipblasFillMode_t__Base'")
    _hipsolverCpotrfBatched_bufferSize__retval = hipsolverStatus_t(chipsolver.hipsolverCpotrfBatched_bufferSize(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,uplo.value,n,
        <chipsolver.float2 **>hip._util.types.Pointer.fromPyobj(A)._ptr,lda,
        <int *>hip._util.types.ListOfInt.fromPyobj(lwork)._ptr,batch_count))
    return (_hipsolverCpotrfBatched_bufferSize__retval,)


@cython.embedsignature(True)
def hipsolverZpotrfBatched_bufferSize(object handle, object uplo, int n, object A, int lda, object lwork, int batch_count):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        uplo (`~.hipblasFillMode_t`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        A (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        lwork (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)

        batch_count (`~.int`):
            (undocumented)
    """
    if not isinstance(uplo,_hipblasFillMode_t__Base):
        raise TypeError("argument 'uplo' must be of type '_hipblasFillMode_t__Base'")
    _hipsolverZpotrfBatched_bufferSize__retval = hipsolverStatus_t(chipsolver.hipsolverZpotrfBatched_bufferSize(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,uplo.value,n,
        <chipsolver.double2 **>hip._util.types.Pointer.fromPyobj(A)._ptr,lda,
        <int *>hip._util.types.ListOfInt.fromPyobj(lwork)._ptr,batch_count))
    return (_hipsolverZpotrfBatched_bufferSize__retval,)


@cython.embedsignature(True)
def hipsolverSpotrfBatched(object handle, object uplo, int n, object A, int lda, object work, int lwork, object devInfo, int batch_count):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        uplo (`~.hipblasFillMode_t`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        A (`~.hip._util.types.ListOfPointer`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        work (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lwork (`~.int`):
            (undocumented)

        devInfo (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)

        batch_count (`~.int`):
            (undocumented)
    """
    if not isinstance(uplo,_hipblasFillMode_t__Base):
        raise TypeError("argument 'uplo' must be of type '_hipblasFillMode_t__Base'")
    _hipsolverSpotrfBatched__retval = hipsolverStatus_t(chipsolver.hipsolverSpotrfBatched(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,uplo.value,n,
        <float **>hip._util.types.ListOfPointer.fromPyobj(A)._ptr,lda,
        <float *>hip._util.types.Pointer.fromPyobj(work)._ptr,lwork,
        <int *>hip._util.types.ListOfInt.fromPyobj(devInfo)._ptr,batch_count))
    return (_hipsolverSpotrfBatched__retval,)


@cython.embedsignature(True)
def hipsolverDpotrfBatched(object handle, object uplo, int n, object A, int lda, object work, int lwork, object devInfo, int batch_count):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        uplo (`~.hipblasFillMode_t`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        A (`~.hip._util.types.ListOfPointer`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        work (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lwork (`~.int`):
            (undocumented)

        devInfo (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)

        batch_count (`~.int`):
            (undocumented)
    """
    if not isinstance(uplo,_hipblasFillMode_t__Base):
        raise TypeError("argument 'uplo' must be of type '_hipblasFillMode_t__Base'")
    _hipsolverDpotrfBatched__retval = hipsolverStatus_t(chipsolver.hipsolverDpotrfBatched(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,uplo.value,n,
        <double **>hip._util.types.ListOfPointer.fromPyobj(A)._ptr,lda,
        <double *>hip._util.types.Pointer.fromPyobj(work)._ptr,lwork,
        <int *>hip._util.types.ListOfInt.fromPyobj(devInfo)._ptr,batch_count))
    return (_hipsolverDpotrfBatched__retval,)


@cython.embedsignature(True)
def hipsolverCpotrfBatched(object handle, object uplo, int n, object A, int lda, object work, int lwork, object devInfo, int batch_count):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        uplo (`~.hipblasFillMode_t`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        A (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        work (`~.float2`/`~.object`):
            (undocumented)

        lwork (`~.int`):
            (undocumented)

        devInfo (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)

        batch_count (`~.int`):
            (undocumented)
    """
    if not isinstance(uplo,_hipblasFillMode_t__Base):
        raise TypeError("argument 'uplo' must be of type '_hipblasFillMode_t__Base'")
    _hipsolverCpotrfBatched__retval = hipsolverStatus_t(chipsolver.hipsolverCpotrfBatched(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,uplo.value,n,
        <chipsolver.float2 **>hip._util.types.Pointer.fromPyobj(A)._ptr,lda,
        float2.fromPyobj(work).getElementPtr(),lwork,
        <int *>hip._util.types.ListOfInt.fromPyobj(devInfo)._ptr,batch_count))
    return (_hipsolverCpotrfBatched__retval,)


@cython.embedsignature(True)
def hipsolverZpotrfBatched(object handle, object uplo, int n, object A, int lda, object work, int lwork, object devInfo, int batch_count):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        uplo (`~.hipblasFillMode_t`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        A (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        work (`~.double2`/`~.object`):
            (undocumented)

        lwork (`~.int`):
            (undocumented)

        devInfo (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)

        batch_count (`~.int`):
            (undocumented)
    """
    if not isinstance(uplo,_hipblasFillMode_t__Base):
        raise TypeError("argument 'uplo' must be of type '_hipblasFillMode_t__Base'")
    _hipsolverZpotrfBatched__retval = hipsolverStatus_t(chipsolver.hipsolverZpotrfBatched(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,uplo.value,n,
        <chipsolver.double2 **>hip._util.types.Pointer.fromPyobj(A)._ptr,lda,
        double2.fromPyobj(work).getElementPtr(),lwork,
        <int *>hip._util.types.ListOfInt.fromPyobj(devInfo)._ptr,batch_count))
    return (_hipsolverZpotrfBatched__retval,)


@cython.embedsignature(True)
def hipsolverSpotri_bufferSize(object handle, object uplo, int n, object A, int lda, object lwork):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        uplo (`~.hipblasFillMode_t`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        A (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        lwork (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)
    """
    if not isinstance(uplo,_hipblasFillMode_t__Base):
        raise TypeError("argument 'uplo' must be of type '_hipblasFillMode_t__Base'")
    _hipsolverSpotri_bufferSize__retval = hipsolverStatus_t(chipsolver.hipsolverSpotri_bufferSize(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,uplo.value,n,
        <float *>hip._util.types.Pointer.fromPyobj(A)._ptr,lda,
        <int *>hip._util.types.ListOfInt.fromPyobj(lwork)._ptr))
    return (_hipsolverSpotri_bufferSize__retval,)


@cython.embedsignature(True)
def hipsolverDpotri_bufferSize(object handle, object uplo, int n, object A, int lda, object lwork):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        uplo (`~.hipblasFillMode_t`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        A (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        lwork (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)
    """
    if not isinstance(uplo,_hipblasFillMode_t__Base):
        raise TypeError("argument 'uplo' must be of type '_hipblasFillMode_t__Base'")
    _hipsolverDpotri_bufferSize__retval = hipsolverStatus_t(chipsolver.hipsolverDpotri_bufferSize(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,uplo.value,n,
        <double *>hip._util.types.Pointer.fromPyobj(A)._ptr,lda,
        <int *>hip._util.types.ListOfInt.fromPyobj(lwork)._ptr))
    return (_hipsolverDpotri_bufferSize__retval,)


@cython.embedsignature(True)
def hipsolverCpotri_bufferSize(object handle, object uplo, int n, object A, int lda, object lwork):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        uplo (`~.hipblasFillMode_t`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        A (`~.float2`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        lwork (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)
    """
    if not isinstance(uplo,_hipblasFillMode_t__Base):
        raise TypeError("argument 'uplo' must be of type '_hipblasFillMode_t__Base'")
    _hipsolverCpotri_bufferSize__retval = hipsolverStatus_t(chipsolver.hipsolverCpotri_bufferSize(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,uplo.value,n,
        float2.fromPyobj(A).getElementPtr(),lda,
        <int *>hip._util.types.ListOfInt.fromPyobj(lwork)._ptr))
    return (_hipsolverCpotri_bufferSize__retval,)


@cython.embedsignature(True)
def hipsolverZpotri_bufferSize(object handle, object uplo, int n, object A, int lda, object lwork):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        uplo (`~.hipblasFillMode_t`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        A (`~.double2`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        lwork (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)
    """
    if not isinstance(uplo,_hipblasFillMode_t__Base):
        raise TypeError("argument 'uplo' must be of type '_hipblasFillMode_t__Base'")
    _hipsolverZpotri_bufferSize__retval = hipsolverStatus_t(chipsolver.hipsolverZpotri_bufferSize(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,uplo.value,n,
        double2.fromPyobj(A).getElementPtr(),lda,
        <int *>hip._util.types.ListOfInt.fromPyobj(lwork)._ptr))
    return (_hipsolverZpotri_bufferSize__retval,)


@cython.embedsignature(True)
def hipsolverSpotri(object handle, object uplo, int n, object A, int lda, object work, int lwork, object devInfo):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        uplo (`~.hipblasFillMode_t`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        A (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        work (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lwork (`~.int`):
            (undocumented)

        devInfo (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)
    """
    if not isinstance(uplo,_hipblasFillMode_t__Base):
        raise TypeError("argument 'uplo' must be of type '_hipblasFillMode_t__Base'")
    _hipsolverSpotri__retval = hipsolverStatus_t(chipsolver.hipsolverSpotri(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,uplo.value,n,
        <float *>hip._util.types.Pointer.fromPyobj(A)._ptr,lda,
        <float *>hip._util.types.Pointer.fromPyobj(work)._ptr,lwork,
        <int *>hip._util.types.ListOfInt.fromPyobj(devInfo)._ptr))
    return (_hipsolverSpotri__retval,)


@cython.embedsignature(True)
def hipsolverDpotri(object handle, object uplo, int n, object A, int lda, object work, int lwork, object devInfo):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        uplo (`~.hipblasFillMode_t`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        A (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        work (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lwork (`~.int`):
            (undocumented)

        devInfo (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)
    """
    if not isinstance(uplo,_hipblasFillMode_t__Base):
        raise TypeError("argument 'uplo' must be of type '_hipblasFillMode_t__Base'")
    _hipsolverDpotri__retval = hipsolverStatus_t(chipsolver.hipsolverDpotri(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,uplo.value,n,
        <double *>hip._util.types.Pointer.fromPyobj(A)._ptr,lda,
        <double *>hip._util.types.Pointer.fromPyobj(work)._ptr,lwork,
        <int *>hip._util.types.ListOfInt.fromPyobj(devInfo)._ptr))
    return (_hipsolverDpotri__retval,)


@cython.embedsignature(True)
def hipsolverCpotri(object handle, object uplo, int n, object A, int lda, object work, int lwork, object devInfo):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        uplo (`~.hipblasFillMode_t`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        A (`~.float2`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        work (`~.float2`/`~.object`):
            (undocumented)

        lwork (`~.int`):
            (undocumented)

        devInfo (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)
    """
    if not isinstance(uplo,_hipblasFillMode_t__Base):
        raise TypeError("argument 'uplo' must be of type '_hipblasFillMode_t__Base'")
    _hipsolverCpotri__retval = hipsolverStatus_t(chipsolver.hipsolverCpotri(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,uplo.value,n,
        float2.fromPyobj(A).getElementPtr(),lda,
        float2.fromPyobj(work).getElementPtr(),lwork,
        <int *>hip._util.types.ListOfInt.fromPyobj(devInfo)._ptr))
    return (_hipsolverCpotri__retval,)


@cython.embedsignature(True)
def hipsolverZpotri(object handle, object uplo, int n, object A, int lda, object work, int lwork, object devInfo):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        uplo (`~.hipblasFillMode_t`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        A (`~.double2`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        work (`~.double2`/`~.object`):
            (undocumented)

        lwork (`~.int`):
            (undocumented)

        devInfo (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)
    """
    if not isinstance(uplo,_hipblasFillMode_t__Base):
        raise TypeError("argument 'uplo' must be of type '_hipblasFillMode_t__Base'")
    _hipsolverZpotri__retval = hipsolverStatus_t(chipsolver.hipsolverZpotri(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,uplo.value,n,
        double2.fromPyobj(A).getElementPtr(),lda,
        double2.fromPyobj(work).getElementPtr(),lwork,
        <int *>hip._util.types.ListOfInt.fromPyobj(devInfo)._ptr))
    return (_hipsolverZpotri__retval,)


@cython.embedsignature(True)
def hipsolverSpotrs_bufferSize(object handle, object uplo, int n, int nrhs, object A, int lda, object B, int ldb, object lwork):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        uplo (`~.hipblasFillMode_t`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        nrhs (`~.int`):
            (undocumented)

        A (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        B (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        ldb (`~.int`):
            (undocumented)

        lwork (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)
    """
    if not isinstance(uplo,_hipblasFillMode_t__Base):
        raise TypeError("argument 'uplo' must be of type '_hipblasFillMode_t__Base'")
    _hipsolverSpotrs_bufferSize__retval = hipsolverStatus_t(chipsolver.hipsolverSpotrs_bufferSize(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,uplo.value,n,nrhs,
        <float *>hip._util.types.Pointer.fromPyobj(A)._ptr,lda,
        <float *>hip._util.types.Pointer.fromPyobj(B)._ptr,ldb,
        <int *>hip._util.types.ListOfInt.fromPyobj(lwork)._ptr))
    return (_hipsolverSpotrs_bufferSize__retval,)


@cython.embedsignature(True)
def hipsolverDpotrs_bufferSize(object handle, object uplo, int n, int nrhs, object A, int lda, object B, int ldb, object lwork):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        uplo (`~.hipblasFillMode_t`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        nrhs (`~.int`):
            (undocumented)

        A (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        B (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        ldb (`~.int`):
            (undocumented)

        lwork (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)
    """
    if not isinstance(uplo,_hipblasFillMode_t__Base):
        raise TypeError("argument 'uplo' must be of type '_hipblasFillMode_t__Base'")
    _hipsolverDpotrs_bufferSize__retval = hipsolverStatus_t(chipsolver.hipsolverDpotrs_bufferSize(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,uplo.value,n,nrhs,
        <double *>hip._util.types.Pointer.fromPyobj(A)._ptr,lda,
        <double *>hip._util.types.Pointer.fromPyobj(B)._ptr,ldb,
        <int *>hip._util.types.ListOfInt.fromPyobj(lwork)._ptr))
    return (_hipsolverDpotrs_bufferSize__retval,)


@cython.embedsignature(True)
def hipsolverCpotrs_bufferSize(object handle, object uplo, int n, int nrhs, object A, int lda, object B, int ldb, object lwork):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        uplo (`~.hipblasFillMode_t`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        nrhs (`~.int`):
            (undocumented)

        A (`~.float2`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        B (`~.float2`/`~.object`):
            (undocumented)

        ldb (`~.int`):
            (undocumented)

        lwork (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)
    """
    if not isinstance(uplo,_hipblasFillMode_t__Base):
        raise TypeError("argument 'uplo' must be of type '_hipblasFillMode_t__Base'")
    _hipsolverCpotrs_bufferSize__retval = hipsolverStatus_t(chipsolver.hipsolverCpotrs_bufferSize(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,uplo.value,n,nrhs,
        float2.fromPyobj(A).getElementPtr(),lda,
        float2.fromPyobj(B).getElementPtr(),ldb,
        <int *>hip._util.types.ListOfInt.fromPyobj(lwork)._ptr))
    return (_hipsolverCpotrs_bufferSize__retval,)


@cython.embedsignature(True)
def hipsolverZpotrs_bufferSize(object handle, object uplo, int n, int nrhs, object A, int lda, object B, int ldb, object lwork):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        uplo (`~.hipblasFillMode_t`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        nrhs (`~.int`):
            (undocumented)

        A (`~.double2`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        B (`~.double2`/`~.object`):
            (undocumented)

        ldb (`~.int`):
            (undocumented)

        lwork (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)
    """
    if not isinstance(uplo,_hipblasFillMode_t__Base):
        raise TypeError("argument 'uplo' must be of type '_hipblasFillMode_t__Base'")
    _hipsolverZpotrs_bufferSize__retval = hipsolverStatus_t(chipsolver.hipsolverZpotrs_bufferSize(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,uplo.value,n,nrhs,
        double2.fromPyobj(A).getElementPtr(),lda,
        double2.fromPyobj(B).getElementPtr(),ldb,
        <int *>hip._util.types.ListOfInt.fromPyobj(lwork)._ptr))
    return (_hipsolverZpotrs_bufferSize__retval,)


@cython.embedsignature(True)
def hipsolverSpotrs(object handle, object uplo, int n, int nrhs, object A, int lda, object B, int ldb, object work, int lwork, object devInfo):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        uplo (`~.hipblasFillMode_t`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        nrhs (`~.int`):
            (undocumented)

        A (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        B (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        ldb (`~.int`):
            (undocumented)

        work (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lwork (`~.int`):
            (undocumented)

        devInfo (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)
    """
    if not isinstance(uplo,_hipblasFillMode_t__Base):
        raise TypeError("argument 'uplo' must be of type '_hipblasFillMode_t__Base'")
    _hipsolverSpotrs__retval = hipsolverStatus_t(chipsolver.hipsolverSpotrs(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,uplo.value,n,nrhs,
        <float *>hip._util.types.Pointer.fromPyobj(A)._ptr,lda,
        <float *>hip._util.types.Pointer.fromPyobj(B)._ptr,ldb,
        <float *>hip._util.types.Pointer.fromPyobj(work)._ptr,lwork,
        <int *>hip._util.types.ListOfInt.fromPyobj(devInfo)._ptr))
    return (_hipsolverSpotrs__retval,)


@cython.embedsignature(True)
def hipsolverDpotrs(object handle, object uplo, int n, int nrhs, object A, int lda, object B, int ldb, object work, int lwork, object devInfo):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        uplo (`~.hipblasFillMode_t`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        nrhs (`~.int`):
            (undocumented)

        A (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        B (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        ldb (`~.int`):
            (undocumented)

        work (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lwork (`~.int`):
            (undocumented)

        devInfo (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)
    """
    if not isinstance(uplo,_hipblasFillMode_t__Base):
        raise TypeError("argument 'uplo' must be of type '_hipblasFillMode_t__Base'")
    _hipsolverDpotrs__retval = hipsolverStatus_t(chipsolver.hipsolverDpotrs(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,uplo.value,n,nrhs,
        <double *>hip._util.types.Pointer.fromPyobj(A)._ptr,lda,
        <double *>hip._util.types.Pointer.fromPyobj(B)._ptr,ldb,
        <double *>hip._util.types.Pointer.fromPyobj(work)._ptr,lwork,
        <int *>hip._util.types.ListOfInt.fromPyobj(devInfo)._ptr))
    return (_hipsolverDpotrs__retval,)


@cython.embedsignature(True)
def hipsolverCpotrs(object handle, object uplo, int n, int nrhs, object A, int lda, object B, int ldb, object work, int lwork, object devInfo):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        uplo (`~.hipblasFillMode_t`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        nrhs (`~.int`):
            (undocumented)

        A (`~.float2`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        B (`~.float2`/`~.object`):
            (undocumented)

        ldb (`~.int`):
            (undocumented)

        work (`~.float2`/`~.object`):
            (undocumented)

        lwork (`~.int`):
            (undocumented)

        devInfo (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)
    """
    if not isinstance(uplo,_hipblasFillMode_t__Base):
        raise TypeError("argument 'uplo' must be of type '_hipblasFillMode_t__Base'")
    _hipsolverCpotrs__retval = hipsolverStatus_t(chipsolver.hipsolverCpotrs(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,uplo.value,n,nrhs,
        float2.fromPyobj(A).getElementPtr(),lda,
        float2.fromPyobj(B).getElementPtr(),ldb,
        float2.fromPyobj(work).getElementPtr(),lwork,
        <int *>hip._util.types.ListOfInt.fromPyobj(devInfo)._ptr))
    return (_hipsolverCpotrs__retval,)


@cython.embedsignature(True)
def hipsolverZpotrs(object handle, object uplo, int n, int nrhs, object A, int lda, object B, int ldb, object work, int lwork, object devInfo):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        uplo (`~.hipblasFillMode_t`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        nrhs (`~.int`):
            (undocumented)

        A (`~.double2`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        B (`~.double2`/`~.object`):
            (undocumented)

        ldb (`~.int`):
            (undocumented)

        work (`~.double2`/`~.object`):
            (undocumented)

        lwork (`~.int`):
            (undocumented)

        devInfo (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)
    """
    if not isinstance(uplo,_hipblasFillMode_t__Base):
        raise TypeError("argument 'uplo' must be of type '_hipblasFillMode_t__Base'")
    _hipsolverZpotrs__retval = hipsolverStatus_t(chipsolver.hipsolverZpotrs(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,uplo.value,n,nrhs,
        double2.fromPyobj(A).getElementPtr(),lda,
        double2.fromPyobj(B).getElementPtr(),ldb,
        double2.fromPyobj(work).getElementPtr(),lwork,
        <int *>hip._util.types.ListOfInt.fromPyobj(devInfo)._ptr))
    return (_hipsolverZpotrs__retval,)


@cython.embedsignature(True)
def hipsolverSpotrsBatched_bufferSize(object handle, object uplo, int n, int nrhs, object A, int lda, object B, int ldb, object lwork, int batch_count):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        uplo (`~.hipblasFillMode_t`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        nrhs (`~.int`):
            (undocumented)

        A (`~.hip._util.types.ListOfPointer`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        B (`~.hip._util.types.ListOfPointer`/`~.object`):
            (undocumented)

        ldb (`~.int`):
            (undocumented)

        lwork (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)

        batch_count (`~.int`):
            (undocumented)
    """
    if not isinstance(uplo,_hipblasFillMode_t__Base):
        raise TypeError("argument 'uplo' must be of type '_hipblasFillMode_t__Base'")
    _hipsolverSpotrsBatched_bufferSize__retval = hipsolverStatus_t(chipsolver.hipsolverSpotrsBatched_bufferSize(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,uplo.value,n,nrhs,
        <float **>hip._util.types.ListOfPointer.fromPyobj(A)._ptr,lda,
        <float **>hip._util.types.ListOfPointer.fromPyobj(B)._ptr,ldb,
        <int *>hip._util.types.ListOfInt.fromPyobj(lwork)._ptr,batch_count))
    return (_hipsolverSpotrsBatched_bufferSize__retval,)


@cython.embedsignature(True)
def hipsolverDpotrsBatched_bufferSize(object handle, object uplo, int n, int nrhs, object A, int lda, object B, int ldb, object lwork, int batch_count):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        uplo (`~.hipblasFillMode_t`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        nrhs (`~.int`):
            (undocumented)

        A (`~.hip._util.types.ListOfPointer`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        B (`~.hip._util.types.ListOfPointer`/`~.object`):
            (undocumented)

        ldb (`~.int`):
            (undocumented)

        lwork (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)

        batch_count (`~.int`):
            (undocumented)
    """
    if not isinstance(uplo,_hipblasFillMode_t__Base):
        raise TypeError("argument 'uplo' must be of type '_hipblasFillMode_t__Base'")
    _hipsolverDpotrsBatched_bufferSize__retval = hipsolverStatus_t(chipsolver.hipsolverDpotrsBatched_bufferSize(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,uplo.value,n,nrhs,
        <double **>hip._util.types.ListOfPointer.fromPyobj(A)._ptr,lda,
        <double **>hip._util.types.ListOfPointer.fromPyobj(B)._ptr,ldb,
        <int *>hip._util.types.ListOfInt.fromPyobj(lwork)._ptr,batch_count))
    return (_hipsolverDpotrsBatched_bufferSize__retval,)


@cython.embedsignature(True)
def hipsolverCpotrsBatched_bufferSize(object handle, object uplo, int n, int nrhs, object A, int lda, object B, int ldb, object lwork, int batch_count):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        uplo (`~.hipblasFillMode_t`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        nrhs (`~.int`):
            (undocumented)

        A (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        B (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        ldb (`~.int`):
            (undocumented)

        lwork (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)

        batch_count (`~.int`):
            (undocumented)
    """
    if not isinstance(uplo,_hipblasFillMode_t__Base):
        raise TypeError("argument 'uplo' must be of type '_hipblasFillMode_t__Base'")
    _hipsolverCpotrsBatched_bufferSize__retval = hipsolverStatus_t(chipsolver.hipsolverCpotrsBatched_bufferSize(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,uplo.value,n,nrhs,
        <chipsolver.float2 **>hip._util.types.Pointer.fromPyobj(A)._ptr,lda,
        <chipsolver.float2 **>hip._util.types.Pointer.fromPyobj(B)._ptr,ldb,
        <int *>hip._util.types.ListOfInt.fromPyobj(lwork)._ptr,batch_count))
    return (_hipsolverCpotrsBatched_bufferSize__retval,)


@cython.embedsignature(True)
def hipsolverZpotrsBatched_bufferSize(object handle, object uplo, int n, int nrhs, object A, int lda, object B, int ldb, object lwork, int batch_count):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        uplo (`~.hipblasFillMode_t`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        nrhs (`~.int`):
            (undocumented)

        A (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        B (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        ldb (`~.int`):
            (undocumented)

        lwork (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)

        batch_count (`~.int`):
            (undocumented)
    """
    if not isinstance(uplo,_hipblasFillMode_t__Base):
        raise TypeError("argument 'uplo' must be of type '_hipblasFillMode_t__Base'")
    _hipsolverZpotrsBatched_bufferSize__retval = hipsolverStatus_t(chipsolver.hipsolverZpotrsBatched_bufferSize(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,uplo.value,n,nrhs,
        <chipsolver.double2 **>hip._util.types.Pointer.fromPyobj(A)._ptr,lda,
        <chipsolver.double2 **>hip._util.types.Pointer.fromPyobj(B)._ptr,ldb,
        <int *>hip._util.types.ListOfInt.fromPyobj(lwork)._ptr,batch_count))
    return (_hipsolverZpotrsBatched_bufferSize__retval,)


@cython.embedsignature(True)
def hipsolverSpotrsBatched(object handle, object uplo, int n, int nrhs, object A, int lda, object B, int ldb, object work, int lwork, object devInfo, int batch_count):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        uplo (`~.hipblasFillMode_t`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        nrhs (`~.int`):
            (undocumented)

        A (`~.hip._util.types.ListOfPointer`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        B (`~.hip._util.types.ListOfPointer`/`~.object`):
            (undocumented)

        ldb (`~.int`):
            (undocumented)

        work (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lwork (`~.int`):
            (undocumented)

        devInfo (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)

        batch_count (`~.int`):
            (undocumented)
    """
    if not isinstance(uplo,_hipblasFillMode_t__Base):
        raise TypeError("argument 'uplo' must be of type '_hipblasFillMode_t__Base'")
    _hipsolverSpotrsBatched__retval = hipsolverStatus_t(chipsolver.hipsolverSpotrsBatched(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,uplo.value,n,nrhs,
        <float **>hip._util.types.ListOfPointer.fromPyobj(A)._ptr,lda,
        <float **>hip._util.types.ListOfPointer.fromPyobj(B)._ptr,ldb,
        <float *>hip._util.types.Pointer.fromPyobj(work)._ptr,lwork,
        <int *>hip._util.types.ListOfInt.fromPyobj(devInfo)._ptr,batch_count))
    return (_hipsolverSpotrsBatched__retval,)


@cython.embedsignature(True)
def hipsolverDpotrsBatched(object handle, object uplo, int n, int nrhs, object A, int lda, object B, int ldb, object work, int lwork, object devInfo, int batch_count):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        uplo (`~.hipblasFillMode_t`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        nrhs (`~.int`):
            (undocumented)

        A (`~.hip._util.types.ListOfPointer`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        B (`~.hip._util.types.ListOfPointer`/`~.object`):
            (undocumented)

        ldb (`~.int`):
            (undocumented)

        work (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lwork (`~.int`):
            (undocumented)

        devInfo (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)

        batch_count (`~.int`):
            (undocumented)
    """
    if not isinstance(uplo,_hipblasFillMode_t__Base):
        raise TypeError("argument 'uplo' must be of type '_hipblasFillMode_t__Base'")
    _hipsolverDpotrsBatched__retval = hipsolverStatus_t(chipsolver.hipsolverDpotrsBatched(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,uplo.value,n,nrhs,
        <double **>hip._util.types.ListOfPointer.fromPyobj(A)._ptr,lda,
        <double **>hip._util.types.ListOfPointer.fromPyobj(B)._ptr,ldb,
        <double *>hip._util.types.Pointer.fromPyobj(work)._ptr,lwork,
        <int *>hip._util.types.ListOfInt.fromPyobj(devInfo)._ptr,batch_count))
    return (_hipsolverDpotrsBatched__retval,)


@cython.embedsignature(True)
def hipsolverCpotrsBatched(object handle, object uplo, int n, int nrhs, object A, int lda, object B, int ldb, object work, int lwork, object devInfo, int batch_count):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        uplo (`~.hipblasFillMode_t`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        nrhs (`~.int`):
            (undocumented)

        A (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        B (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        ldb (`~.int`):
            (undocumented)

        work (`~.float2`/`~.object`):
            (undocumented)

        lwork (`~.int`):
            (undocumented)

        devInfo (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)

        batch_count (`~.int`):
            (undocumented)
    """
    if not isinstance(uplo,_hipblasFillMode_t__Base):
        raise TypeError("argument 'uplo' must be of type '_hipblasFillMode_t__Base'")
    _hipsolverCpotrsBatched__retval = hipsolverStatus_t(chipsolver.hipsolverCpotrsBatched(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,uplo.value,n,nrhs,
        <chipsolver.float2 **>hip._util.types.Pointer.fromPyobj(A)._ptr,lda,
        <chipsolver.float2 **>hip._util.types.Pointer.fromPyobj(B)._ptr,ldb,
        float2.fromPyobj(work).getElementPtr(),lwork,
        <int *>hip._util.types.ListOfInt.fromPyobj(devInfo)._ptr,batch_count))
    return (_hipsolverCpotrsBatched__retval,)


@cython.embedsignature(True)
def hipsolverZpotrsBatched(object handle, object uplo, int n, int nrhs, object A, int lda, object B, int ldb, object work, int lwork, object devInfo, int batch_count):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        uplo (`~.hipblasFillMode_t`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        nrhs (`~.int`):
            (undocumented)

        A (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        B (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        ldb (`~.int`):
            (undocumented)

        work (`~.double2`/`~.object`):
            (undocumented)

        lwork (`~.int`):
            (undocumented)

        devInfo (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)

        batch_count (`~.int`):
            (undocumented)
    """
    if not isinstance(uplo,_hipblasFillMode_t__Base):
        raise TypeError("argument 'uplo' must be of type '_hipblasFillMode_t__Base'")
    _hipsolverZpotrsBatched__retval = hipsolverStatus_t(chipsolver.hipsolverZpotrsBatched(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,uplo.value,n,nrhs,
        <chipsolver.double2 **>hip._util.types.Pointer.fromPyobj(A)._ptr,lda,
        <chipsolver.double2 **>hip._util.types.Pointer.fromPyobj(B)._ptr,ldb,
        double2.fromPyobj(work).getElementPtr(),lwork,
        <int *>hip._util.types.ListOfInt.fromPyobj(devInfo)._ptr,batch_count))
    return (_hipsolverZpotrsBatched__retval,)


@cython.embedsignature(True)
def hipsolverSsyevd_bufferSize(object handle, object jobz, object uplo, int n, object A, int lda, object D, object lwork):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        jobz (`~.hipsolverEigMode_t`):
            (undocumented)

        uplo (`~.hipblasFillMode_t`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        A (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        D (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lwork (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)
    """
    if not isinstance(jobz,_hipsolverEigMode_t__Base):
        raise TypeError("argument 'jobz' must be of type '_hipsolverEigMode_t__Base'")                    
    if not isinstance(uplo,_hipblasFillMode_t__Base):
        raise TypeError("argument 'uplo' must be of type '_hipblasFillMode_t__Base'")
    _hipsolverSsyevd_bufferSize__retval = hipsolverStatus_t(chipsolver.hipsolverSsyevd_bufferSize(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,jobz.value,uplo.value,n,
        <float *>hip._util.types.Pointer.fromPyobj(A)._ptr,lda,
        <float *>hip._util.types.Pointer.fromPyobj(D)._ptr,
        <int *>hip._util.types.ListOfInt.fromPyobj(lwork)._ptr))
    return (_hipsolverSsyevd_bufferSize__retval,)


@cython.embedsignature(True)
def hipsolverDsyevd_bufferSize(object handle, object jobz, object uplo, int n, object A, int lda, object D, object lwork):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        jobz (`~.hipsolverEigMode_t`):
            (undocumented)

        uplo (`~.hipblasFillMode_t`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        A (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        D (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lwork (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)
    """
    if not isinstance(jobz,_hipsolverEigMode_t__Base):
        raise TypeError("argument 'jobz' must be of type '_hipsolverEigMode_t__Base'")                    
    if not isinstance(uplo,_hipblasFillMode_t__Base):
        raise TypeError("argument 'uplo' must be of type '_hipblasFillMode_t__Base'")
    _hipsolverDsyevd_bufferSize__retval = hipsolverStatus_t(chipsolver.hipsolverDsyevd_bufferSize(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,jobz.value,uplo.value,n,
        <double *>hip._util.types.Pointer.fromPyobj(A)._ptr,lda,
        <double *>hip._util.types.Pointer.fromPyobj(D)._ptr,
        <int *>hip._util.types.ListOfInt.fromPyobj(lwork)._ptr))
    return (_hipsolverDsyevd_bufferSize__retval,)


@cython.embedsignature(True)
def hipsolverCheevd_bufferSize(object handle, object jobz, object uplo, int n, object A, int lda, object D, object lwork):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        jobz (`~.hipsolverEigMode_t`):
            (undocumented)

        uplo (`~.hipblasFillMode_t`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        A (`~.float2`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        D (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lwork (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)
    """
    if not isinstance(jobz,_hipsolverEigMode_t__Base):
        raise TypeError("argument 'jobz' must be of type '_hipsolverEigMode_t__Base'")                    
    if not isinstance(uplo,_hipblasFillMode_t__Base):
        raise TypeError("argument 'uplo' must be of type '_hipblasFillMode_t__Base'")
    _hipsolverCheevd_bufferSize__retval = hipsolverStatus_t(chipsolver.hipsolverCheevd_bufferSize(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,jobz.value,uplo.value,n,
        float2.fromPyobj(A).getElementPtr(),lda,
        <float *>hip._util.types.Pointer.fromPyobj(D)._ptr,
        <int *>hip._util.types.ListOfInt.fromPyobj(lwork)._ptr))
    return (_hipsolverCheevd_bufferSize__retval,)


@cython.embedsignature(True)
def hipsolverZheevd_bufferSize(object handle, object jobz, object uplo, int n, object A, int lda, object D, object lwork):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        jobz (`~.hipsolverEigMode_t`):
            (undocumented)

        uplo (`~.hipblasFillMode_t`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        A (`~.double2`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        D (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lwork (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)
    """
    if not isinstance(jobz,_hipsolverEigMode_t__Base):
        raise TypeError("argument 'jobz' must be of type '_hipsolverEigMode_t__Base'")                    
    if not isinstance(uplo,_hipblasFillMode_t__Base):
        raise TypeError("argument 'uplo' must be of type '_hipblasFillMode_t__Base'")
    _hipsolverZheevd_bufferSize__retval = hipsolverStatus_t(chipsolver.hipsolverZheevd_bufferSize(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,jobz.value,uplo.value,n,
        double2.fromPyobj(A).getElementPtr(),lda,
        <double *>hip._util.types.Pointer.fromPyobj(D)._ptr,
        <int *>hip._util.types.ListOfInt.fromPyobj(lwork)._ptr))
    return (_hipsolverZheevd_bufferSize__retval,)


@cython.embedsignature(True)
def hipsolverSsyevd(object handle, object jobz, object uplo, int n, object A, int lda, object D, object work, int lwork, object devInfo):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        jobz (`~.hipsolverEigMode_t`):
            (undocumented)

        uplo (`~.hipblasFillMode_t`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        A (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        D (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        work (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lwork (`~.int`):
            (undocumented)

        devInfo (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)
    """
    if not isinstance(jobz,_hipsolverEigMode_t__Base):
        raise TypeError("argument 'jobz' must be of type '_hipsolverEigMode_t__Base'")                    
    if not isinstance(uplo,_hipblasFillMode_t__Base):
        raise TypeError("argument 'uplo' must be of type '_hipblasFillMode_t__Base'")
    _hipsolverSsyevd__retval = hipsolverStatus_t(chipsolver.hipsolverSsyevd(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,jobz.value,uplo.value,n,
        <float *>hip._util.types.Pointer.fromPyobj(A)._ptr,lda,
        <float *>hip._util.types.Pointer.fromPyobj(D)._ptr,
        <float *>hip._util.types.Pointer.fromPyobj(work)._ptr,lwork,
        <int *>hip._util.types.ListOfInt.fromPyobj(devInfo)._ptr))
    return (_hipsolverSsyevd__retval,)


@cython.embedsignature(True)
def hipsolverDsyevd(object handle, object jobz, object uplo, int n, object A, int lda, object D, object work, int lwork, object devInfo):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        jobz (`~.hipsolverEigMode_t`):
            (undocumented)

        uplo (`~.hipblasFillMode_t`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        A (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        D (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        work (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lwork (`~.int`):
            (undocumented)

        devInfo (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)
    """
    if not isinstance(jobz,_hipsolverEigMode_t__Base):
        raise TypeError("argument 'jobz' must be of type '_hipsolverEigMode_t__Base'")                    
    if not isinstance(uplo,_hipblasFillMode_t__Base):
        raise TypeError("argument 'uplo' must be of type '_hipblasFillMode_t__Base'")
    _hipsolverDsyevd__retval = hipsolverStatus_t(chipsolver.hipsolverDsyevd(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,jobz.value,uplo.value,n,
        <double *>hip._util.types.Pointer.fromPyobj(A)._ptr,lda,
        <double *>hip._util.types.Pointer.fromPyobj(D)._ptr,
        <double *>hip._util.types.Pointer.fromPyobj(work)._ptr,lwork,
        <int *>hip._util.types.ListOfInt.fromPyobj(devInfo)._ptr))
    return (_hipsolverDsyevd__retval,)


@cython.embedsignature(True)
def hipsolverCheevd(object handle, object jobz, object uplo, int n, object A, int lda, object D, object work, int lwork, object devInfo):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        jobz (`~.hipsolverEigMode_t`):
            (undocumented)

        uplo (`~.hipblasFillMode_t`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        A (`~.float2`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        D (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        work (`~.float2`/`~.object`):
            (undocumented)

        lwork (`~.int`):
            (undocumented)

        devInfo (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)
    """
    if not isinstance(jobz,_hipsolverEigMode_t__Base):
        raise TypeError("argument 'jobz' must be of type '_hipsolverEigMode_t__Base'")                    
    if not isinstance(uplo,_hipblasFillMode_t__Base):
        raise TypeError("argument 'uplo' must be of type '_hipblasFillMode_t__Base'")
    _hipsolverCheevd__retval = hipsolverStatus_t(chipsolver.hipsolverCheevd(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,jobz.value,uplo.value,n,
        float2.fromPyobj(A).getElementPtr(),lda,
        <float *>hip._util.types.Pointer.fromPyobj(D)._ptr,
        float2.fromPyobj(work).getElementPtr(),lwork,
        <int *>hip._util.types.ListOfInt.fromPyobj(devInfo)._ptr))
    return (_hipsolverCheevd__retval,)


@cython.embedsignature(True)
def hipsolverZheevd(object handle, object jobz, object uplo, int n, object A, int lda, object D, object work, int lwork, object devInfo):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        jobz (`~.hipsolverEigMode_t`):
            (undocumented)

        uplo (`~.hipblasFillMode_t`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        A (`~.double2`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        D (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        work (`~.double2`/`~.object`):
            (undocumented)

        lwork (`~.int`):
            (undocumented)

        devInfo (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)
    """
    if not isinstance(jobz,_hipsolverEigMode_t__Base):
        raise TypeError("argument 'jobz' must be of type '_hipsolverEigMode_t__Base'")                    
    if not isinstance(uplo,_hipblasFillMode_t__Base):
        raise TypeError("argument 'uplo' must be of type '_hipblasFillMode_t__Base'")
    _hipsolverZheevd__retval = hipsolverStatus_t(chipsolver.hipsolverZheevd(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,jobz.value,uplo.value,n,
        double2.fromPyobj(A).getElementPtr(),lda,
        <double *>hip._util.types.Pointer.fromPyobj(D)._ptr,
        double2.fromPyobj(work).getElementPtr(),lwork,
        <int *>hip._util.types.ListOfInt.fromPyobj(devInfo)._ptr))
    return (_hipsolverZheevd__retval,)


@cython.embedsignature(True)
def hipsolverSsyevj_bufferSize(object handle, object jobz, object uplo, int n, object A, int lda, object W, object lwork, object params):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        jobz (`~.hipsolverEigMode_t`):
            (undocumented)

        uplo (`~.hipblasFillMode_t`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        A (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        W (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lwork (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)

        params (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)
    """
    if not isinstance(jobz,_hipsolverEigMode_t__Base):
        raise TypeError("argument 'jobz' must be of type '_hipsolverEigMode_t__Base'")                    
    if not isinstance(uplo,_hipblasFillMode_t__Base):
        raise TypeError("argument 'uplo' must be of type '_hipblasFillMode_t__Base'")
    _hipsolverSsyevj_bufferSize__retval = hipsolverStatus_t(chipsolver.hipsolverSsyevj_bufferSize(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,jobz.value,uplo.value,n,
        <float *>hip._util.types.Pointer.fromPyobj(A)._ptr,lda,
        <float *>hip._util.types.Pointer.fromPyobj(W)._ptr,
        <int *>hip._util.types.ListOfInt.fromPyobj(lwork)._ptr,
        <void *>hip._util.types.Pointer.fromPyobj(params)._ptr))
    return (_hipsolverSsyevj_bufferSize__retval,)


@cython.embedsignature(True)
def hipsolverDsyevj_bufferSize(object handle, object jobz, object uplo, int n, object A, int lda, object W, object lwork, object params):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        jobz (`~.hipsolverEigMode_t`):
            (undocumented)

        uplo (`~.hipblasFillMode_t`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        A (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        W (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lwork (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)

        params (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)
    """
    if not isinstance(jobz,_hipsolverEigMode_t__Base):
        raise TypeError("argument 'jobz' must be of type '_hipsolverEigMode_t__Base'")                    
    if not isinstance(uplo,_hipblasFillMode_t__Base):
        raise TypeError("argument 'uplo' must be of type '_hipblasFillMode_t__Base'")
    _hipsolverDsyevj_bufferSize__retval = hipsolverStatus_t(chipsolver.hipsolverDsyevj_bufferSize(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,jobz.value,uplo.value,n,
        <double *>hip._util.types.Pointer.fromPyobj(A)._ptr,lda,
        <double *>hip._util.types.Pointer.fromPyobj(W)._ptr,
        <int *>hip._util.types.ListOfInt.fromPyobj(lwork)._ptr,
        <void *>hip._util.types.Pointer.fromPyobj(params)._ptr))
    return (_hipsolverDsyevj_bufferSize__retval,)


@cython.embedsignature(True)
def hipsolverCheevj_bufferSize(object handle, object jobz, object uplo, int n, object A, int lda, object W, object lwork, object params):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        jobz (`~.hipsolverEigMode_t`):
            (undocumented)

        uplo (`~.hipblasFillMode_t`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        A (`~.float2`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        W (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lwork (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)

        params (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)
    """
    if not isinstance(jobz,_hipsolverEigMode_t__Base):
        raise TypeError("argument 'jobz' must be of type '_hipsolverEigMode_t__Base'")                    
    if not isinstance(uplo,_hipblasFillMode_t__Base):
        raise TypeError("argument 'uplo' must be of type '_hipblasFillMode_t__Base'")
    _hipsolverCheevj_bufferSize__retval = hipsolverStatus_t(chipsolver.hipsolverCheevj_bufferSize(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,jobz.value,uplo.value,n,
        float2.fromPyobj(A).getElementPtr(),lda,
        <float *>hip._util.types.Pointer.fromPyobj(W)._ptr,
        <int *>hip._util.types.ListOfInt.fromPyobj(lwork)._ptr,
        <void *>hip._util.types.Pointer.fromPyobj(params)._ptr))
    return (_hipsolverCheevj_bufferSize__retval,)


@cython.embedsignature(True)
def hipsolverZheevj_bufferSize(object handle, object jobz, object uplo, int n, object A, int lda, object W, object lwork, object params):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        jobz (`~.hipsolverEigMode_t`):
            (undocumented)

        uplo (`~.hipblasFillMode_t`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        A (`~.double2`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        W (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lwork (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)

        params (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)
    """
    if not isinstance(jobz,_hipsolverEigMode_t__Base):
        raise TypeError("argument 'jobz' must be of type '_hipsolverEigMode_t__Base'")                    
    if not isinstance(uplo,_hipblasFillMode_t__Base):
        raise TypeError("argument 'uplo' must be of type '_hipblasFillMode_t__Base'")
    _hipsolverZheevj_bufferSize__retval = hipsolverStatus_t(chipsolver.hipsolverZheevj_bufferSize(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,jobz.value,uplo.value,n,
        double2.fromPyobj(A).getElementPtr(),lda,
        <double *>hip._util.types.Pointer.fromPyobj(W)._ptr,
        <int *>hip._util.types.ListOfInt.fromPyobj(lwork)._ptr,
        <void *>hip._util.types.Pointer.fromPyobj(params)._ptr))
    return (_hipsolverZheevj_bufferSize__retval,)


@cython.embedsignature(True)
def hipsolverSsyevj(object handle, object jobz, object uplo, int n, object A, int lda, object W, object work, int lwork, object devInfo, object params):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        jobz (`~.hipsolverEigMode_t`):
            (undocumented)

        uplo (`~.hipblasFillMode_t`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        A (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        W (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        work (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lwork (`~.int`):
            (undocumented)

        devInfo (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)

        params (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)
    """
    if not isinstance(jobz,_hipsolverEigMode_t__Base):
        raise TypeError("argument 'jobz' must be of type '_hipsolverEigMode_t__Base'")                    
    if not isinstance(uplo,_hipblasFillMode_t__Base):
        raise TypeError("argument 'uplo' must be of type '_hipblasFillMode_t__Base'")
    _hipsolverSsyevj__retval = hipsolverStatus_t(chipsolver.hipsolverSsyevj(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,jobz.value,uplo.value,n,
        <float *>hip._util.types.Pointer.fromPyobj(A)._ptr,lda,
        <float *>hip._util.types.Pointer.fromPyobj(W)._ptr,
        <float *>hip._util.types.Pointer.fromPyobj(work)._ptr,lwork,
        <int *>hip._util.types.ListOfInt.fromPyobj(devInfo)._ptr,
        <void *>hip._util.types.Pointer.fromPyobj(params)._ptr))
    return (_hipsolverSsyevj__retval,)


@cython.embedsignature(True)
def hipsolverDsyevj(object handle, object jobz, object uplo, int n, object A, int lda, object W, object work, int lwork, object devInfo, object params):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        jobz (`~.hipsolverEigMode_t`):
            (undocumented)

        uplo (`~.hipblasFillMode_t`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        A (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        W (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        work (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lwork (`~.int`):
            (undocumented)

        devInfo (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)

        params (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)
    """
    if not isinstance(jobz,_hipsolverEigMode_t__Base):
        raise TypeError("argument 'jobz' must be of type '_hipsolverEigMode_t__Base'")                    
    if not isinstance(uplo,_hipblasFillMode_t__Base):
        raise TypeError("argument 'uplo' must be of type '_hipblasFillMode_t__Base'")
    _hipsolverDsyevj__retval = hipsolverStatus_t(chipsolver.hipsolverDsyevj(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,jobz.value,uplo.value,n,
        <double *>hip._util.types.Pointer.fromPyobj(A)._ptr,lda,
        <double *>hip._util.types.Pointer.fromPyobj(W)._ptr,
        <double *>hip._util.types.Pointer.fromPyobj(work)._ptr,lwork,
        <int *>hip._util.types.ListOfInt.fromPyobj(devInfo)._ptr,
        <void *>hip._util.types.Pointer.fromPyobj(params)._ptr))
    return (_hipsolverDsyevj__retval,)


@cython.embedsignature(True)
def hipsolverCheevj(object handle, object jobz, object uplo, int n, object A, int lda, object W, object work, int lwork, object devInfo, object params):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        jobz (`~.hipsolverEigMode_t`):
            (undocumented)

        uplo (`~.hipblasFillMode_t`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        A (`~.float2`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        W (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        work (`~.float2`/`~.object`):
            (undocumented)

        lwork (`~.int`):
            (undocumented)

        devInfo (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)

        params (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)
    """
    if not isinstance(jobz,_hipsolverEigMode_t__Base):
        raise TypeError("argument 'jobz' must be of type '_hipsolverEigMode_t__Base'")                    
    if not isinstance(uplo,_hipblasFillMode_t__Base):
        raise TypeError("argument 'uplo' must be of type '_hipblasFillMode_t__Base'")
    _hipsolverCheevj__retval = hipsolverStatus_t(chipsolver.hipsolverCheevj(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,jobz.value,uplo.value,n,
        float2.fromPyobj(A).getElementPtr(),lda,
        <float *>hip._util.types.Pointer.fromPyobj(W)._ptr,
        float2.fromPyobj(work).getElementPtr(),lwork,
        <int *>hip._util.types.ListOfInt.fromPyobj(devInfo)._ptr,
        <void *>hip._util.types.Pointer.fromPyobj(params)._ptr))
    return (_hipsolverCheevj__retval,)


@cython.embedsignature(True)
def hipsolverZheevj(object handle, object jobz, object uplo, int n, object A, int lda, object W, object work, int lwork, object devInfo, object params):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        jobz (`~.hipsolverEigMode_t`):
            (undocumented)

        uplo (`~.hipblasFillMode_t`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        A (`~.double2`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        W (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        work (`~.double2`/`~.object`):
            (undocumented)

        lwork (`~.int`):
            (undocumented)

        devInfo (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)

        params (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)
    """
    if not isinstance(jobz,_hipsolverEigMode_t__Base):
        raise TypeError("argument 'jobz' must be of type '_hipsolverEigMode_t__Base'")                    
    if not isinstance(uplo,_hipblasFillMode_t__Base):
        raise TypeError("argument 'uplo' must be of type '_hipblasFillMode_t__Base'")
    _hipsolverZheevj__retval = hipsolverStatus_t(chipsolver.hipsolverZheevj(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,jobz.value,uplo.value,n,
        double2.fromPyobj(A).getElementPtr(),lda,
        <double *>hip._util.types.Pointer.fromPyobj(W)._ptr,
        double2.fromPyobj(work).getElementPtr(),lwork,
        <int *>hip._util.types.ListOfInt.fromPyobj(devInfo)._ptr,
        <void *>hip._util.types.Pointer.fromPyobj(params)._ptr))
    return (_hipsolverZheevj__retval,)


@cython.embedsignature(True)
def hipsolverSsyevjBatched_bufferSize(object handle, object jobz, object uplo, int n, object A, int lda, object W, object lwork, object params, int batch_count):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        jobz (`~.hipsolverEigMode_t`):
            (undocumented)

        uplo (`~.hipblasFillMode_t`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        A (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        W (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lwork (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)

        params (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        batch_count (`~.int`):
            (undocumented)
    """
    if not isinstance(jobz,_hipsolverEigMode_t__Base):
        raise TypeError("argument 'jobz' must be of type '_hipsolverEigMode_t__Base'")                    
    if not isinstance(uplo,_hipblasFillMode_t__Base):
        raise TypeError("argument 'uplo' must be of type '_hipblasFillMode_t__Base'")
    _hipsolverSsyevjBatched_bufferSize__retval = hipsolverStatus_t(chipsolver.hipsolverSsyevjBatched_bufferSize(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,jobz.value,uplo.value,n,
        <float *>hip._util.types.Pointer.fromPyobj(A)._ptr,lda,
        <float *>hip._util.types.Pointer.fromPyobj(W)._ptr,
        <int *>hip._util.types.ListOfInt.fromPyobj(lwork)._ptr,
        <void *>hip._util.types.Pointer.fromPyobj(params)._ptr,batch_count))
    return (_hipsolverSsyevjBatched_bufferSize__retval,)


@cython.embedsignature(True)
def hipsolverDsyevjBatched_bufferSize(object handle, object jobz, object uplo, int n, object A, int lda, object W, object lwork, object params, int batch_count):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        jobz (`~.hipsolverEigMode_t`):
            (undocumented)

        uplo (`~.hipblasFillMode_t`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        A (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        W (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lwork (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)

        params (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        batch_count (`~.int`):
            (undocumented)
    """
    if not isinstance(jobz,_hipsolverEigMode_t__Base):
        raise TypeError("argument 'jobz' must be of type '_hipsolverEigMode_t__Base'")                    
    if not isinstance(uplo,_hipblasFillMode_t__Base):
        raise TypeError("argument 'uplo' must be of type '_hipblasFillMode_t__Base'")
    _hipsolverDsyevjBatched_bufferSize__retval = hipsolverStatus_t(chipsolver.hipsolverDsyevjBatched_bufferSize(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,jobz.value,uplo.value,n,
        <double *>hip._util.types.Pointer.fromPyobj(A)._ptr,lda,
        <double *>hip._util.types.Pointer.fromPyobj(W)._ptr,
        <int *>hip._util.types.ListOfInt.fromPyobj(lwork)._ptr,
        <void *>hip._util.types.Pointer.fromPyobj(params)._ptr,batch_count))
    return (_hipsolverDsyevjBatched_bufferSize__retval,)


@cython.embedsignature(True)
def hipsolverCheevjBatched_bufferSize(object handle, object jobz, object uplo, int n, object A, int lda, object W, object lwork, object params, int batch_count):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        jobz (`~.hipsolverEigMode_t`):
            (undocumented)

        uplo (`~.hipblasFillMode_t`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        A (`~.float2`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        W (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lwork (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)

        params (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        batch_count (`~.int`):
            (undocumented)
    """
    if not isinstance(jobz,_hipsolverEigMode_t__Base):
        raise TypeError("argument 'jobz' must be of type '_hipsolverEigMode_t__Base'")                    
    if not isinstance(uplo,_hipblasFillMode_t__Base):
        raise TypeError("argument 'uplo' must be of type '_hipblasFillMode_t__Base'")
    _hipsolverCheevjBatched_bufferSize__retval = hipsolverStatus_t(chipsolver.hipsolverCheevjBatched_bufferSize(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,jobz.value,uplo.value,n,
        float2.fromPyobj(A).getElementPtr(),lda,
        <float *>hip._util.types.Pointer.fromPyobj(W)._ptr,
        <int *>hip._util.types.ListOfInt.fromPyobj(lwork)._ptr,
        <void *>hip._util.types.Pointer.fromPyobj(params)._ptr,batch_count))
    return (_hipsolverCheevjBatched_bufferSize__retval,)


@cython.embedsignature(True)
def hipsolverZheevjBatched_bufferSize(object handle, object jobz, object uplo, int n, object A, int lda, object W, object lwork, object params, int batch_count):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        jobz (`~.hipsolverEigMode_t`):
            (undocumented)

        uplo (`~.hipblasFillMode_t`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        A (`~.double2`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        W (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lwork (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)

        params (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        batch_count (`~.int`):
            (undocumented)
    """
    if not isinstance(jobz,_hipsolverEigMode_t__Base):
        raise TypeError("argument 'jobz' must be of type '_hipsolverEigMode_t__Base'")                    
    if not isinstance(uplo,_hipblasFillMode_t__Base):
        raise TypeError("argument 'uplo' must be of type '_hipblasFillMode_t__Base'")
    _hipsolverZheevjBatched_bufferSize__retval = hipsolverStatus_t(chipsolver.hipsolverZheevjBatched_bufferSize(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,jobz.value,uplo.value,n,
        double2.fromPyobj(A).getElementPtr(),lda,
        <double *>hip._util.types.Pointer.fromPyobj(W)._ptr,
        <int *>hip._util.types.ListOfInt.fromPyobj(lwork)._ptr,
        <void *>hip._util.types.Pointer.fromPyobj(params)._ptr,batch_count))
    return (_hipsolverZheevjBatched_bufferSize__retval,)


@cython.embedsignature(True)
def hipsolverSsyevjBatched(object handle, object jobz, object uplo, int n, object A, int lda, object W, object work, int lwork, object devInfo, object params, int batch_count):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        jobz (`~.hipsolverEigMode_t`):
            (undocumented)

        uplo (`~.hipblasFillMode_t`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        A (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        W (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        work (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lwork (`~.int`):
            (undocumented)

        devInfo (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)

        params (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        batch_count (`~.int`):
            (undocumented)
    """
    if not isinstance(jobz,_hipsolverEigMode_t__Base):
        raise TypeError("argument 'jobz' must be of type '_hipsolverEigMode_t__Base'")                    
    if not isinstance(uplo,_hipblasFillMode_t__Base):
        raise TypeError("argument 'uplo' must be of type '_hipblasFillMode_t__Base'")
    _hipsolverSsyevjBatched__retval = hipsolverStatus_t(chipsolver.hipsolverSsyevjBatched(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,jobz.value,uplo.value,n,
        <float *>hip._util.types.Pointer.fromPyobj(A)._ptr,lda,
        <float *>hip._util.types.Pointer.fromPyobj(W)._ptr,
        <float *>hip._util.types.Pointer.fromPyobj(work)._ptr,lwork,
        <int *>hip._util.types.ListOfInt.fromPyobj(devInfo)._ptr,
        <void *>hip._util.types.Pointer.fromPyobj(params)._ptr,batch_count))
    return (_hipsolverSsyevjBatched__retval,)


@cython.embedsignature(True)
def hipsolverDsyevjBatched(object handle, object jobz, object uplo, int n, object A, int lda, object W, object work, int lwork, object devInfo, object params, int batch_count):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        jobz (`~.hipsolverEigMode_t`):
            (undocumented)

        uplo (`~.hipblasFillMode_t`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        A (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        W (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        work (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lwork (`~.int`):
            (undocumented)

        devInfo (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)

        params (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        batch_count (`~.int`):
            (undocumented)
    """
    if not isinstance(jobz,_hipsolverEigMode_t__Base):
        raise TypeError("argument 'jobz' must be of type '_hipsolverEigMode_t__Base'")                    
    if not isinstance(uplo,_hipblasFillMode_t__Base):
        raise TypeError("argument 'uplo' must be of type '_hipblasFillMode_t__Base'")
    _hipsolverDsyevjBatched__retval = hipsolverStatus_t(chipsolver.hipsolverDsyevjBatched(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,jobz.value,uplo.value,n,
        <double *>hip._util.types.Pointer.fromPyobj(A)._ptr,lda,
        <double *>hip._util.types.Pointer.fromPyobj(W)._ptr,
        <double *>hip._util.types.Pointer.fromPyobj(work)._ptr,lwork,
        <int *>hip._util.types.ListOfInt.fromPyobj(devInfo)._ptr,
        <void *>hip._util.types.Pointer.fromPyobj(params)._ptr,batch_count))
    return (_hipsolverDsyevjBatched__retval,)


@cython.embedsignature(True)
def hipsolverCheevjBatched(object handle, object jobz, object uplo, int n, object A, int lda, object W, object work, int lwork, object devInfo, object params, int batch_count):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        jobz (`~.hipsolverEigMode_t`):
            (undocumented)

        uplo (`~.hipblasFillMode_t`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        A (`~.float2`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        W (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        work (`~.float2`/`~.object`):
            (undocumented)

        lwork (`~.int`):
            (undocumented)

        devInfo (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)

        params (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        batch_count (`~.int`):
            (undocumented)
    """
    if not isinstance(jobz,_hipsolverEigMode_t__Base):
        raise TypeError("argument 'jobz' must be of type '_hipsolverEigMode_t__Base'")                    
    if not isinstance(uplo,_hipblasFillMode_t__Base):
        raise TypeError("argument 'uplo' must be of type '_hipblasFillMode_t__Base'")
    _hipsolverCheevjBatched__retval = hipsolverStatus_t(chipsolver.hipsolverCheevjBatched(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,jobz.value,uplo.value,n,
        float2.fromPyobj(A).getElementPtr(),lda,
        <float *>hip._util.types.Pointer.fromPyobj(W)._ptr,
        float2.fromPyobj(work).getElementPtr(),lwork,
        <int *>hip._util.types.ListOfInt.fromPyobj(devInfo)._ptr,
        <void *>hip._util.types.Pointer.fromPyobj(params)._ptr,batch_count))
    return (_hipsolverCheevjBatched__retval,)


@cython.embedsignature(True)
def hipsolverZheevjBatched(object handle, object jobz, object uplo, int n, object A, int lda, object W, object work, int lwork, object devInfo, object params, int batch_count):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        jobz (`~.hipsolverEigMode_t`):
            (undocumented)

        uplo (`~.hipblasFillMode_t`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        A (`~.double2`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        W (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        work (`~.double2`/`~.object`):
            (undocumented)

        lwork (`~.int`):
            (undocumented)

        devInfo (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)

        params (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        batch_count (`~.int`):
            (undocumented)
    """
    if not isinstance(jobz,_hipsolverEigMode_t__Base):
        raise TypeError("argument 'jobz' must be of type '_hipsolverEigMode_t__Base'")                    
    if not isinstance(uplo,_hipblasFillMode_t__Base):
        raise TypeError("argument 'uplo' must be of type '_hipblasFillMode_t__Base'")
    _hipsolverZheevjBatched__retval = hipsolverStatus_t(chipsolver.hipsolverZheevjBatched(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,jobz.value,uplo.value,n,
        double2.fromPyobj(A).getElementPtr(),lda,
        <double *>hip._util.types.Pointer.fromPyobj(W)._ptr,
        double2.fromPyobj(work).getElementPtr(),lwork,
        <int *>hip._util.types.ListOfInt.fromPyobj(devInfo)._ptr,
        <void *>hip._util.types.Pointer.fromPyobj(params)._ptr,batch_count))
    return (_hipsolverZheevjBatched__retval,)


@cython.embedsignature(True)
def hipsolverSsygvd_bufferSize(object handle, object itype, object jobz, object uplo, int n, object A, int lda, object B, int ldb, object W, object lwork):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        itype (`~.hipsolverEigType_t`):
            (undocumented)

        jobz (`~.hipsolverEigMode_t`):
            (undocumented)

        uplo (`~.hipblasFillMode_t`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        A (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        B (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        ldb (`~.int`):
            (undocumented)

        W (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lwork (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)
    """
    if not isinstance(itype,_hipsolverEigType_t__Base):
        raise TypeError("argument 'itype' must be of type '_hipsolverEigType_t__Base'")                    
    if not isinstance(jobz,_hipsolverEigMode_t__Base):
        raise TypeError("argument 'jobz' must be of type '_hipsolverEigMode_t__Base'")                    
    if not isinstance(uplo,_hipblasFillMode_t__Base):
        raise TypeError("argument 'uplo' must be of type '_hipblasFillMode_t__Base'")
    _hipsolverSsygvd_bufferSize__retval = hipsolverStatus_t(chipsolver.hipsolverSsygvd_bufferSize(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,itype.value,jobz.value,uplo.value,n,
        <float *>hip._util.types.Pointer.fromPyobj(A)._ptr,lda,
        <float *>hip._util.types.Pointer.fromPyobj(B)._ptr,ldb,
        <float *>hip._util.types.Pointer.fromPyobj(W)._ptr,
        <int *>hip._util.types.ListOfInt.fromPyobj(lwork)._ptr))
    return (_hipsolverSsygvd_bufferSize__retval,)


@cython.embedsignature(True)
def hipsolverDsygvd_bufferSize(object handle, object itype, object jobz, object uplo, int n, object A, int lda, object B, int ldb, object W, object lwork):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        itype (`~.hipsolverEigType_t`):
            (undocumented)

        jobz (`~.hipsolverEigMode_t`):
            (undocumented)

        uplo (`~.hipblasFillMode_t`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        A (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        B (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        ldb (`~.int`):
            (undocumented)

        W (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lwork (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)
    """
    if not isinstance(itype,_hipsolverEigType_t__Base):
        raise TypeError("argument 'itype' must be of type '_hipsolverEigType_t__Base'")                    
    if not isinstance(jobz,_hipsolverEigMode_t__Base):
        raise TypeError("argument 'jobz' must be of type '_hipsolverEigMode_t__Base'")                    
    if not isinstance(uplo,_hipblasFillMode_t__Base):
        raise TypeError("argument 'uplo' must be of type '_hipblasFillMode_t__Base'")
    _hipsolverDsygvd_bufferSize__retval = hipsolverStatus_t(chipsolver.hipsolverDsygvd_bufferSize(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,itype.value,jobz.value,uplo.value,n,
        <double *>hip._util.types.Pointer.fromPyobj(A)._ptr,lda,
        <double *>hip._util.types.Pointer.fromPyobj(B)._ptr,ldb,
        <double *>hip._util.types.Pointer.fromPyobj(W)._ptr,
        <int *>hip._util.types.ListOfInt.fromPyobj(lwork)._ptr))
    return (_hipsolverDsygvd_bufferSize__retval,)


@cython.embedsignature(True)
def hipsolverChegvd_bufferSize(object handle, object itype, object jobz, object uplo, int n, object A, int lda, object B, int ldb, object W, object lwork):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        itype (`~.hipsolverEigType_t`):
            (undocumented)

        jobz (`~.hipsolverEigMode_t`):
            (undocumented)

        uplo (`~.hipblasFillMode_t`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        A (`~.float2`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        B (`~.float2`/`~.object`):
            (undocumented)

        ldb (`~.int`):
            (undocumented)

        W (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lwork (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)
    """
    if not isinstance(itype,_hipsolverEigType_t__Base):
        raise TypeError("argument 'itype' must be of type '_hipsolverEigType_t__Base'")                    
    if not isinstance(jobz,_hipsolverEigMode_t__Base):
        raise TypeError("argument 'jobz' must be of type '_hipsolverEigMode_t__Base'")                    
    if not isinstance(uplo,_hipblasFillMode_t__Base):
        raise TypeError("argument 'uplo' must be of type '_hipblasFillMode_t__Base'")
    _hipsolverChegvd_bufferSize__retval = hipsolverStatus_t(chipsolver.hipsolverChegvd_bufferSize(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,itype.value,jobz.value,uplo.value,n,
        float2.fromPyobj(A).getElementPtr(),lda,
        float2.fromPyobj(B).getElementPtr(),ldb,
        <float *>hip._util.types.Pointer.fromPyobj(W)._ptr,
        <int *>hip._util.types.ListOfInt.fromPyobj(lwork)._ptr))
    return (_hipsolverChegvd_bufferSize__retval,)


@cython.embedsignature(True)
def hipsolverZhegvd_bufferSize(object handle, object itype, object jobz, object uplo, int n, object A, int lda, object B, int ldb, object W, object lwork):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        itype (`~.hipsolverEigType_t`):
            (undocumented)

        jobz (`~.hipsolverEigMode_t`):
            (undocumented)

        uplo (`~.hipblasFillMode_t`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        A (`~.double2`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        B (`~.double2`/`~.object`):
            (undocumented)

        ldb (`~.int`):
            (undocumented)

        W (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lwork (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)
    """
    if not isinstance(itype,_hipsolverEigType_t__Base):
        raise TypeError("argument 'itype' must be of type '_hipsolverEigType_t__Base'")                    
    if not isinstance(jobz,_hipsolverEigMode_t__Base):
        raise TypeError("argument 'jobz' must be of type '_hipsolverEigMode_t__Base'")                    
    if not isinstance(uplo,_hipblasFillMode_t__Base):
        raise TypeError("argument 'uplo' must be of type '_hipblasFillMode_t__Base'")
    _hipsolverZhegvd_bufferSize__retval = hipsolverStatus_t(chipsolver.hipsolverZhegvd_bufferSize(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,itype.value,jobz.value,uplo.value,n,
        double2.fromPyobj(A).getElementPtr(),lda,
        double2.fromPyobj(B).getElementPtr(),ldb,
        <double *>hip._util.types.Pointer.fromPyobj(W)._ptr,
        <int *>hip._util.types.ListOfInt.fromPyobj(lwork)._ptr))
    return (_hipsolverZhegvd_bufferSize__retval,)


@cython.embedsignature(True)
def hipsolverSsygvd(object handle, object itype, object jobz, object uplo, int n, object A, int lda, object B, int ldb, object W, object work, int lwork, object devInfo):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        itype (`~.hipsolverEigType_t`):
            (undocumented)

        jobz (`~.hipsolverEigMode_t`):
            (undocumented)

        uplo (`~.hipblasFillMode_t`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        A (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        B (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        ldb (`~.int`):
            (undocumented)

        W (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        work (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lwork (`~.int`):
            (undocumented)

        devInfo (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)
    """
    if not isinstance(itype,_hipsolverEigType_t__Base):
        raise TypeError("argument 'itype' must be of type '_hipsolverEigType_t__Base'")                    
    if not isinstance(jobz,_hipsolverEigMode_t__Base):
        raise TypeError("argument 'jobz' must be of type '_hipsolverEigMode_t__Base'")                    
    if not isinstance(uplo,_hipblasFillMode_t__Base):
        raise TypeError("argument 'uplo' must be of type '_hipblasFillMode_t__Base'")
    _hipsolverSsygvd__retval = hipsolverStatus_t(chipsolver.hipsolverSsygvd(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,itype.value,jobz.value,uplo.value,n,
        <float *>hip._util.types.Pointer.fromPyobj(A)._ptr,lda,
        <float *>hip._util.types.Pointer.fromPyobj(B)._ptr,ldb,
        <float *>hip._util.types.Pointer.fromPyobj(W)._ptr,
        <float *>hip._util.types.Pointer.fromPyobj(work)._ptr,lwork,
        <int *>hip._util.types.ListOfInt.fromPyobj(devInfo)._ptr))
    return (_hipsolverSsygvd__retval,)


@cython.embedsignature(True)
def hipsolverDsygvd(object handle, object itype, object jobz, object uplo, int n, object A, int lda, object B, int ldb, object W, object work, int lwork, object devInfo):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        itype (`~.hipsolverEigType_t`):
            (undocumented)

        jobz (`~.hipsolverEigMode_t`):
            (undocumented)

        uplo (`~.hipblasFillMode_t`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        A (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        B (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        ldb (`~.int`):
            (undocumented)

        W (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        work (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lwork (`~.int`):
            (undocumented)

        devInfo (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)
    """
    if not isinstance(itype,_hipsolverEigType_t__Base):
        raise TypeError("argument 'itype' must be of type '_hipsolverEigType_t__Base'")                    
    if not isinstance(jobz,_hipsolverEigMode_t__Base):
        raise TypeError("argument 'jobz' must be of type '_hipsolverEigMode_t__Base'")                    
    if not isinstance(uplo,_hipblasFillMode_t__Base):
        raise TypeError("argument 'uplo' must be of type '_hipblasFillMode_t__Base'")
    _hipsolverDsygvd__retval = hipsolverStatus_t(chipsolver.hipsolverDsygvd(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,itype.value,jobz.value,uplo.value,n,
        <double *>hip._util.types.Pointer.fromPyobj(A)._ptr,lda,
        <double *>hip._util.types.Pointer.fromPyobj(B)._ptr,ldb,
        <double *>hip._util.types.Pointer.fromPyobj(W)._ptr,
        <double *>hip._util.types.Pointer.fromPyobj(work)._ptr,lwork,
        <int *>hip._util.types.ListOfInt.fromPyobj(devInfo)._ptr))
    return (_hipsolverDsygvd__retval,)


@cython.embedsignature(True)
def hipsolverChegvd(object handle, object itype, object jobz, object uplo, int n, object A, int lda, object B, int ldb, object W, object work, int lwork, object devInfo):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        itype (`~.hipsolverEigType_t`):
            (undocumented)

        jobz (`~.hipsolverEigMode_t`):
            (undocumented)

        uplo (`~.hipblasFillMode_t`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        A (`~.float2`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        B (`~.float2`/`~.object`):
            (undocumented)

        ldb (`~.int`):
            (undocumented)

        W (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        work (`~.float2`/`~.object`):
            (undocumented)

        lwork (`~.int`):
            (undocumented)

        devInfo (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)
    """
    if not isinstance(itype,_hipsolverEigType_t__Base):
        raise TypeError("argument 'itype' must be of type '_hipsolverEigType_t__Base'")                    
    if not isinstance(jobz,_hipsolverEigMode_t__Base):
        raise TypeError("argument 'jobz' must be of type '_hipsolverEigMode_t__Base'")                    
    if not isinstance(uplo,_hipblasFillMode_t__Base):
        raise TypeError("argument 'uplo' must be of type '_hipblasFillMode_t__Base'")
    _hipsolverChegvd__retval = hipsolverStatus_t(chipsolver.hipsolverChegvd(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,itype.value,jobz.value,uplo.value,n,
        float2.fromPyobj(A).getElementPtr(),lda,
        float2.fromPyobj(B).getElementPtr(),ldb,
        <float *>hip._util.types.Pointer.fromPyobj(W)._ptr,
        float2.fromPyobj(work).getElementPtr(),lwork,
        <int *>hip._util.types.ListOfInt.fromPyobj(devInfo)._ptr))
    return (_hipsolverChegvd__retval,)


@cython.embedsignature(True)
def hipsolverZhegvd(object handle, object itype, object jobz, object uplo, int n, object A, int lda, object B, int ldb, object W, object work, int lwork, object devInfo):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        itype (`~.hipsolverEigType_t`):
            (undocumented)

        jobz (`~.hipsolverEigMode_t`):
            (undocumented)

        uplo (`~.hipblasFillMode_t`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        A (`~.double2`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        B (`~.double2`/`~.object`):
            (undocumented)

        ldb (`~.int`):
            (undocumented)

        W (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        work (`~.double2`/`~.object`):
            (undocumented)

        lwork (`~.int`):
            (undocumented)

        devInfo (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)
    """
    if not isinstance(itype,_hipsolverEigType_t__Base):
        raise TypeError("argument 'itype' must be of type '_hipsolverEigType_t__Base'")                    
    if not isinstance(jobz,_hipsolverEigMode_t__Base):
        raise TypeError("argument 'jobz' must be of type '_hipsolverEigMode_t__Base'")                    
    if not isinstance(uplo,_hipblasFillMode_t__Base):
        raise TypeError("argument 'uplo' must be of type '_hipblasFillMode_t__Base'")
    _hipsolverZhegvd__retval = hipsolverStatus_t(chipsolver.hipsolverZhegvd(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,itype.value,jobz.value,uplo.value,n,
        double2.fromPyobj(A).getElementPtr(),lda,
        double2.fromPyobj(B).getElementPtr(),ldb,
        <double *>hip._util.types.Pointer.fromPyobj(W)._ptr,
        double2.fromPyobj(work).getElementPtr(),lwork,
        <int *>hip._util.types.ListOfInt.fromPyobj(devInfo)._ptr))
    return (_hipsolverZhegvd__retval,)


@cython.embedsignature(True)
def hipsolverSsygvj_bufferSize(object handle, object itype, object jobz, object uplo, int n, object A, int lda, object B, int ldb, object W, object lwork, object params):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        itype (`~.hipsolverEigType_t`):
            (undocumented)

        jobz (`~.hipsolverEigMode_t`):
            (undocumented)

        uplo (`~.hipblasFillMode_t`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        A (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        B (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        ldb (`~.int`):
            (undocumented)

        W (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lwork (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)

        params (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)
    """
    if not isinstance(itype,_hipsolverEigType_t__Base):
        raise TypeError("argument 'itype' must be of type '_hipsolverEigType_t__Base'")                    
    if not isinstance(jobz,_hipsolverEigMode_t__Base):
        raise TypeError("argument 'jobz' must be of type '_hipsolverEigMode_t__Base'")                    
    if not isinstance(uplo,_hipblasFillMode_t__Base):
        raise TypeError("argument 'uplo' must be of type '_hipblasFillMode_t__Base'")
    _hipsolverSsygvj_bufferSize__retval = hipsolverStatus_t(chipsolver.hipsolverSsygvj_bufferSize(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,itype.value,jobz.value,uplo.value,n,
        <float *>hip._util.types.Pointer.fromPyobj(A)._ptr,lda,
        <float *>hip._util.types.Pointer.fromPyobj(B)._ptr,ldb,
        <float *>hip._util.types.Pointer.fromPyobj(W)._ptr,
        <int *>hip._util.types.ListOfInt.fromPyobj(lwork)._ptr,
        <void *>hip._util.types.Pointer.fromPyobj(params)._ptr))
    return (_hipsolverSsygvj_bufferSize__retval,)


@cython.embedsignature(True)
def hipsolverDsygvj_bufferSize(object handle, object itype, object jobz, object uplo, int n, object A, int lda, object B, int ldb, object W, object lwork, object params):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        itype (`~.hipsolverEigType_t`):
            (undocumented)

        jobz (`~.hipsolverEigMode_t`):
            (undocumented)

        uplo (`~.hipblasFillMode_t`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        A (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        B (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        ldb (`~.int`):
            (undocumented)

        W (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lwork (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)

        params (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)
    """
    if not isinstance(itype,_hipsolverEigType_t__Base):
        raise TypeError("argument 'itype' must be of type '_hipsolverEigType_t__Base'")                    
    if not isinstance(jobz,_hipsolverEigMode_t__Base):
        raise TypeError("argument 'jobz' must be of type '_hipsolverEigMode_t__Base'")                    
    if not isinstance(uplo,_hipblasFillMode_t__Base):
        raise TypeError("argument 'uplo' must be of type '_hipblasFillMode_t__Base'")
    _hipsolverDsygvj_bufferSize__retval = hipsolverStatus_t(chipsolver.hipsolverDsygvj_bufferSize(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,itype.value,jobz.value,uplo.value,n,
        <double *>hip._util.types.Pointer.fromPyobj(A)._ptr,lda,
        <double *>hip._util.types.Pointer.fromPyobj(B)._ptr,ldb,
        <double *>hip._util.types.Pointer.fromPyobj(W)._ptr,
        <int *>hip._util.types.ListOfInt.fromPyobj(lwork)._ptr,
        <void *>hip._util.types.Pointer.fromPyobj(params)._ptr))
    return (_hipsolverDsygvj_bufferSize__retval,)


@cython.embedsignature(True)
def hipsolverChegvj_bufferSize(object handle, object itype, object jobz, object uplo, int n, object A, int lda, object B, int ldb, object W, object lwork, object params):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        itype (`~.hipsolverEigType_t`):
            (undocumented)

        jobz (`~.hipsolverEigMode_t`):
            (undocumented)

        uplo (`~.hipblasFillMode_t`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        A (`~.float2`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        B (`~.float2`/`~.object`):
            (undocumented)

        ldb (`~.int`):
            (undocumented)

        W (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lwork (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)

        params (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)
    """
    if not isinstance(itype,_hipsolverEigType_t__Base):
        raise TypeError("argument 'itype' must be of type '_hipsolverEigType_t__Base'")                    
    if not isinstance(jobz,_hipsolverEigMode_t__Base):
        raise TypeError("argument 'jobz' must be of type '_hipsolverEigMode_t__Base'")                    
    if not isinstance(uplo,_hipblasFillMode_t__Base):
        raise TypeError("argument 'uplo' must be of type '_hipblasFillMode_t__Base'")
    _hipsolverChegvj_bufferSize__retval = hipsolverStatus_t(chipsolver.hipsolverChegvj_bufferSize(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,itype.value,jobz.value,uplo.value,n,
        float2.fromPyobj(A).getElementPtr(),lda,
        float2.fromPyobj(B).getElementPtr(),ldb,
        <float *>hip._util.types.Pointer.fromPyobj(W)._ptr,
        <int *>hip._util.types.ListOfInt.fromPyobj(lwork)._ptr,
        <void *>hip._util.types.Pointer.fromPyobj(params)._ptr))
    return (_hipsolverChegvj_bufferSize__retval,)


@cython.embedsignature(True)
def hipsolverZhegvj_bufferSize(object handle, object itype, object jobz, object uplo, int n, object A, int lda, object B, int ldb, object W, object lwork, object params):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        itype (`~.hipsolverEigType_t`):
            (undocumented)

        jobz (`~.hipsolverEigMode_t`):
            (undocumented)

        uplo (`~.hipblasFillMode_t`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        A (`~.double2`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        B (`~.double2`/`~.object`):
            (undocumented)

        ldb (`~.int`):
            (undocumented)

        W (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lwork (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)

        params (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)
    """
    if not isinstance(itype,_hipsolverEigType_t__Base):
        raise TypeError("argument 'itype' must be of type '_hipsolverEigType_t__Base'")                    
    if not isinstance(jobz,_hipsolverEigMode_t__Base):
        raise TypeError("argument 'jobz' must be of type '_hipsolverEigMode_t__Base'")                    
    if not isinstance(uplo,_hipblasFillMode_t__Base):
        raise TypeError("argument 'uplo' must be of type '_hipblasFillMode_t__Base'")
    _hipsolverZhegvj_bufferSize__retval = hipsolverStatus_t(chipsolver.hipsolverZhegvj_bufferSize(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,itype.value,jobz.value,uplo.value,n,
        double2.fromPyobj(A).getElementPtr(),lda,
        double2.fromPyobj(B).getElementPtr(),ldb,
        <double *>hip._util.types.Pointer.fromPyobj(W)._ptr,
        <int *>hip._util.types.ListOfInt.fromPyobj(lwork)._ptr,
        <void *>hip._util.types.Pointer.fromPyobj(params)._ptr))
    return (_hipsolverZhegvj_bufferSize__retval,)


@cython.embedsignature(True)
def hipsolverSsygvj(object handle, object itype, object jobz, object uplo, int n, object A, int lda, object B, int ldb, object W, object work, int lwork, object devInfo, object params):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        itype (`~.hipsolverEigType_t`):
            (undocumented)

        jobz (`~.hipsolverEigMode_t`):
            (undocumented)

        uplo (`~.hipblasFillMode_t`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        A (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        B (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        ldb (`~.int`):
            (undocumented)

        W (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        work (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lwork (`~.int`):
            (undocumented)

        devInfo (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)

        params (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)
    """
    if not isinstance(itype,_hipsolverEigType_t__Base):
        raise TypeError("argument 'itype' must be of type '_hipsolverEigType_t__Base'")                    
    if not isinstance(jobz,_hipsolverEigMode_t__Base):
        raise TypeError("argument 'jobz' must be of type '_hipsolverEigMode_t__Base'")                    
    if not isinstance(uplo,_hipblasFillMode_t__Base):
        raise TypeError("argument 'uplo' must be of type '_hipblasFillMode_t__Base'")
    _hipsolverSsygvj__retval = hipsolverStatus_t(chipsolver.hipsolverSsygvj(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,itype.value,jobz.value,uplo.value,n,
        <float *>hip._util.types.Pointer.fromPyobj(A)._ptr,lda,
        <float *>hip._util.types.Pointer.fromPyobj(B)._ptr,ldb,
        <float *>hip._util.types.Pointer.fromPyobj(W)._ptr,
        <float *>hip._util.types.Pointer.fromPyobj(work)._ptr,lwork,
        <int *>hip._util.types.ListOfInt.fromPyobj(devInfo)._ptr,
        <void *>hip._util.types.Pointer.fromPyobj(params)._ptr))
    return (_hipsolverSsygvj__retval,)


@cython.embedsignature(True)
def hipsolverDsygvj(object handle, object itype, object jobz, object uplo, int n, object A, int lda, object B, int ldb, object W, object work, int lwork, object devInfo, object params):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        itype (`~.hipsolverEigType_t`):
            (undocumented)

        jobz (`~.hipsolverEigMode_t`):
            (undocumented)

        uplo (`~.hipblasFillMode_t`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        A (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        B (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        ldb (`~.int`):
            (undocumented)

        W (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        work (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lwork (`~.int`):
            (undocumented)

        devInfo (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)

        params (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)
    """
    if not isinstance(itype,_hipsolverEigType_t__Base):
        raise TypeError("argument 'itype' must be of type '_hipsolverEigType_t__Base'")                    
    if not isinstance(jobz,_hipsolverEigMode_t__Base):
        raise TypeError("argument 'jobz' must be of type '_hipsolverEigMode_t__Base'")                    
    if not isinstance(uplo,_hipblasFillMode_t__Base):
        raise TypeError("argument 'uplo' must be of type '_hipblasFillMode_t__Base'")
    _hipsolverDsygvj__retval = hipsolverStatus_t(chipsolver.hipsolverDsygvj(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,itype.value,jobz.value,uplo.value,n,
        <double *>hip._util.types.Pointer.fromPyobj(A)._ptr,lda,
        <double *>hip._util.types.Pointer.fromPyobj(B)._ptr,ldb,
        <double *>hip._util.types.Pointer.fromPyobj(W)._ptr,
        <double *>hip._util.types.Pointer.fromPyobj(work)._ptr,lwork,
        <int *>hip._util.types.ListOfInt.fromPyobj(devInfo)._ptr,
        <void *>hip._util.types.Pointer.fromPyobj(params)._ptr))
    return (_hipsolverDsygvj__retval,)


@cython.embedsignature(True)
def hipsolverChegvj(object handle, object itype, object jobz, object uplo, int n, object A, int lda, object B, int ldb, object W, object work, int lwork, object devInfo, object params):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        itype (`~.hipsolverEigType_t`):
            (undocumented)

        jobz (`~.hipsolverEigMode_t`):
            (undocumented)

        uplo (`~.hipblasFillMode_t`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        A (`~.float2`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        B (`~.float2`/`~.object`):
            (undocumented)

        ldb (`~.int`):
            (undocumented)

        W (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        work (`~.float2`/`~.object`):
            (undocumented)

        lwork (`~.int`):
            (undocumented)

        devInfo (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)

        params (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)
    """
    if not isinstance(itype,_hipsolverEigType_t__Base):
        raise TypeError("argument 'itype' must be of type '_hipsolverEigType_t__Base'")                    
    if not isinstance(jobz,_hipsolverEigMode_t__Base):
        raise TypeError("argument 'jobz' must be of type '_hipsolverEigMode_t__Base'")                    
    if not isinstance(uplo,_hipblasFillMode_t__Base):
        raise TypeError("argument 'uplo' must be of type '_hipblasFillMode_t__Base'")
    _hipsolverChegvj__retval = hipsolverStatus_t(chipsolver.hipsolverChegvj(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,itype.value,jobz.value,uplo.value,n,
        float2.fromPyobj(A).getElementPtr(),lda,
        float2.fromPyobj(B).getElementPtr(),ldb,
        <float *>hip._util.types.Pointer.fromPyobj(W)._ptr,
        float2.fromPyobj(work).getElementPtr(),lwork,
        <int *>hip._util.types.ListOfInt.fromPyobj(devInfo)._ptr,
        <void *>hip._util.types.Pointer.fromPyobj(params)._ptr))
    return (_hipsolverChegvj__retval,)


@cython.embedsignature(True)
def hipsolverZhegvj(object handle, object itype, object jobz, object uplo, int n, object A, int lda, object B, int ldb, object W, object work, int lwork, object devInfo, object params):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        itype (`~.hipsolverEigType_t`):
            (undocumented)

        jobz (`~.hipsolverEigMode_t`):
            (undocumented)

        uplo (`~.hipblasFillMode_t`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        A (`~.double2`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        B (`~.double2`/`~.object`):
            (undocumented)

        ldb (`~.int`):
            (undocumented)

        W (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        work (`~.double2`/`~.object`):
            (undocumented)

        lwork (`~.int`):
            (undocumented)

        devInfo (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)

        params (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)
    """
    if not isinstance(itype,_hipsolverEigType_t__Base):
        raise TypeError("argument 'itype' must be of type '_hipsolverEigType_t__Base'")                    
    if not isinstance(jobz,_hipsolverEigMode_t__Base):
        raise TypeError("argument 'jobz' must be of type '_hipsolverEigMode_t__Base'")                    
    if not isinstance(uplo,_hipblasFillMode_t__Base):
        raise TypeError("argument 'uplo' must be of type '_hipblasFillMode_t__Base'")
    _hipsolverZhegvj__retval = hipsolverStatus_t(chipsolver.hipsolverZhegvj(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,itype.value,jobz.value,uplo.value,n,
        double2.fromPyobj(A).getElementPtr(),lda,
        double2.fromPyobj(B).getElementPtr(),ldb,
        <double *>hip._util.types.Pointer.fromPyobj(W)._ptr,
        double2.fromPyobj(work).getElementPtr(),lwork,
        <int *>hip._util.types.ListOfInt.fromPyobj(devInfo)._ptr,
        <void *>hip._util.types.Pointer.fromPyobj(params)._ptr))
    return (_hipsolverZhegvj__retval,)


@cython.embedsignature(True)
def hipsolverSsytrd_bufferSize(object handle, object uplo, int n, object A, int lda, object D, object E, object tau, object lwork):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        uplo (`~.hipblasFillMode_t`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        A (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        D (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        E (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        tau (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lwork (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)
    """
    if not isinstance(uplo,_hipblasFillMode_t__Base):
        raise TypeError("argument 'uplo' must be of type '_hipblasFillMode_t__Base'")
    _hipsolverSsytrd_bufferSize__retval = hipsolverStatus_t(chipsolver.hipsolverSsytrd_bufferSize(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,uplo.value,n,
        <float *>hip._util.types.Pointer.fromPyobj(A)._ptr,lda,
        <float *>hip._util.types.Pointer.fromPyobj(D)._ptr,
        <float *>hip._util.types.Pointer.fromPyobj(E)._ptr,
        <float *>hip._util.types.Pointer.fromPyobj(tau)._ptr,
        <int *>hip._util.types.ListOfInt.fromPyobj(lwork)._ptr))
    return (_hipsolverSsytrd_bufferSize__retval,)


@cython.embedsignature(True)
def hipsolverDsytrd_bufferSize(object handle, object uplo, int n, object A, int lda, object D, object E, object tau, object lwork):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        uplo (`~.hipblasFillMode_t`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        A (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        D (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        E (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        tau (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lwork (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)
    """
    if not isinstance(uplo,_hipblasFillMode_t__Base):
        raise TypeError("argument 'uplo' must be of type '_hipblasFillMode_t__Base'")
    _hipsolverDsytrd_bufferSize__retval = hipsolverStatus_t(chipsolver.hipsolverDsytrd_bufferSize(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,uplo.value,n,
        <double *>hip._util.types.Pointer.fromPyobj(A)._ptr,lda,
        <double *>hip._util.types.Pointer.fromPyobj(D)._ptr,
        <double *>hip._util.types.Pointer.fromPyobj(E)._ptr,
        <double *>hip._util.types.Pointer.fromPyobj(tau)._ptr,
        <int *>hip._util.types.ListOfInt.fromPyobj(lwork)._ptr))
    return (_hipsolverDsytrd_bufferSize__retval,)


@cython.embedsignature(True)
def hipsolverChetrd_bufferSize(object handle, object uplo, int n, object A, int lda, object D, object E, object tau, object lwork):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        uplo (`~.hipblasFillMode_t`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        A (`~.float2`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        D (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        E (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        tau (`~.float2`/`~.object`):
            (undocumented)

        lwork (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)
    """
    if not isinstance(uplo,_hipblasFillMode_t__Base):
        raise TypeError("argument 'uplo' must be of type '_hipblasFillMode_t__Base'")
    _hipsolverChetrd_bufferSize__retval = hipsolverStatus_t(chipsolver.hipsolverChetrd_bufferSize(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,uplo.value,n,
        float2.fromPyobj(A).getElementPtr(),lda,
        <float *>hip._util.types.Pointer.fromPyobj(D)._ptr,
        <float *>hip._util.types.Pointer.fromPyobj(E)._ptr,
        float2.fromPyobj(tau).getElementPtr(),
        <int *>hip._util.types.ListOfInt.fromPyobj(lwork)._ptr))
    return (_hipsolverChetrd_bufferSize__retval,)


@cython.embedsignature(True)
def hipsolverZhetrd_bufferSize(object handle, object uplo, int n, object A, int lda, object D, object E, object tau, object lwork):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        uplo (`~.hipblasFillMode_t`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        A (`~.double2`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        D (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        E (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        tau (`~.double2`/`~.object`):
            (undocumented)

        lwork (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)
    """
    if not isinstance(uplo,_hipblasFillMode_t__Base):
        raise TypeError("argument 'uplo' must be of type '_hipblasFillMode_t__Base'")
    _hipsolverZhetrd_bufferSize__retval = hipsolverStatus_t(chipsolver.hipsolverZhetrd_bufferSize(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,uplo.value,n,
        double2.fromPyobj(A).getElementPtr(),lda,
        <double *>hip._util.types.Pointer.fromPyobj(D)._ptr,
        <double *>hip._util.types.Pointer.fromPyobj(E)._ptr,
        double2.fromPyobj(tau).getElementPtr(),
        <int *>hip._util.types.ListOfInt.fromPyobj(lwork)._ptr))
    return (_hipsolverZhetrd_bufferSize__retval,)


@cython.embedsignature(True)
def hipsolverSsytrd(object handle, object uplo, int n, object A, int lda, object D, object E, object tau, object work, int lwork, object devInfo):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        uplo (`~.hipblasFillMode_t`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        A (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        D (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        E (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        tau (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        work (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lwork (`~.int`):
            (undocumented)

        devInfo (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)
    """
    if not isinstance(uplo,_hipblasFillMode_t__Base):
        raise TypeError("argument 'uplo' must be of type '_hipblasFillMode_t__Base'")
    _hipsolverSsytrd__retval = hipsolverStatus_t(chipsolver.hipsolverSsytrd(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,uplo.value,n,
        <float *>hip._util.types.Pointer.fromPyobj(A)._ptr,lda,
        <float *>hip._util.types.Pointer.fromPyobj(D)._ptr,
        <float *>hip._util.types.Pointer.fromPyobj(E)._ptr,
        <float *>hip._util.types.Pointer.fromPyobj(tau)._ptr,
        <float *>hip._util.types.Pointer.fromPyobj(work)._ptr,lwork,
        <int *>hip._util.types.ListOfInt.fromPyobj(devInfo)._ptr))
    return (_hipsolverSsytrd__retval,)


@cython.embedsignature(True)
def hipsolverDsytrd(object handle, object uplo, int n, object A, int lda, object D, object E, object tau, object work, int lwork, object devInfo):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        uplo (`~.hipblasFillMode_t`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        A (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        D (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        E (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        tau (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        work (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lwork (`~.int`):
            (undocumented)

        devInfo (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)
    """
    if not isinstance(uplo,_hipblasFillMode_t__Base):
        raise TypeError("argument 'uplo' must be of type '_hipblasFillMode_t__Base'")
    _hipsolverDsytrd__retval = hipsolverStatus_t(chipsolver.hipsolverDsytrd(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,uplo.value,n,
        <double *>hip._util.types.Pointer.fromPyobj(A)._ptr,lda,
        <double *>hip._util.types.Pointer.fromPyobj(D)._ptr,
        <double *>hip._util.types.Pointer.fromPyobj(E)._ptr,
        <double *>hip._util.types.Pointer.fromPyobj(tau)._ptr,
        <double *>hip._util.types.Pointer.fromPyobj(work)._ptr,lwork,
        <int *>hip._util.types.ListOfInt.fromPyobj(devInfo)._ptr))
    return (_hipsolverDsytrd__retval,)


@cython.embedsignature(True)
def hipsolverChetrd(object handle, object uplo, int n, object A, int lda, object D, object E, object tau, object work, int lwork, object devInfo):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        uplo (`~.hipblasFillMode_t`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        A (`~.float2`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        D (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        E (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        tau (`~.float2`/`~.object`):
            (undocumented)

        work (`~.float2`/`~.object`):
            (undocumented)

        lwork (`~.int`):
            (undocumented)

        devInfo (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)
    """
    if not isinstance(uplo,_hipblasFillMode_t__Base):
        raise TypeError("argument 'uplo' must be of type '_hipblasFillMode_t__Base'")
    _hipsolverChetrd__retval = hipsolverStatus_t(chipsolver.hipsolverChetrd(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,uplo.value,n,
        float2.fromPyobj(A).getElementPtr(),lda,
        <float *>hip._util.types.Pointer.fromPyobj(D)._ptr,
        <float *>hip._util.types.Pointer.fromPyobj(E)._ptr,
        float2.fromPyobj(tau).getElementPtr(),
        float2.fromPyobj(work).getElementPtr(),lwork,
        <int *>hip._util.types.ListOfInt.fromPyobj(devInfo)._ptr))
    return (_hipsolverChetrd__retval,)


@cython.embedsignature(True)
def hipsolverZhetrd(object handle, object uplo, int n, object A, int lda, object D, object E, object tau, object work, int lwork, object devInfo):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        uplo (`~.hipblasFillMode_t`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        A (`~.double2`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        D (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        E (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        tau (`~.double2`/`~.object`):
            (undocumented)

        work (`~.double2`/`~.object`):
            (undocumented)

        lwork (`~.int`):
            (undocumented)

        devInfo (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)
    """
    if not isinstance(uplo,_hipblasFillMode_t__Base):
        raise TypeError("argument 'uplo' must be of type '_hipblasFillMode_t__Base'")
    _hipsolverZhetrd__retval = hipsolverStatus_t(chipsolver.hipsolverZhetrd(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,uplo.value,n,
        double2.fromPyobj(A).getElementPtr(),lda,
        <double *>hip._util.types.Pointer.fromPyobj(D)._ptr,
        <double *>hip._util.types.Pointer.fromPyobj(E)._ptr,
        double2.fromPyobj(tau).getElementPtr(),
        double2.fromPyobj(work).getElementPtr(),lwork,
        <int *>hip._util.types.ListOfInt.fromPyobj(devInfo)._ptr))
    return (_hipsolverZhetrd__retval,)


@cython.embedsignature(True)
def hipsolverSsytrf_bufferSize(object handle, int n, object A, int lda, object lwork):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        A (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        lwork (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)
    """
    _hipsolverSsytrf_bufferSize__retval = hipsolverStatus_t(chipsolver.hipsolverSsytrf_bufferSize(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,n,
        <float *>hip._util.types.Pointer.fromPyobj(A)._ptr,lda,
        <int *>hip._util.types.ListOfInt.fromPyobj(lwork)._ptr))
    return (_hipsolverSsytrf_bufferSize__retval,)


@cython.embedsignature(True)
def hipsolverDsytrf_bufferSize(object handle, int n, object A, int lda, object lwork):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        A (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        lwork (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)
    """
    _hipsolverDsytrf_bufferSize__retval = hipsolverStatus_t(chipsolver.hipsolverDsytrf_bufferSize(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,n,
        <double *>hip._util.types.Pointer.fromPyobj(A)._ptr,lda,
        <int *>hip._util.types.ListOfInt.fromPyobj(lwork)._ptr))
    return (_hipsolverDsytrf_bufferSize__retval,)


@cython.embedsignature(True)
def hipsolverCsytrf_bufferSize(object handle, int n, object A, int lda, object lwork):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        A (`~.float2`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        lwork (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)
    """
    _hipsolverCsytrf_bufferSize__retval = hipsolverStatus_t(chipsolver.hipsolverCsytrf_bufferSize(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,n,
        float2.fromPyobj(A).getElementPtr(),lda,
        <int *>hip._util.types.ListOfInt.fromPyobj(lwork)._ptr))
    return (_hipsolverCsytrf_bufferSize__retval,)


@cython.embedsignature(True)
def hipsolverZsytrf_bufferSize(object handle, int n, object A, int lda, object lwork):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        A (`~.double2`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        lwork (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)
    """
    _hipsolverZsytrf_bufferSize__retval = hipsolverStatus_t(chipsolver.hipsolverZsytrf_bufferSize(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,n,
        double2.fromPyobj(A).getElementPtr(),lda,
        <int *>hip._util.types.ListOfInt.fromPyobj(lwork)._ptr))
    return (_hipsolverZsytrf_bufferSize__retval,)


@cython.embedsignature(True)
def hipsolverSsytrf(object handle, object uplo, int n, object A, int lda, object ipiv, object work, int lwork, object devInfo):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        uplo (`~.hipblasFillMode_t`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        A (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        ipiv (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)

        work (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lwork (`~.int`):
            (undocumented)

        devInfo (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)
    """
    if not isinstance(uplo,_hipblasFillMode_t__Base):
        raise TypeError("argument 'uplo' must be of type '_hipblasFillMode_t__Base'")
    _hipsolverSsytrf__retval = hipsolverStatus_t(chipsolver.hipsolverSsytrf(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,uplo.value,n,
        <float *>hip._util.types.Pointer.fromPyobj(A)._ptr,lda,
        <int *>hip._util.types.ListOfInt.fromPyobj(ipiv)._ptr,
        <float *>hip._util.types.Pointer.fromPyobj(work)._ptr,lwork,
        <int *>hip._util.types.ListOfInt.fromPyobj(devInfo)._ptr))
    return (_hipsolverSsytrf__retval,)


@cython.embedsignature(True)
def hipsolverDsytrf(object handle, object uplo, int n, object A, int lda, object ipiv, object work, int lwork, object devInfo):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        uplo (`~.hipblasFillMode_t`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        A (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        ipiv (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)

        work (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lwork (`~.int`):
            (undocumented)

        devInfo (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)
    """
    if not isinstance(uplo,_hipblasFillMode_t__Base):
        raise TypeError("argument 'uplo' must be of type '_hipblasFillMode_t__Base'")
    _hipsolverDsytrf__retval = hipsolverStatus_t(chipsolver.hipsolverDsytrf(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,uplo.value,n,
        <double *>hip._util.types.Pointer.fromPyobj(A)._ptr,lda,
        <int *>hip._util.types.ListOfInt.fromPyobj(ipiv)._ptr,
        <double *>hip._util.types.Pointer.fromPyobj(work)._ptr,lwork,
        <int *>hip._util.types.ListOfInt.fromPyobj(devInfo)._ptr))
    return (_hipsolverDsytrf__retval,)


@cython.embedsignature(True)
def hipsolverCsytrf(object handle, object uplo, int n, object A, int lda, object ipiv, object work, int lwork, object devInfo):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        uplo (`~.hipblasFillMode_t`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        A (`~.float2`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        ipiv (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)

        work (`~.float2`/`~.object`):
            (undocumented)

        lwork (`~.int`):
            (undocumented)

        devInfo (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)
    """
    if not isinstance(uplo,_hipblasFillMode_t__Base):
        raise TypeError("argument 'uplo' must be of type '_hipblasFillMode_t__Base'")
    _hipsolverCsytrf__retval = hipsolverStatus_t(chipsolver.hipsolverCsytrf(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,uplo.value,n,
        float2.fromPyobj(A).getElementPtr(),lda,
        <int *>hip._util.types.ListOfInt.fromPyobj(ipiv)._ptr,
        float2.fromPyobj(work).getElementPtr(),lwork,
        <int *>hip._util.types.ListOfInt.fromPyobj(devInfo)._ptr))
    return (_hipsolverCsytrf__retval,)


@cython.embedsignature(True)
def hipsolverZsytrf(object handle, object uplo, int n, object A, int lda, object ipiv, object work, int lwork, object devInfo):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        uplo (`~.hipblasFillMode_t`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        A (`~.double2`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        ipiv (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)

        work (`~.double2`/`~.object`):
            (undocumented)

        lwork (`~.int`):
            (undocumented)

        devInfo (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)
    """
    if not isinstance(uplo,_hipblasFillMode_t__Base):
        raise TypeError("argument 'uplo' must be of type '_hipblasFillMode_t__Base'")
    _hipsolverZsytrf__retval = hipsolverStatus_t(chipsolver.hipsolverZsytrf(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,uplo.value,n,
        double2.fromPyobj(A).getElementPtr(),lda,
        <int *>hip._util.types.ListOfInt.fromPyobj(ipiv)._ptr,
        double2.fromPyobj(work).getElementPtr(),lwork,
        <int *>hip._util.types.ListOfInt.fromPyobj(devInfo)._ptr))
    return (_hipsolverZsytrf__retval,)


class _hipsolverEigRange_t__Base(enum.IntEnum):
    """Empty enum base class that allows subclassing.
    """
    pass
class hipsolverEigRange_t(_hipsolverEigRange_t__Base):
    """hipsolverEigRange_t

    Attributes:
        HIPSOLVER_EIG_RANGE_ALL:
            (undocumented)
        HIPSOLVER_EIG_RANGE_V:
            (undocumented)
        HIPSOLVER_EIG_RANGE_I:
            (undocumented)
    """
    HIPSOLVER_EIG_RANGE_ALL = chipsolver.HIPSOLVER_EIG_RANGE_ALL
    HIPSOLVER_EIG_RANGE_V = chipsolver.HIPSOLVER_EIG_RANGE_V
    HIPSOLVER_EIG_RANGE_I = chipsolver.HIPSOLVER_EIG_RANGE_I
    @staticmethod
    def ctypes_type():
        """The type of the enum constants as ctypes type."""
        return ctypes.c_uint


@cython.embedsignature(True)
def hipsolverDnCreate():
    r"""An alias for `~.hipsolverCreate`.
    ******************************************************************************

    Returns:
        A `~.tuple` of size 1 that contains (in that order):

        * handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)
    """
    handle = hip._util.types.Pointer.fromPtr(NULL)
    _hipsolverDnCreate__retval = hipsolverStatus_t(chipsolver.hipsolverDnCreate(
        <void **>&handle._ptr))
    return (_hipsolverDnCreate__retval,None if handle._ptr == NULL else handle)


@cython.embedsignature(True)
def hipsolverDnDestroy(object handle):
    r"""An alias for `~.hipsolverDestroy`.
    ******************************************************************************

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)
    """
    _hipsolverDnDestroy__retval = hipsolverStatus_t(chipsolver.hipsolverDnDestroy(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr))
    return (_hipsolverDnDestroy__retval,)


@cython.embedsignature(True)
def hipsolverDnSetStream(object handle, object streamId):
    r"""An alias for `~.hipsolverSetStream`.
    ******************************************************************************

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        streamId (`~.ihipStream_t`/`~.object`):
            (undocumented)
    """
    _hipsolverDnSetStream__retval = hipsolverStatus_t(chipsolver.hipsolverDnSetStream(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,
        ihipStream_t.fromPyobj(streamId).getElementPtr()))
    return (_hipsolverDnSetStream__retval,)


@cython.embedsignature(True)
def hipsolverDnGetStream(object handle, object streamId):
    r"""An alias for `~.hipsolverGetStream`.
    ******************************************************************************

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        streamId (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)
    """
    _hipsolverDnGetStream__retval = hipsolverStatus_t(chipsolver.hipsolverDnGetStream(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,
        <chipsolver.hipStream_t*>hip._util.types.Pointer.fromPyobj(streamId)._ptr))
    return (_hipsolverDnGetStream__retval,)


@cython.embedsignature(True)
def hipsolverDnCreateGesvdjInfo(object info):
    r"""(No short description, might be part of a group.)

    Args:
        info (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)
    """
    _hipsolverDnCreateGesvdjInfo__retval = hipsolverStatus_t(chipsolver.hipsolverDnCreateGesvdjInfo(
        <void **>hip._util.types.Pointer.fromPyobj(info)._ptr))
    return (_hipsolverDnCreateGesvdjInfo__retval,)


@cython.embedsignature(True)
def hipsolverDnDestroyGesvdjInfo(object info):
    r"""(No short description, might be part of a group.)

    Args:
        info (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)
    """
    _hipsolverDnDestroyGesvdjInfo__retval = hipsolverStatus_t(chipsolver.hipsolverDnDestroyGesvdjInfo(
        <void *>hip._util.types.Pointer.fromPyobj(info)._ptr))
    return (_hipsolverDnDestroyGesvdjInfo__retval,)


@cython.embedsignature(True)
def hipsolverDnXgesvdjSetMaxSweeps(object info, int max_sweeps):
    r"""(No short description, might be part of a group.)

    Args:
        info (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        max_sweeps (`~.int`):
            (undocumented)
    """
    _hipsolverDnXgesvdjSetMaxSweeps__retval = hipsolverStatus_t(chipsolver.hipsolverDnXgesvdjSetMaxSweeps(
        <void *>hip._util.types.Pointer.fromPyobj(info)._ptr,max_sweeps))
    return (_hipsolverDnXgesvdjSetMaxSweeps__retval,)


@cython.embedsignature(True)
def hipsolverDnXgesvdjSetSortEig(object info, int sort_eig):
    r"""(No short description, might be part of a group.)

    Args:
        info (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        sort_eig (`~.int`):
            (undocumented)
    """
    _hipsolverDnXgesvdjSetSortEig__retval = hipsolverStatus_t(chipsolver.hipsolverDnXgesvdjSetSortEig(
        <void *>hip._util.types.Pointer.fromPyobj(info)._ptr,sort_eig))
    return (_hipsolverDnXgesvdjSetSortEig__retval,)


@cython.embedsignature(True)
def hipsolverDnXgesvdjSetTolerance(object info, double tolerance):
    r"""(No short description, might be part of a group.)

    Args:
        info (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        tolerance (`~.float`/`~.int`):
            (undocumented)
    """
    _hipsolverDnXgesvdjSetTolerance__retval = hipsolverStatus_t(chipsolver.hipsolverDnXgesvdjSetTolerance(
        <void *>hip._util.types.Pointer.fromPyobj(info)._ptr,tolerance))
    return (_hipsolverDnXgesvdjSetTolerance__retval,)


@cython.embedsignature(True)
def hipsolverDnXgesvdjGetResidual(object handle, object info, object residual):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        info (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        residual (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)
    """
    _hipsolverDnXgesvdjGetResidual__retval = hipsolverStatus_t(chipsolver.hipsolverDnXgesvdjGetResidual(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,
        <void *>hip._util.types.Pointer.fromPyobj(info)._ptr,
        <double *>hip._util.types.Pointer.fromPyobj(residual)._ptr))
    return (_hipsolverDnXgesvdjGetResidual__retval,)


@cython.embedsignature(True)
def hipsolverDnXgesvdjGetSweeps(object handle, object info, object executed_sweeps):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        info (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        executed_sweeps (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)
    """
    _hipsolverDnXgesvdjGetSweeps__retval = hipsolverStatus_t(chipsolver.hipsolverDnXgesvdjGetSweeps(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,
        <void *>hip._util.types.Pointer.fromPyobj(info)._ptr,
        <int *>hip._util.types.ListOfInt.fromPyobj(executed_sweeps)._ptr))
    return (_hipsolverDnXgesvdjGetSweeps__retval,)


@cython.embedsignature(True)
def hipsolverDnCreateSyevjInfo(object info):
    r"""(No short description, might be part of a group.)

    Args:
        info (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)
    """
    _hipsolverDnCreateSyevjInfo__retval = hipsolverStatus_t(chipsolver.hipsolverDnCreateSyevjInfo(
        <void **>hip._util.types.Pointer.fromPyobj(info)._ptr))
    return (_hipsolverDnCreateSyevjInfo__retval,)


@cython.embedsignature(True)
def hipsolverDnDestroySyevjInfo(object info):
    r"""(No short description, might be part of a group.)

    Args:
        info (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)
    """
    _hipsolverDnDestroySyevjInfo__retval = hipsolverStatus_t(chipsolver.hipsolverDnDestroySyevjInfo(
        <void *>hip._util.types.Pointer.fromPyobj(info)._ptr))
    return (_hipsolverDnDestroySyevjInfo__retval,)


@cython.embedsignature(True)
def hipsolverDnXsyevjSetMaxSweeps(object info, int max_sweeps):
    r"""(No short description, might be part of a group.)

    Args:
        info (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        max_sweeps (`~.int`):
            (undocumented)
    """
    _hipsolverDnXsyevjSetMaxSweeps__retval = hipsolverStatus_t(chipsolver.hipsolverDnXsyevjSetMaxSweeps(
        <void *>hip._util.types.Pointer.fromPyobj(info)._ptr,max_sweeps))
    return (_hipsolverDnXsyevjSetMaxSweeps__retval,)


@cython.embedsignature(True)
def hipsolverDnXsyevjSetSortEig(object info, int sort_eig):
    r"""(No short description, might be part of a group.)

    Args:
        info (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        sort_eig (`~.int`):
            (undocumented)
    """
    _hipsolverDnXsyevjSetSortEig__retval = hipsolverStatus_t(chipsolver.hipsolverDnXsyevjSetSortEig(
        <void *>hip._util.types.Pointer.fromPyobj(info)._ptr,sort_eig))
    return (_hipsolverDnXsyevjSetSortEig__retval,)


@cython.embedsignature(True)
def hipsolverDnXsyevjSetTolerance(object info, double tolerance):
    r"""(No short description, might be part of a group.)

    Args:
        info (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        tolerance (`~.float`/`~.int`):
            (undocumented)
    """
    _hipsolverDnXsyevjSetTolerance__retval = hipsolverStatus_t(chipsolver.hipsolverDnXsyevjSetTolerance(
        <void *>hip._util.types.Pointer.fromPyobj(info)._ptr,tolerance))
    return (_hipsolverDnXsyevjSetTolerance__retval,)


@cython.embedsignature(True)
def hipsolverDnXsyevjGetResidual(object handle, object info, object residual):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        info (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        residual (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)
    """
    _hipsolverDnXsyevjGetResidual__retval = hipsolverStatus_t(chipsolver.hipsolverDnXsyevjGetResidual(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,
        <void *>hip._util.types.Pointer.fromPyobj(info)._ptr,
        <double *>hip._util.types.Pointer.fromPyobj(residual)._ptr))
    return (_hipsolverDnXsyevjGetResidual__retval,)


@cython.embedsignature(True)
def hipsolverDnXsyevjGetSweeps(object handle, object info, object executed_sweeps):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        info (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        executed_sweeps (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)
    """
    _hipsolverDnXsyevjGetSweeps__retval = hipsolverStatus_t(chipsolver.hipsolverDnXsyevjGetSweeps(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,
        <void *>hip._util.types.Pointer.fromPyobj(info)._ptr,
        <int *>hip._util.types.ListOfInt.fromPyobj(executed_sweeps)._ptr))
    return (_hipsolverDnXsyevjGetSweeps__retval,)


@cython.embedsignature(True)
def hipsolverDnSorgbr_bufferSize(object handle, object side, int m, int n, int k, object A, int lda, object tau, object lwork):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        side (`~.hipblasSideMode_t`):
            (undocumented)

        m (`~.int`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        k (`~.int`):
            (undocumented)

        A (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        tau (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lwork (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)
    """
    if not isinstance(side,_hipblasSideMode_t__Base):
        raise TypeError("argument 'side' must be of type '_hipblasSideMode_t__Base'")
    _hipsolverDnSorgbr_bufferSize__retval = hipsolverStatus_t(chipsolver.hipsolverDnSorgbr_bufferSize(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,side.value,m,n,k,
        <const float *>hip._util.types.Pointer.fromPyobj(A)._ptr,lda,
        <const float *>hip._util.types.Pointer.fromPyobj(tau)._ptr,
        <int *>hip._util.types.ListOfInt.fromPyobj(lwork)._ptr))
    return (_hipsolverDnSorgbr_bufferSize__retval,)


@cython.embedsignature(True)
def hipsolverDnDorgbr_bufferSize(object handle, object side, int m, int n, int k, object A, int lda, object tau, object lwork):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        side (`~.hipblasSideMode_t`):
            (undocumented)

        m (`~.int`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        k (`~.int`):
            (undocumented)

        A (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        tau (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lwork (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)
    """
    if not isinstance(side,_hipblasSideMode_t__Base):
        raise TypeError("argument 'side' must be of type '_hipblasSideMode_t__Base'")
    _hipsolverDnDorgbr_bufferSize__retval = hipsolverStatus_t(chipsolver.hipsolverDnDorgbr_bufferSize(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,side.value,m,n,k,
        <const double *>hip._util.types.Pointer.fromPyobj(A)._ptr,lda,
        <const double *>hip._util.types.Pointer.fromPyobj(tau)._ptr,
        <int *>hip._util.types.ListOfInt.fromPyobj(lwork)._ptr))
    return (_hipsolverDnDorgbr_bufferSize__retval,)


@cython.embedsignature(True)
def hipsolverDnCungbr_bufferSize(object handle, object side, int m, int n, int k, object A, int lda, object tau, object lwork):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        side (`~.hipblasSideMode_t`):
            (undocumented)

        m (`~.int`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        k (`~.int`):
            (undocumented)

        A (`~.float2`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        tau (`~.float2`/`~.object`):
            (undocumented)

        lwork (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)
    """
    if not isinstance(side,_hipblasSideMode_t__Base):
        raise TypeError("argument 'side' must be of type '_hipblasSideMode_t__Base'")
    _hipsolverDnCungbr_bufferSize__retval = hipsolverStatus_t(chipsolver.hipsolverDnCungbr_bufferSize(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,side.value,m,n,k,
        float2.fromPyobj(A).getElementPtr(),lda,
        float2.fromPyobj(tau).getElementPtr(),
        <int *>hip._util.types.ListOfInt.fromPyobj(lwork)._ptr))
    return (_hipsolverDnCungbr_bufferSize__retval,)


@cython.embedsignature(True)
def hipsolverDnZungbr_bufferSize(object handle, object side, int m, int n, int k, object A, int lda, object tau, object lwork):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        side (`~.hipblasSideMode_t`):
            (undocumented)

        m (`~.int`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        k (`~.int`):
            (undocumented)

        A (`~.double2`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        tau (`~.double2`/`~.object`):
            (undocumented)

        lwork (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)
    """
    if not isinstance(side,_hipblasSideMode_t__Base):
        raise TypeError("argument 'side' must be of type '_hipblasSideMode_t__Base'")
    _hipsolverDnZungbr_bufferSize__retval = hipsolverStatus_t(chipsolver.hipsolverDnZungbr_bufferSize(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,side.value,m,n,k,
        double2.fromPyobj(A).getElementPtr(),lda,
        double2.fromPyobj(tau).getElementPtr(),
        <int *>hip._util.types.ListOfInt.fromPyobj(lwork)._ptr))
    return (_hipsolverDnZungbr_bufferSize__retval,)


@cython.embedsignature(True)
def hipsolverDnSorgbr(object handle, object side, int m, int n, int k, object A, int lda, object tau, object work, int lwork, object devInfo):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        side (`~.hipblasSideMode_t`):
            (undocumented)

        m (`~.int`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        k (`~.int`):
            (undocumented)

        A (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        tau (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        work (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lwork (`~.int`):
            (undocumented)

        devInfo (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)
    """
    if not isinstance(side,_hipblasSideMode_t__Base):
        raise TypeError("argument 'side' must be of type '_hipblasSideMode_t__Base'")
    _hipsolverDnSorgbr__retval = hipsolverStatus_t(chipsolver.hipsolverDnSorgbr(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,side.value,m,n,k,
        <float *>hip._util.types.Pointer.fromPyobj(A)._ptr,lda,
        <const float *>hip._util.types.Pointer.fromPyobj(tau)._ptr,
        <float *>hip._util.types.Pointer.fromPyobj(work)._ptr,lwork,
        <int *>hip._util.types.ListOfInt.fromPyobj(devInfo)._ptr))
    return (_hipsolverDnSorgbr__retval,)


@cython.embedsignature(True)
def hipsolverDnDorgbr(object handle, object side, int m, int n, int k, object A, int lda, object tau, object work, int lwork, object devInfo):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        side (`~.hipblasSideMode_t`):
            (undocumented)

        m (`~.int`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        k (`~.int`):
            (undocumented)

        A (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        tau (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        work (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lwork (`~.int`):
            (undocumented)

        devInfo (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)
    """
    if not isinstance(side,_hipblasSideMode_t__Base):
        raise TypeError("argument 'side' must be of type '_hipblasSideMode_t__Base'")
    _hipsolverDnDorgbr__retval = hipsolverStatus_t(chipsolver.hipsolverDnDorgbr(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,side.value,m,n,k,
        <double *>hip._util.types.Pointer.fromPyobj(A)._ptr,lda,
        <const double *>hip._util.types.Pointer.fromPyobj(tau)._ptr,
        <double *>hip._util.types.Pointer.fromPyobj(work)._ptr,lwork,
        <int *>hip._util.types.ListOfInt.fromPyobj(devInfo)._ptr))
    return (_hipsolverDnDorgbr__retval,)


@cython.embedsignature(True)
def hipsolverDnCungbr(object handle, object side, int m, int n, int k, object A, int lda, object tau, object work, int lwork, object devInfo):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        side (`~.hipblasSideMode_t`):
            (undocumented)

        m (`~.int`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        k (`~.int`):
            (undocumented)

        A (`~.float2`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        tau (`~.float2`/`~.object`):
            (undocumented)

        work (`~.float2`/`~.object`):
            (undocumented)

        lwork (`~.int`):
            (undocumented)

        devInfo (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)
    """
    if not isinstance(side,_hipblasSideMode_t__Base):
        raise TypeError("argument 'side' must be of type '_hipblasSideMode_t__Base'")
    _hipsolverDnCungbr__retval = hipsolverStatus_t(chipsolver.hipsolverDnCungbr(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,side.value,m,n,k,
        float2.fromPyobj(A).getElementPtr(),lda,
        float2.fromPyobj(tau).getElementPtr(),
        float2.fromPyobj(work).getElementPtr(),lwork,
        <int *>hip._util.types.ListOfInt.fromPyobj(devInfo)._ptr))
    return (_hipsolverDnCungbr__retval,)


@cython.embedsignature(True)
def hipsolverDnZungbr(object handle, object side, int m, int n, int k, object A, int lda, object tau, object work, int lwork, object devInfo):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        side (`~.hipblasSideMode_t`):
            (undocumented)

        m (`~.int`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        k (`~.int`):
            (undocumented)

        A (`~.double2`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        tau (`~.double2`/`~.object`):
            (undocumented)

        work (`~.double2`/`~.object`):
            (undocumented)

        lwork (`~.int`):
            (undocumented)

        devInfo (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)
    """
    if not isinstance(side,_hipblasSideMode_t__Base):
        raise TypeError("argument 'side' must be of type '_hipblasSideMode_t__Base'")
    _hipsolverDnZungbr__retval = hipsolverStatus_t(chipsolver.hipsolverDnZungbr(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,side.value,m,n,k,
        double2.fromPyobj(A).getElementPtr(),lda,
        double2.fromPyobj(tau).getElementPtr(),
        double2.fromPyobj(work).getElementPtr(),lwork,
        <int *>hip._util.types.ListOfInt.fromPyobj(devInfo)._ptr))
    return (_hipsolverDnZungbr__retval,)


@cython.embedsignature(True)
def hipsolverDnSorgqr_bufferSize(object handle, int m, int n, int k, object A, int lda, object tau, object lwork):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        m (`~.int`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        k (`~.int`):
            (undocumented)

        A (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        tau (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lwork (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)
    """
    _hipsolverDnSorgqr_bufferSize__retval = hipsolverStatus_t(chipsolver.hipsolverDnSorgqr_bufferSize(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,m,n,k,
        <const float *>hip._util.types.Pointer.fromPyobj(A)._ptr,lda,
        <const float *>hip._util.types.Pointer.fromPyobj(tau)._ptr,
        <int *>hip._util.types.ListOfInt.fromPyobj(lwork)._ptr))
    return (_hipsolverDnSorgqr_bufferSize__retval,)


@cython.embedsignature(True)
def hipsolverDnDorgqr_bufferSize(object handle, int m, int n, int k, object A, int lda, object tau, object lwork):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        m (`~.int`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        k (`~.int`):
            (undocumented)

        A (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        tau (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lwork (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)
    """
    _hipsolverDnDorgqr_bufferSize__retval = hipsolverStatus_t(chipsolver.hipsolverDnDorgqr_bufferSize(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,m,n,k,
        <const double *>hip._util.types.Pointer.fromPyobj(A)._ptr,lda,
        <const double *>hip._util.types.Pointer.fromPyobj(tau)._ptr,
        <int *>hip._util.types.ListOfInt.fromPyobj(lwork)._ptr))
    return (_hipsolverDnDorgqr_bufferSize__retval,)


@cython.embedsignature(True)
def hipsolverDnCungqr_bufferSize(object handle, int m, int n, int k, object A, int lda, object tau, object lwork):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        m (`~.int`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        k (`~.int`):
            (undocumented)

        A (`~.float2`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        tau (`~.float2`/`~.object`):
            (undocumented)

        lwork (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)
    """
    _hipsolverDnCungqr_bufferSize__retval = hipsolverStatus_t(chipsolver.hipsolverDnCungqr_bufferSize(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,m,n,k,
        float2.fromPyobj(A).getElementPtr(),lda,
        float2.fromPyobj(tau).getElementPtr(),
        <int *>hip._util.types.ListOfInt.fromPyobj(lwork)._ptr))
    return (_hipsolverDnCungqr_bufferSize__retval,)


@cython.embedsignature(True)
def hipsolverDnZungqr_bufferSize(object handle, int m, int n, int k, object A, int lda, object tau, object lwork):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        m (`~.int`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        k (`~.int`):
            (undocumented)

        A (`~.double2`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        tau (`~.double2`/`~.object`):
            (undocumented)

        lwork (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)
    """
    _hipsolverDnZungqr_bufferSize__retval = hipsolverStatus_t(chipsolver.hipsolverDnZungqr_bufferSize(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,m,n,k,
        double2.fromPyobj(A).getElementPtr(),lda,
        double2.fromPyobj(tau).getElementPtr(),
        <int *>hip._util.types.ListOfInt.fromPyobj(lwork)._ptr))
    return (_hipsolverDnZungqr_bufferSize__retval,)


@cython.embedsignature(True)
def hipsolverDnSorgqr(object handle, int m, int n, int k, object A, int lda, object tau, object work, int lwork, object devInfo):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        m (`~.int`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        k (`~.int`):
            (undocumented)

        A (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        tau (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        work (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lwork (`~.int`):
            (undocumented)

        devInfo (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)
    """
    _hipsolverDnSorgqr__retval = hipsolverStatus_t(chipsolver.hipsolverDnSorgqr(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,m,n,k,
        <float *>hip._util.types.Pointer.fromPyobj(A)._ptr,lda,
        <const float *>hip._util.types.Pointer.fromPyobj(tau)._ptr,
        <float *>hip._util.types.Pointer.fromPyobj(work)._ptr,lwork,
        <int *>hip._util.types.ListOfInt.fromPyobj(devInfo)._ptr))
    return (_hipsolverDnSorgqr__retval,)


@cython.embedsignature(True)
def hipsolverDnDorgqr(object handle, int m, int n, int k, object A, int lda, object tau, object work, int lwork, object devInfo):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        m (`~.int`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        k (`~.int`):
            (undocumented)

        A (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        tau (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        work (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lwork (`~.int`):
            (undocumented)

        devInfo (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)
    """
    _hipsolverDnDorgqr__retval = hipsolverStatus_t(chipsolver.hipsolverDnDorgqr(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,m,n,k,
        <double *>hip._util.types.Pointer.fromPyobj(A)._ptr,lda,
        <const double *>hip._util.types.Pointer.fromPyobj(tau)._ptr,
        <double *>hip._util.types.Pointer.fromPyobj(work)._ptr,lwork,
        <int *>hip._util.types.ListOfInt.fromPyobj(devInfo)._ptr))
    return (_hipsolverDnDorgqr__retval,)


@cython.embedsignature(True)
def hipsolverDnCungqr(object handle, int m, int n, int k, object A, int lda, object tau, object work, int lwork, object devInfo):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        m (`~.int`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        k (`~.int`):
            (undocumented)

        A (`~.float2`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        tau (`~.float2`/`~.object`):
            (undocumented)

        work (`~.float2`/`~.object`):
            (undocumented)

        lwork (`~.int`):
            (undocumented)

        devInfo (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)
    """
    _hipsolverDnCungqr__retval = hipsolverStatus_t(chipsolver.hipsolverDnCungqr(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,m,n,k,
        float2.fromPyobj(A).getElementPtr(),lda,
        float2.fromPyobj(tau).getElementPtr(),
        float2.fromPyobj(work).getElementPtr(),lwork,
        <int *>hip._util.types.ListOfInt.fromPyobj(devInfo)._ptr))
    return (_hipsolverDnCungqr__retval,)


@cython.embedsignature(True)
def hipsolverDnZungqr(object handle, int m, int n, int k, object A, int lda, object tau, object work, int lwork, object devInfo):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        m (`~.int`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        k (`~.int`):
            (undocumented)

        A (`~.double2`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        tau (`~.double2`/`~.object`):
            (undocumented)

        work (`~.double2`/`~.object`):
            (undocumented)

        lwork (`~.int`):
            (undocumented)

        devInfo (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)
    """
    _hipsolverDnZungqr__retval = hipsolverStatus_t(chipsolver.hipsolverDnZungqr(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,m,n,k,
        double2.fromPyobj(A).getElementPtr(),lda,
        double2.fromPyobj(tau).getElementPtr(),
        double2.fromPyobj(work).getElementPtr(),lwork,
        <int *>hip._util.types.ListOfInt.fromPyobj(devInfo)._ptr))
    return (_hipsolverDnZungqr__retval,)


@cython.embedsignature(True)
def hipsolverDnSorgtr_bufferSize(object handle, object uplo, int n, object A, int lda, object tau, object lwork):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        uplo (`~.hipblasFillMode_t`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        A (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        tau (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lwork (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)
    """
    if not isinstance(uplo,_hipblasFillMode_t__Base):
        raise TypeError("argument 'uplo' must be of type '_hipblasFillMode_t__Base'")
    _hipsolverDnSorgtr_bufferSize__retval = hipsolverStatus_t(chipsolver.hipsolverDnSorgtr_bufferSize(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,uplo.value,n,
        <const float *>hip._util.types.Pointer.fromPyobj(A)._ptr,lda,
        <const float *>hip._util.types.Pointer.fromPyobj(tau)._ptr,
        <int *>hip._util.types.ListOfInt.fromPyobj(lwork)._ptr))
    return (_hipsolverDnSorgtr_bufferSize__retval,)


@cython.embedsignature(True)
def hipsolverDnDorgtr_bufferSize(object handle, object uplo, int n, object A, int lda, object tau, object lwork):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        uplo (`~.hipblasFillMode_t`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        A (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        tau (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lwork (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)
    """
    if not isinstance(uplo,_hipblasFillMode_t__Base):
        raise TypeError("argument 'uplo' must be of type '_hipblasFillMode_t__Base'")
    _hipsolverDnDorgtr_bufferSize__retval = hipsolverStatus_t(chipsolver.hipsolverDnDorgtr_bufferSize(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,uplo.value,n,
        <const double *>hip._util.types.Pointer.fromPyobj(A)._ptr,lda,
        <const double *>hip._util.types.Pointer.fromPyobj(tau)._ptr,
        <int *>hip._util.types.ListOfInt.fromPyobj(lwork)._ptr))
    return (_hipsolverDnDorgtr_bufferSize__retval,)


@cython.embedsignature(True)
def hipsolverDnCungtr_bufferSize(object handle, object uplo, int n, object A, int lda, object tau, object lwork):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        uplo (`~.hipblasFillMode_t`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        A (`~.float2`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        tau (`~.float2`/`~.object`):
            (undocumented)

        lwork (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)
    """
    if not isinstance(uplo,_hipblasFillMode_t__Base):
        raise TypeError("argument 'uplo' must be of type '_hipblasFillMode_t__Base'")
    _hipsolverDnCungtr_bufferSize__retval = hipsolverStatus_t(chipsolver.hipsolverDnCungtr_bufferSize(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,uplo.value,n,
        float2.fromPyobj(A).getElementPtr(),lda,
        float2.fromPyobj(tau).getElementPtr(),
        <int *>hip._util.types.ListOfInt.fromPyobj(lwork)._ptr))
    return (_hipsolverDnCungtr_bufferSize__retval,)


@cython.embedsignature(True)
def hipsolverDnZungtr_bufferSize(object handle, object uplo, int n, object A, int lda, object tau, object lwork):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        uplo (`~.hipblasFillMode_t`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        A (`~.double2`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        tau (`~.double2`/`~.object`):
            (undocumented)

        lwork (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)
    """
    if not isinstance(uplo,_hipblasFillMode_t__Base):
        raise TypeError("argument 'uplo' must be of type '_hipblasFillMode_t__Base'")
    _hipsolverDnZungtr_bufferSize__retval = hipsolverStatus_t(chipsolver.hipsolverDnZungtr_bufferSize(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,uplo.value,n,
        double2.fromPyobj(A).getElementPtr(),lda,
        double2.fromPyobj(tau).getElementPtr(),
        <int *>hip._util.types.ListOfInt.fromPyobj(lwork)._ptr))
    return (_hipsolverDnZungtr_bufferSize__retval,)


@cython.embedsignature(True)
def hipsolverDnSorgtr(object handle, object uplo, int n, object A, int lda, object tau, object work, int lwork, object devInfo):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        uplo (`~.hipblasFillMode_t`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        A (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        tau (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        work (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lwork (`~.int`):
            (undocumented)

        devInfo (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)
    """
    if not isinstance(uplo,_hipblasFillMode_t__Base):
        raise TypeError("argument 'uplo' must be of type '_hipblasFillMode_t__Base'")
    _hipsolverDnSorgtr__retval = hipsolverStatus_t(chipsolver.hipsolverDnSorgtr(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,uplo.value,n,
        <float *>hip._util.types.Pointer.fromPyobj(A)._ptr,lda,
        <const float *>hip._util.types.Pointer.fromPyobj(tau)._ptr,
        <float *>hip._util.types.Pointer.fromPyobj(work)._ptr,lwork,
        <int *>hip._util.types.ListOfInt.fromPyobj(devInfo)._ptr))
    return (_hipsolverDnSorgtr__retval,)


@cython.embedsignature(True)
def hipsolverDnDorgtr(object handle, object uplo, int n, object A, int lda, object tau, object work, int lwork, object devInfo):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        uplo (`~.hipblasFillMode_t`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        A (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        tau (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        work (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lwork (`~.int`):
            (undocumented)

        devInfo (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)
    """
    if not isinstance(uplo,_hipblasFillMode_t__Base):
        raise TypeError("argument 'uplo' must be of type '_hipblasFillMode_t__Base'")
    _hipsolverDnDorgtr__retval = hipsolverStatus_t(chipsolver.hipsolverDnDorgtr(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,uplo.value,n,
        <double *>hip._util.types.Pointer.fromPyobj(A)._ptr,lda,
        <const double *>hip._util.types.Pointer.fromPyobj(tau)._ptr,
        <double *>hip._util.types.Pointer.fromPyobj(work)._ptr,lwork,
        <int *>hip._util.types.ListOfInt.fromPyobj(devInfo)._ptr))
    return (_hipsolverDnDorgtr__retval,)


@cython.embedsignature(True)
def hipsolverDnCungtr(object handle, object uplo, int n, object A, int lda, object tau, object work, int lwork, object devInfo):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        uplo (`~.hipblasFillMode_t`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        A (`~.float2`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        tau (`~.float2`/`~.object`):
            (undocumented)

        work (`~.float2`/`~.object`):
            (undocumented)

        lwork (`~.int`):
            (undocumented)

        devInfo (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)
    """
    if not isinstance(uplo,_hipblasFillMode_t__Base):
        raise TypeError("argument 'uplo' must be of type '_hipblasFillMode_t__Base'")
    _hipsolverDnCungtr__retval = hipsolverStatus_t(chipsolver.hipsolverDnCungtr(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,uplo.value,n,
        float2.fromPyobj(A).getElementPtr(),lda,
        float2.fromPyobj(tau).getElementPtr(),
        float2.fromPyobj(work).getElementPtr(),lwork,
        <int *>hip._util.types.ListOfInt.fromPyobj(devInfo)._ptr))
    return (_hipsolverDnCungtr__retval,)


@cython.embedsignature(True)
def hipsolverDnZungtr(object handle, object uplo, int n, object A, int lda, object tau, object work, int lwork, object devInfo):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        uplo (`~.hipblasFillMode_t`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        A (`~.double2`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        tau (`~.double2`/`~.object`):
            (undocumented)

        work (`~.double2`/`~.object`):
            (undocumented)

        lwork (`~.int`):
            (undocumented)

        devInfo (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)
    """
    if not isinstance(uplo,_hipblasFillMode_t__Base):
        raise TypeError("argument 'uplo' must be of type '_hipblasFillMode_t__Base'")
    _hipsolverDnZungtr__retval = hipsolverStatus_t(chipsolver.hipsolverDnZungtr(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,uplo.value,n,
        double2.fromPyobj(A).getElementPtr(),lda,
        double2.fromPyobj(tau).getElementPtr(),
        double2.fromPyobj(work).getElementPtr(),lwork,
        <int *>hip._util.types.ListOfInt.fromPyobj(devInfo)._ptr))
    return (_hipsolverDnZungtr__retval,)


@cython.embedsignature(True)
def hipsolverDnSormqr_bufferSize(object handle, object side, object trans, int m, int n, int k, object A, int lda, object tau, object C, int ldc, object lwork):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        side (`~.hipblasSideMode_t`):
            (undocumented)

        trans (`~.hipblasOperation_t`):
            (undocumented)

        m (`~.int`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        k (`~.int`):
            (undocumented)

        A (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        tau (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        C (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        ldc (`~.int`):
            (undocumented)

        lwork (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)
    """
    if not isinstance(side,_hipblasSideMode_t__Base):
        raise TypeError("argument 'side' must be of type '_hipblasSideMode_t__Base'")                    
    if not isinstance(trans,_hipblasOperation_t__Base):
        raise TypeError("argument 'trans' must be of type '_hipblasOperation_t__Base'")
    _hipsolverDnSormqr_bufferSize__retval = hipsolverStatus_t(chipsolver.hipsolverDnSormqr_bufferSize(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,side.value,trans.value,m,n,k,
        <const float *>hip._util.types.Pointer.fromPyobj(A)._ptr,lda,
        <const float *>hip._util.types.Pointer.fromPyobj(tau)._ptr,
        <const float *>hip._util.types.Pointer.fromPyobj(C)._ptr,ldc,
        <int *>hip._util.types.ListOfInt.fromPyobj(lwork)._ptr))
    return (_hipsolverDnSormqr_bufferSize__retval,)


@cython.embedsignature(True)
def hipsolverDnDormqr_bufferSize(object handle, object side, object trans, int m, int n, int k, object A, int lda, object tau, object C, int ldc, object lwork):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        side (`~.hipblasSideMode_t`):
            (undocumented)

        trans (`~.hipblasOperation_t`):
            (undocumented)

        m (`~.int`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        k (`~.int`):
            (undocumented)

        A (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        tau (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        C (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        ldc (`~.int`):
            (undocumented)

        lwork (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)
    """
    if not isinstance(side,_hipblasSideMode_t__Base):
        raise TypeError("argument 'side' must be of type '_hipblasSideMode_t__Base'")                    
    if not isinstance(trans,_hipblasOperation_t__Base):
        raise TypeError("argument 'trans' must be of type '_hipblasOperation_t__Base'")
    _hipsolverDnDormqr_bufferSize__retval = hipsolverStatus_t(chipsolver.hipsolverDnDormqr_bufferSize(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,side.value,trans.value,m,n,k,
        <const double *>hip._util.types.Pointer.fromPyobj(A)._ptr,lda,
        <const double *>hip._util.types.Pointer.fromPyobj(tau)._ptr,
        <const double *>hip._util.types.Pointer.fromPyobj(C)._ptr,ldc,
        <int *>hip._util.types.ListOfInt.fromPyobj(lwork)._ptr))
    return (_hipsolverDnDormqr_bufferSize__retval,)


@cython.embedsignature(True)
def hipsolverDnCunmqr_bufferSize(object handle, object side, object trans, int m, int n, int k, object A, int lda, object tau, object C, int ldc, object lwork):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        side (`~.hipblasSideMode_t`):
            (undocumented)

        trans (`~.hipblasOperation_t`):
            (undocumented)

        m (`~.int`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        k (`~.int`):
            (undocumented)

        A (`~.float2`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        tau (`~.float2`/`~.object`):
            (undocumented)

        C (`~.float2`/`~.object`):
            (undocumented)

        ldc (`~.int`):
            (undocumented)

        lwork (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)
    """
    if not isinstance(side,_hipblasSideMode_t__Base):
        raise TypeError("argument 'side' must be of type '_hipblasSideMode_t__Base'")                    
    if not isinstance(trans,_hipblasOperation_t__Base):
        raise TypeError("argument 'trans' must be of type '_hipblasOperation_t__Base'")
    _hipsolverDnCunmqr_bufferSize__retval = hipsolverStatus_t(chipsolver.hipsolverDnCunmqr_bufferSize(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,side.value,trans.value,m,n,k,
        float2.fromPyobj(A).getElementPtr(),lda,
        float2.fromPyobj(tau).getElementPtr(),
        float2.fromPyobj(C).getElementPtr(),ldc,
        <int *>hip._util.types.ListOfInt.fromPyobj(lwork)._ptr))
    return (_hipsolverDnCunmqr_bufferSize__retval,)


@cython.embedsignature(True)
def hipsolverDnZunmqr_bufferSize(object handle, object side, object trans, int m, int n, int k, object A, int lda, object tau, object C, int ldc, object lwork):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        side (`~.hipblasSideMode_t`):
            (undocumented)

        trans (`~.hipblasOperation_t`):
            (undocumented)

        m (`~.int`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        k (`~.int`):
            (undocumented)

        A (`~.double2`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        tau (`~.double2`/`~.object`):
            (undocumented)

        C (`~.double2`/`~.object`):
            (undocumented)

        ldc (`~.int`):
            (undocumented)

        lwork (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)
    """
    if not isinstance(side,_hipblasSideMode_t__Base):
        raise TypeError("argument 'side' must be of type '_hipblasSideMode_t__Base'")                    
    if not isinstance(trans,_hipblasOperation_t__Base):
        raise TypeError("argument 'trans' must be of type '_hipblasOperation_t__Base'")
    _hipsolverDnZunmqr_bufferSize__retval = hipsolverStatus_t(chipsolver.hipsolverDnZunmqr_bufferSize(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,side.value,trans.value,m,n,k,
        double2.fromPyobj(A).getElementPtr(),lda,
        double2.fromPyobj(tau).getElementPtr(),
        double2.fromPyobj(C).getElementPtr(),ldc,
        <int *>hip._util.types.ListOfInt.fromPyobj(lwork)._ptr))
    return (_hipsolverDnZunmqr_bufferSize__retval,)


@cython.embedsignature(True)
def hipsolverDnSormqr(object handle, object side, object trans, int m, int n, int k, object A, int lda, object tau, object C, int ldc, object work, int lwork, object devInfo):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        side (`~.hipblasSideMode_t`):
            (undocumented)

        trans (`~.hipblasOperation_t`):
            (undocumented)

        m (`~.int`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        k (`~.int`):
            (undocumented)

        A (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        tau (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        C (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        ldc (`~.int`):
            (undocumented)

        work (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lwork (`~.int`):
            (undocumented)

        devInfo (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)
    """
    if not isinstance(side,_hipblasSideMode_t__Base):
        raise TypeError("argument 'side' must be of type '_hipblasSideMode_t__Base'")                    
    if not isinstance(trans,_hipblasOperation_t__Base):
        raise TypeError("argument 'trans' must be of type '_hipblasOperation_t__Base'")
    _hipsolverDnSormqr__retval = hipsolverStatus_t(chipsolver.hipsolverDnSormqr(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,side.value,trans.value,m,n,k,
        <const float *>hip._util.types.Pointer.fromPyobj(A)._ptr,lda,
        <const float *>hip._util.types.Pointer.fromPyobj(tau)._ptr,
        <float *>hip._util.types.Pointer.fromPyobj(C)._ptr,ldc,
        <float *>hip._util.types.Pointer.fromPyobj(work)._ptr,lwork,
        <int *>hip._util.types.ListOfInt.fromPyobj(devInfo)._ptr))
    return (_hipsolverDnSormqr__retval,)


@cython.embedsignature(True)
def hipsolverDnDormqr(object handle, object side, object trans, int m, int n, int k, object A, int lda, object tau, object C, int ldc, object work, int lwork, object devInfo):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        side (`~.hipblasSideMode_t`):
            (undocumented)

        trans (`~.hipblasOperation_t`):
            (undocumented)

        m (`~.int`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        k (`~.int`):
            (undocumented)

        A (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        tau (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        C (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        ldc (`~.int`):
            (undocumented)

        work (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lwork (`~.int`):
            (undocumented)

        devInfo (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)
    """
    if not isinstance(side,_hipblasSideMode_t__Base):
        raise TypeError("argument 'side' must be of type '_hipblasSideMode_t__Base'")                    
    if not isinstance(trans,_hipblasOperation_t__Base):
        raise TypeError("argument 'trans' must be of type '_hipblasOperation_t__Base'")
    _hipsolverDnDormqr__retval = hipsolverStatus_t(chipsolver.hipsolverDnDormqr(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,side.value,trans.value,m,n,k,
        <const double *>hip._util.types.Pointer.fromPyobj(A)._ptr,lda,
        <const double *>hip._util.types.Pointer.fromPyobj(tau)._ptr,
        <double *>hip._util.types.Pointer.fromPyobj(C)._ptr,ldc,
        <double *>hip._util.types.Pointer.fromPyobj(work)._ptr,lwork,
        <int *>hip._util.types.ListOfInt.fromPyobj(devInfo)._ptr))
    return (_hipsolverDnDormqr__retval,)


@cython.embedsignature(True)
def hipsolverDnCunmqr(object handle, object side, object trans, int m, int n, int k, object A, int lda, object tau, object C, int ldc, object work, int lwork, object devInfo):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        side (`~.hipblasSideMode_t`):
            (undocumented)

        trans (`~.hipblasOperation_t`):
            (undocumented)

        m (`~.int`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        k (`~.int`):
            (undocumented)

        A (`~.float2`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        tau (`~.float2`/`~.object`):
            (undocumented)

        C (`~.float2`/`~.object`):
            (undocumented)

        ldc (`~.int`):
            (undocumented)

        work (`~.float2`/`~.object`):
            (undocumented)

        lwork (`~.int`):
            (undocumented)

        devInfo (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)
    """
    if not isinstance(side,_hipblasSideMode_t__Base):
        raise TypeError("argument 'side' must be of type '_hipblasSideMode_t__Base'")                    
    if not isinstance(trans,_hipblasOperation_t__Base):
        raise TypeError("argument 'trans' must be of type '_hipblasOperation_t__Base'")
    _hipsolverDnCunmqr__retval = hipsolverStatus_t(chipsolver.hipsolverDnCunmqr(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,side.value,trans.value,m,n,k,
        float2.fromPyobj(A).getElementPtr(),lda,
        float2.fromPyobj(tau).getElementPtr(),
        float2.fromPyobj(C).getElementPtr(),ldc,
        float2.fromPyobj(work).getElementPtr(),lwork,
        <int *>hip._util.types.ListOfInt.fromPyobj(devInfo)._ptr))
    return (_hipsolverDnCunmqr__retval,)


@cython.embedsignature(True)
def hipsolverDnZunmqr(object handle, object side, object trans, int m, int n, int k, object A, int lda, object tau, object C, int ldc, object work, int lwork, object devInfo):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        side (`~.hipblasSideMode_t`):
            (undocumented)

        trans (`~.hipblasOperation_t`):
            (undocumented)

        m (`~.int`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        k (`~.int`):
            (undocumented)

        A (`~.double2`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        tau (`~.double2`/`~.object`):
            (undocumented)

        C (`~.double2`/`~.object`):
            (undocumented)

        ldc (`~.int`):
            (undocumented)

        work (`~.double2`/`~.object`):
            (undocumented)

        lwork (`~.int`):
            (undocumented)

        devInfo (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)
    """
    if not isinstance(side,_hipblasSideMode_t__Base):
        raise TypeError("argument 'side' must be of type '_hipblasSideMode_t__Base'")                    
    if not isinstance(trans,_hipblasOperation_t__Base):
        raise TypeError("argument 'trans' must be of type '_hipblasOperation_t__Base'")
    _hipsolverDnZunmqr__retval = hipsolverStatus_t(chipsolver.hipsolverDnZunmqr(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,side.value,trans.value,m,n,k,
        double2.fromPyobj(A).getElementPtr(),lda,
        double2.fromPyobj(tau).getElementPtr(),
        double2.fromPyobj(C).getElementPtr(),ldc,
        double2.fromPyobj(work).getElementPtr(),lwork,
        <int *>hip._util.types.ListOfInt.fromPyobj(devInfo)._ptr))
    return (_hipsolverDnZunmqr__retval,)


@cython.embedsignature(True)
def hipsolverDnSormtr_bufferSize(object handle, object side, object uplo, object trans, int m, int n, object A, int lda, object tau, object C, int ldc, object lwork):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        side (`~.hipblasSideMode_t`):
            (undocumented)

        uplo (`~.hipblasFillMode_t`):
            (undocumented)

        trans (`~.hipblasOperation_t`):
            (undocumented)

        m (`~.int`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        A (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        tau (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        C (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        ldc (`~.int`):
            (undocumented)

        lwork (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)
    """
    if not isinstance(side,_hipblasSideMode_t__Base):
        raise TypeError("argument 'side' must be of type '_hipblasSideMode_t__Base'")                    
    if not isinstance(uplo,_hipblasFillMode_t__Base):
        raise TypeError("argument 'uplo' must be of type '_hipblasFillMode_t__Base'")                    
    if not isinstance(trans,_hipblasOperation_t__Base):
        raise TypeError("argument 'trans' must be of type '_hipblasOperation_t__Base'")
    _hipsolverDnSormtr_bufferSize__retval = hipsolverStatus_t(chipsolver.hipsolverDnSormtr_bufferSize(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,side.value,uplo.value,trans.value,m,n,
        <const float *>hip._util.types.Pointer.fromPyobj(A)._ptr,lda,
        <const float *>hip._util.types.Pointer.fromPyobj(tau)._ptr,
        <const float *>hip._util.types.Pointer.fromPyobj(C)._ptr,ldc,
        <int *>hip._util.types.ListOfInt.fromPyobj(lwork)._ptr))
    return (_hipsolverDnSormtr_bufferSize__retval,)


@cython.embedsignature(True)
def hipsolverDnDormtr_bufferSize(object handle, object side, object uplo, object trans, int m, int n, object A, int lda, object tau, object C, int ldc, object lwork):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        side (`~.hipblasSideMode_t`):
            (undocumented)

        uplo (`~.hipblasFillMode_t`):
            (undocumented)

        trans (`~.hipblasOperation_t`):
            (undocumented)

        m (`~.int`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        A (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        tau (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        C (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        ldc (`~.int`):
            (undocumented)

        lwork (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)
    """
    if not isinstance(side,_hipblasSideMode_t__Base):
        raise TypeError("argument 'side' must be of type '_hipblasSideMode_t__Base'")                    
    if not isinstance(uplo,_hipblasFillMode_t__Base):
        raise TypeError("argument 'uplo' must be of type '_hipblasFillMode_t__Base'")                    
    if not isinstance(trans,_hipblasOperation_t__Base):
        raise TypeError("argument 'trans' must be of type '_hipblasOperation_t__Base'")
    _hipsolverDnDormtr_bufferSize__retval = hipsolverStatus_t(chipsolver.hipsolverDnDormtr_bufferSize(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,side.value,uplo.value,trans.value,m,n,
        <const double *>hip._util.types.Pointer.fromPyobj(A)._ptr,lda,
        <const double *>hip._util.types.Pointer.fromPyobj(tau)._ptr,
        <const double *>hip._util.types.Pointer.fromPyobj(C)._ptr,ldc,
        <int *>hip._util.types.ListOfInt.fromPyobj(lwork)._ptr))
    return (_hipsolverDnDormtr_bufferSize__retval,)


@cython.embedsignature(True)
def hipsolverDnCunmtr_bufferSize(object handle, object side, object uplo, object trans, int m, int n, object A, int lda, object tau, object C, int ldc, object lwork):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        side (`~.hipblasSideMode_t`):
            (undocumented)

        uplo (`~.hipblasFillMode_t`):
            (undocumented)

        trans (`~.hipblasOperation_t`):
            (undocumented)

        m (`~.int`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        A (`~.float2`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        tau (`~.float2`/`~.object`):
            (undocumented)

        C (`~.float2`/`~.object`):
            (undocumented)

        ldc (`~.int`):
            (undocumented)

        lwork (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)
    """
    if not isinstance(side,_hipblasSideMode_t__Base):
        raise TypeError("argument 'side' must be of type '_hipblasSideMode_t__Base'")                    
    if not isinstance(uplo,_hipblasFillMode_t__Base):
        raise TypeError("argument 'uplo' must be of type '_hipblasFillMode_t__Base'")                    
    if not isinstance(trans,_hipblasOperation_t__Base):
        raise TypeError("argument 'trans' must be of type '_hipblasOperation_t__Base'")
    _hipsolverDnCunmtr_bufferSize__retval = hipsolverStatus_t(chipsolver.hipsolverDnCunmtr_bufferSize(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,side.value,uplo.value,trans.value,m,n,
        float2.fromPyobj(A).getElementPtr(),lda,
        float2.fromPyobj(tau).getElementPtr(),
        float2.fromPyobj(C).getElementPtr(),ldc,
        <int *>hip._util.types.ListOfInt.fromPyobj(lwork)._ptr))
    return (_hipsolverDnCunmtr_bufferSize__retval,)


@cython.embedsignature(True)
def hipsolverDnZunmtr_bufferSize(object handle, object side, object uplo, object trans, int m, int n, object A, int lda, object tau, object C, int ldc, object lwork):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        side (`~.hipblasSideMode_t`):
            (undocumented)

        uplo (`~.hipblasFillMode_t`):
            (undocumented)

        trans (`~.hipblasOperation_t`):
            (undocumented)

        m (`~.int`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        A (`~.double2`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        tau (`~.double2`/`~.object`):
            (undocumented)

        C (`~.double2`/`~.object`):
            (undocumented)

        ldc (`~.int`):
            (undocumented)

        lwork (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)
    """
    if not isinstance(side,_hipblasSideMode_t__Base):
        raise TypeError("argument 'side' must be of type '_hipblasSideMode_t__Base'")                    
    if not isinstance(uplo,_hipblasFillMode_t__Base):
        raise TypeError("argument 'uplo' must be of type '_hipblasFillMode_t__Base'")                    
    if not isinstance(trans,_hipblasOperation_t__Base):
        raise TypeError("argument 'trans' must be of type '_hipblasOperation_t__Base'")
    _hipsolverDnZunmtr_bufferSize__retval = hipsolverStatus_t(chipsolver.hipsolverDnZunmtr_bufferSize(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,side.value,uplo.value,trans.value,m,n,
        double2.fromPyobj(A).getElementPtr(),lda,
        double2.fromPyobj(tau).getElementPtr(),
        double2.fromPyobj(C).getElementPtr(),ldc,
        <int *>hip._util.types.ListOfInt.fromPyobj(lwork)._ptr))
    return (_hipsolverDnZunmtr_bufferSize__retval,)


@cython.embedsignature(True)
def hipsolverDnSormtr(object handle, object side, object uplo, object trans, int m, int n, object A, int lda, object tau, object C, int ldc, object work, int lwork, object devInfo):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        side (`~.hipblasSideMode_t`):
            (undocumented)

        uplo (`~.hipblasFillMode_t`):
            (undocumented)

        trans (`~.hipblasOperation_t`):
            (undocumented)

        m (`~.int`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        A (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        tau (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        C (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        ldc (`~.int`):
            (undocumented)

        work (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lwork (`~.int`):
            (undocumented)

        devInfo (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)
    """
    if not isinstance(side,_hipblasSideMode_t__Base):
        raise TypeError("argument 'side' must be of type '_hipblasSideMode_t__Base'")                    
    if not isinstance(uplo,_hipblasFillMode_t__Base):
        raise TypeError("argument 'uplo' must be of type '_hipblasFillMode_t__Base'")                    
    if not isinstance(trans,_hipblasOperation_t__Base):
        raise TypeError("argument 'trans' must be of type '_hipblasOperation_t__Base'")
    _hipsolverDnSormtr__retval = hipsolverStatus_t(chipsolver.hipsolverDnSormtr(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,side.value,uplo.value,trans.value,m,n,
        <float *>hip._util.types.Pointer.fromPyobj(A)._ptr,lda,
        <float *>hip._util.types.Pointer.fromPyobj(tau)._ptr,
        <float *>hip._util.types.Pointer.fromPyobj(C)._ptr,ldc,
        <float *>hip._util.types.Pointer.fromPyobj(work)._ptr,lwork,
        <int *>hip._util.types.ListOfInt.fromPyobj(devInfo)._ptr))
    return (_hipsolverDnSormtr__retval,)


@cython.embedsignature(True)
def hipsolverDnDormtr(object handle, object side, object uplo, object trans, int m, int n, object A, int lda, object tau, object C, int ldc, object work, int lwork, object devInfo):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        side (`~.hipblasSideMode_t`):
            (undocumented)

        uplo (`~.hipblasFillMode_t`):
            (undocumented)

        trans (`~.hipblasOperation_t`):
            (undocumented)

        m (`~.int`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        A (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        tau (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        C (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        ldc (`~.int`):
            (undocumented)

        work (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lwork (`~.int`):
            (undocumented)

        devInfo (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)
    """
    if not isinstance(side,_hipblasSideMode_t__Base):
        raise TypeError("argument 'side' must be of type '_hipblasSideMode_t__Base'")                    
    if not isinstance(uplo,_hipblasFillMode_t__Base):
        raise TypeError("argument 'uplo' must be of type '_hipblasFillMode_t__Base'")                    
    if not isinstance(trans,_hipblasOperation_t__Base):
        raise TypeError("argument 'trans' must be of type '_hipblasOperation_t__Base'")
    _hipsolverDnDormtr__retval = hipsolverStatus_t(chipsolver.hipsolverDnDormtr(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,side.value,uplo.value,trans.value,m,n,
        <double *>hip._util.types.Pointer.fromPyobj(A)._ptr,lda,
        <double *>hip._util.types.Pointer.fromPyobj(tau)._ptr,
        <double *>hip._util.types.Pointer.fromPyobj(C)._ptr,ldc,
        <double *>hip._util.types.Pointer.fromPyobj(work)._ptr,lwork,
        <int *>hip._util.types.ListOfInt.fromPyobj(devInfo)._ptr))
    return (_hipsolverDnDormtr__retval,)


@cython.embedsignature(True)
def hipsolverDnCunmtr(object handle, object side, object uplo, object trans, int m, int n, object A, int lda, object tau, object C, int ldc, object work, int lwork, object devInfo):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        side (`~.hipblasSideMode_t`):
            (undocumented)

        uplo (`~.hipblasFillMode_t`):
            (undocumented)

        trans (`~.hipblasOperation_t`):
            (undocumented)

        m (`~.int`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        A (`~.float2`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        tau (`~.float2`/`~.object`):
            (undocumented)

        C (`~.float2`/`~.object`):
            (undocumented)

        ldc (`~.int`):
            (undocumented)

        work (`~.float2`/`~.object`):
            (undocumented)

        lwork (`~.int`):
            (undocumented)

        devInfo (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)
    """
    if not isinstance(side,_hipblasSideMode_t__Base):
        raise TypeError("argument 'side' must be of type '_hipblasSideMode_t__Base'")                    
    if not isinstance(uplo,_hipblasFillMode_t__Base):
        raise TypeError("argument 'uplo' must be of type '_hipblasFillMode_t__Base'")                    
    if not isinstance(trans,_hipblasOperation_t__Base):
        raise TypeError("argument 'trans' must be of type '_hipblasOperation_t__Base'")
    _hipsolverDnCunmtr__retval = hipsolverStatus_t(chipsolver.hipsolverDnCunmtr(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,side.value,uplo.value,trans.value,m,n,
        float2.fromPyobj(A).getElementPtr(),lda,
        float2.fromPyobj(tau).getElementPtr(),
        float2.fromPyobj(C).getElementPtr(),ldc,
        float2.fromPyobj(work).getElementPtr(),lwork,
        <int *>hip._util.types.ListOfInt.fromPyobj(devInfo)._ptr))
    return (_hipsolverDnCunmtr__retval,)


@cython.embedsignature(True)
def hipsolverDnZunmtr(object handle, object side, object uplo, object trans, int m, int n, object A, int lda, object tau, object C, int ldc, object work, int lwork, object devInfo):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        side (`~.hipblasSideMode_t`):
            (undocumented)

        uplo (`~.hipblasFillMode_t`):
            (undocumented)

        trans (`~.hipblasOperation_t`):
            (undocumented)

        m (`~.int`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        A (`~.double2`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        tau (`~.double2`/`~.object`):
            (undocumented)

        C (`~.double2`/`~.object`):
            (undocumented)

        ldc (`~.int`):
            (undocumented)

        work (`~.double2`/`~.object`):
            (undocumented)

        lwork (`~.int`):
            (undocumented)

        devInfo (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)
    """
    if not isinstance(side,_hipblasSideMode_t__Base):
        raise TypeError("argument 'side' must be of type '_hipblasSideMode_t__Base'")                    
    if not isinstance(uplo,_hipblasFillMode_t__Base):
        raise TypeError("argument 'uplo' must be of type '_hipblasFillMode_t__Base'")                    
    if not isinstance(trans,_hipblasOperation_t__Base):
        raise TypeError("argument 'trans' must be of type '_hipblasOperation_t__Base'")
    _hipsolverDnZunmtr__retval = hipsolverStatus_t(chipsolver.hipsolverDnZunmtr(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,side.value,uplo.value,trans.value,m,n,
        double2.fromPyobj(A).getElementPtr(),lda,
        double2.fromPyobj(tau).getElementPtr(),
        double2.fromPyobj(C).getElementPtr(),ldc,
        double2.fromPyobj(work).getElementPtr(),lwork,
        <int *>hip._util.types.ListOfInt.fromPyobj(devInfo)._ptr))
    return (_hipsolverDnZunmtr__retval,)


@cython.embedsignature(True)
def hipsolverDnSgebrd_bufferSize(object handle, int m, int n, object lwork):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        m (`~.int`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        lwork (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)
    """
    _hipsolverDnSgebrd_bufferSize__retval = hipsolverStatus_t(chipsolver.hipsolverDnSgebrd_bufferSize(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,m,n,
        <int *>hip._util.types.ListOfInt.fromPyobj(lwork)._ptr))
    return (_hipsolverDnSgebrd_bufferSize__retval,)


@cython.embedsignature(True)
def hipsolverDnDgebrd_bufferSize(object handle, int m, int n, object lwork):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        m (`~.int`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        lwork (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)
    """
    _hipsolverDnDgebrd_bufferSize__retval = hipsolverStatus_t(chipsolver.hipsolverDnDgebrd_bufferSize(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,m,n,
        <int *>hip._util.types.ListOfInt.fromPyobj(lwork)._ptr))
    return (_hipsolverDnDgebrd_bufferSize__retval,)


@cython.embedsignature(True)
def hipsolverDnCgebrd_bufferSize(object handle, int m, int n, object lwork):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        m (`~.int`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        lwork (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)
    """
    _hipsolverDnCgebrd_bufferSize__retval = hipsolverStatus_t(chipsolver.hipsolverDnCgebrd_bufferSize(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,m,n,
        <int *>hip._util.types.ListOfInt.fromPyobj(lwork)._ptr))
    return (_hipsolverDnCgebrd_bufferSize__retval,)


@cython.embedsignature(True)
def hipsolverDnZgebrd_bufferSize(object handle, int m, int n, object lwork):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        m (`~.int`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        lwork (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)
    """
    _hipsolverDnZgebrd_bufferSize__retval = hipsolverStatus_t(chipsolver.hipsolverDnZgebrd_bufferSize(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,m,n,
        <int *>hip._util.types.ListOfInt.fromPyobj(lwork)._ptr))
    return (_hipsolverDnZgebrd_bufferSize__retval,)


@cython.embedsignature(True)
def hipsolverDnSgebrd(object handle, int m, int n, object A, int lda, object D, object E, object tauq, object taup, object work, int lwork, object devInfo):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        m (`~.int`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        A (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        D (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        E (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        tauq (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        taup (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        work (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lwork (`~.int`):
            (undocumented)

        devInfo (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)
    """
    _hipsolverDnSgebrd__retval = hipsolverStatus_t(chipsolver.hipsolverDnSgebrd(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,m,n,
        <float *>hip._util.types.Pointer.fromPyobj(A)._ptr,lda,
        <float *>hip._util.types.Pointer.fromPyobj(D)._ptr,
        <float *>hip._util.types.Pointer.fromPyobj(E)._ptr,
        <float *>hip._util.types.Pointer.fromPyobj(tauq)._ptr,
        <float *>hip._util.types.Pointer.fromPyobj(taup)._ptr,
        <float *>hip._util.types.Pointer.fromPyobj(work)._ptr,lwork,
        <int *>hip._util.types.ListOfInt.fromPyobj(devInfo)._ptr))
    return (_hipsolverDnSgebrd__retval,)


@cython.embedsignature(True)
def hipsolverDnDgebrd(object handle, int m, int n, object A, int lda, object D, object E, object tauq, object taup, object work, int lwork, object devInfo):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        m (`~.int`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        A (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        D (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        E (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        tauq (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        taup (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        work (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lwork (`~.int`):
            (undocumented)

        devInfo (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)
    """
    _hipsolverDnDgebrd__retval = hipsolverStatus_t(chipsolver.hipsolverDnDgebrd(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,m,n,
        <double *>hip._util.types.Pointer.fromPyobj(A)._ptr,lda,
        <double *>hip._util.types.Pointer.fromPyobj(D)._ptr,
        <double *>hip._util.types.Pointer.fromPyobj(E)._ptr,
        <double *>hip._util.types.Pointer.fromPyobj(tauq)._ptr,
        <double *>hip._util.types.Pointer.fromPyobj(taup)._ptr,
        <double *>hip._util.types.Pointer.fromPyobj(work)._ptr,lwork,
        <int *>hip._util.types.ListOfInt.fromPyobj(devInfo)._ptr))
    return (_hipsolverDnDgebrd__retval,)


@cython.embedsignature(True)
def hipsolverDnCgebrd(object handle, int m, int n, object A, int lda, object D, object E, object tauq, object taup, object work, int lwork, object devInfo):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        m (`~.int`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        A (`~.float2`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        D (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        E (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        tauq (`~.float2`/`~.object`):
            (undocumented)

        taup (`~.float2`/`~.object`):
            (undocumented)

        work (`~.float2`/`~.object`):
            (undocumented)

        lwork (`~.int`):
            (undocumented)

        devInfo (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)
    """
    _hipsolverDnCgebrd__retval = hipsolverStatus_t(chipsolver.hipsolverDnCgebrd(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,m,n,
        float2.fromPyobj(A).getElementPtr(),lda,
        <float *>hip._util.types.Pointer.fromPyobj(D)._ptr,
        <float *>hip._util.types.Pointer.fromPyobj(E)._ptr,
        float2.fromPyobj(tauq).getElementPtr(),
        float2.fromPyobj(taup).getElementPtr(),
        float2.fromPyobj(work).getElementPtr(),lwork,
        <int *>hip._util.types.ListOfInt.fromPyobj(devInfo)._ptr))
    return (_hipsolverDnCgebrd__retval,)


@cython.embedsignature(True)
def hipsolverDnZgebrd(object handle, int m, int n, object A, int lda, object D, object E, object tauq, object taup, object work, int lwork, object devInfo):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        m (`~.int`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        A (`~.double2`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        D (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        E (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        tauq (`~.double2`/`~.object`):
            (undocumented)

        taup (`~.double2`/`~.object`):
            (undocumented)

        work (`~.double2`/`~.object`):
            (undocumented)

        lwork (`~.int`):
            (undocumented)

        devInfo (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)
    """
    _hipsolverDnZgebrd__retval = hipsolverStatus_t(chipsolver.hipsolverDnZgebrd(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,m,n,
        double2.fromPyobj(A).getElementPtr(),lda,
        <double *>hip._util.types.Pointer.fromPyobj(D)._ptr,
        <double *>hip._util.types.Pointer.fromPyobj(E)._ptr,
        double2.fromPyobj(tauq).getElementPtr(),
        double2.fromPyobj(taup).getElementPtr(),
        double2.fromPyobj(work).getElementPtr(),lwork,
        <int *>hip._util.types.ListOfInt.fromPyobj(devInfo)._ptr))
    return (_hipsolverDnZgebrd__retval,)


@cython.embedsignature(True)
def hipsolverDnSSgels_bufferSize(object handle, int m, int n, int nrhs, object A, int lda, object B, int ldb, object X, int ldx, object work, object lwork):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        m (`~.int`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        nrhs (`~.int`):
            (undocumented)

        A (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        B (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        ldb (`~.int`):
            (undocumented)

        X (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        ldx (`~.int`):
            (undocumented)

        work (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lwork (`~.hip._util.types.ListOfUnsignedLong`/`~.object`):
            (undocumented)
    """
    _hipsolverDnSSgels_bufferSize__retval = hipsolverStatus_t(chipsolver.hipsolverDnSSgels_bufferSize(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,m,n,nrhs,
        <float *>hip._util.types.Pointer.fromPyobj(A)._ptr,lda,
        <float *>hip._util.types.Pointer.fromPyobj(B)._ptr,ldb,
        <float *>hip._util.types.Pointer.fromPyobj(X)._ptr,ldx,
        <void *>hip._util.types.Pointer.fromPyobj(work)._ptr,
        <unsigned long *>hip._util.types.ListOfUnsignedLong.fromPyobj(lwork)._ptr))
    return (_hipsolverDnSSgels_bufferSize__retval,)


@cython.embedsignature(True)
def hipsolverDnDDgels_bufferSize(object handle, int m, int n, int nrhs, object A, int lda, object B, int ldb, object X, int ldx, object work, object lwork):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        m (`~.int`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        nrhs (`~.int`):
            (undocumented)

        A (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        B (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        ldb (`~.int`):
            (undocumented)

        X (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        ldx (`~.int`):
            (undocumented)

        work (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lwork (`~.hip._util.types.ListOfUnsignedLong`/`~.object`):
            (undocumented)
    """
    _hipsolverDnDDgels_bufferSize__retval = hipsolverStatus_t(chipsolver.hipsolverDnDDgels_bufferSize(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,m,n,nrhs,
        <double *>hip._util.types.Pointer.fromPyobj(A)._ptr,lda,
        <double *>hip._util.types.Pointer.fromPyobj(B)._ptr,ldb,
        <double *>hip._util.types.Pointer.fromPyobj(X)._ptr,ldx,
        <void *>hip._util.types.Pointer.fromPyobj(work)._ptr,
        <unsigned long *>hip._util.types.ListOfUnsignedLong.fromPyobj(lwork)._ptr))
    return (_hipsolverDnDDgels_bufferSize__retval,)


@cython.embedsignature(True)
def hipsolverDnCCgels_bufferSize(object handle, int m, int n, int nrhs, object A, int lda, object B, int ldb, object X, int ldx, object work, object lwork):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        m (`~.int`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        nrhs (`~.int`):
            (undocumented)

        A (`~.float2`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        B (`~.float2`/`~.object`):
            (undocumented)

        ldb (`~.int`):
            (undocumented)

        X (`~.float2`/`~.object`):
            (undocumented)

        ldx (`~.int`):
            (undocumented)

        work (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lwork (`~.hip._util.types.ListOfUnsignedLong`/`~.object`):
            (undocumented)
    """
    _hipsolverDnCCgels_bufferSize__retval = hipsolverStatus_t(chipsolver.hipsolverDnCCgels_bufferSize(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,m,n,nrhs,
        float2.fromPyobj(A).getElementPtr(),lda,
        float2.fromPyobj(B).getElementPtr(),ldb,
        float2.fromPyobj(X).getElementPtr(),ldx,
        <void *>hip._util.types.Pointer.fromPyobj(work)._ptr,
        <unsigned long *>hip._util.types.ListOfUnsignedLong.fromPyobj(lwork)._ptr))
    return (_hipsolverDnCCgels_bufferSize__retval,)


@cython.embedsignature(True)
def hipsolverDnZZgels_bufferSize(object handle, int m, int n, int nrhs, object A, int lda, object B, int ldb, object X, int ldx, object work, object lwork):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        m (`~.int`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        nrhs (`~.int`):
            (undocumented)

        A (`~.double2`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        B (`~.double2`/`~.object`):
            (undocumented)

        ldb (`~.int`):
            (undocumented)

        X (`~.double2`/`~.object`):
            (undocumented)

        ldx (`~.int`):
            (undocumented)

        work (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lwork (`~.hip._util.types.ListOfUnsignedLong`/`~.object`):
            (undocumented)
    """
    _hipsolverDnZZgels_bufferSize__retval = hipsolverStatus_t(chipsolver.hipsolverDnZZgels_bufferSize(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,m,n,nrhs,
        double2.fromPyobj(A).getElementPtr(),lda,
        double2.fromPyobj(B).getElementPtr(),ldb,
        double2.fromPyobj(X).getElementPtr(),ldx,
        <void *>hip._util.types.Pointer.fromPyobj(work)._ptr,
        <unsigned long *>hip._util.types.ListOfUnsignedLong.fromPyobj(lwork)._ptr))
    return (_hipsolverDnZZgels_bufferSize__retval,)


@cython.embedsignature(True)
def hipsolverDnSSgels(object handle, int m, int n, int nrhs, object A, int lda, object B, int ldb, object X, int ldx, object work, unsigned long lwork, object niters, object devInfo):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        m (`~.int`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        nrhs (`~.int`):
            (undocumented)

        A (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        B (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        ldb (`~.int`):
            (undocumented)

        X (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        ldx (`~.int`):
            (undocumented)

        work (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lwork (`~.int`):
            (undocumented)

        niters (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)

        devInfo (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)
    """
    _hipsolverDnSSgels__retval = hipsolverStatus_t(chipsolver.hipsolverDnSSgels(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,m,n,nrhs,
        <float *>hip._util.types.Pointer.fromPyobj(A)._ptr,lda,
        <float *>hip._util.types.Pointer.fromPyobj(B)._ptr,ldb,
        <float *>hip._util.types.Pointer.fromPyobj(X)._ptr,ldx,
        <void *>hip._util.types.Pointer.fromPyobj(work)._ptr,lwork,
        <int *>hip._util.types.ListOfInt.fromPyobj(niters)._ptr,
        <int *>hip._util.types.ListOfInt.fromPyobj(devInfo)._ptr))
    return (_hipsolverDnSSgels__retval,)


@cython.embedsignature(True)
def hipsolverDnDDgels(object handle, int m, int n, int nrhs, object A, int lda, object B, int ldb, object X, int ldx, object work, unsigned long lwork, object niters, object devInfo):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        m (`~.int`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        nrhs (`~.int`):
            (undocumented)

        A (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        B (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        ldb (`~.int`):
            (undocumented)

        X (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        ldx (`~.int`):
            (undocumented)

        work (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lwork (`~.int`):
            (undocumented)

        niters (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)

        devInfo (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)
    """
    _hipsolverDnDDgels__retval = hipsolverStatus_t(chipsolver.hipsolverDnDDgels(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,m,n,nrhs,
        <double *>hip._util.types.Pointer.fromPyobj(A)._ptr,lda,
        <double *>hip._util.types.Pointer.fromPyobj(B)._ptr,ldb,
        <double *>hip._util.types.Pointer.fromPyobj(X)._ptr,ldx,
        <void *>hip._util.types.Pointer.fromPyobj(work)._ptr,lwork,
        <int *>hip._util.types.ListOfInt.fromPyobj(niters)._ptr,
        <int *>hip._util.types.ListOfInt.fromPyobj(devInfo)._ptr))
    return (_hipsolverDnDDgels__retval,)


@cython.embedsignature(True)
def hipsolverDnCCgels(object handle, int m, int n, int nrhs, object A, int lda, object B, int ldb, object X, int ldx, object work, unsigned long lwork, object niters, object devInfo):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        m (`~.int`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        nrhs (`~.int`):
            (undocumented)

        A (`~.float2`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        B (`~.float2`/`~.object`):
            (undocumented)

        ldb (`~.int`):
            (undocumented)

        X (`~.float2`/`~.object`):
            (undocumented)

        ldx (`~.int`):
            (undocumented)

        work (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lwork (`~.int`):
            (undocumented)

        niters (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)

        devInfo (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)
    """
    _hipsolverDnCCgels__retval = hipsolverStatus_t(chipsolver.hipsolverDnCCgels(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,m,n,nrhs,
        float2.fromPyobj(A).getElementPtr(),lda,
        float2.fromPyobj(B).getElementPtr(),ldb,
        float2.fromPyobj(X).getElementPtr(),ldx,
        <void *>hip._util.types.Pointer.fromPyobj(work)._ptr,lwork,
        <int *>hip._util.types.ListOfInt.fromPyobj(niters)._ptr,
        <int *>hip._util.types.ListOfInt.fromPyobj(devInfo)._ptr))
    return (_hipsolverDnCCgels__retval,)


@cython.embedsignature(True)
def hipsolverDnZZgels(object handle, int m, int n, int nrhs, object A, int lda, object B, int ldb, object X, int ldx, object work, unsigned long lwork, object niters, object devInfo):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        m (`~.int`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        nrhs (`~.int`):
            (undocumented)

        A (`~.double2`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        B (`~.double2`/`~.object`):
            (undocumented)

        ldb (`~.int`):
            (undocumented)

        X (`~.double2`/`~.object`):
            (undocumented)

        ldx (`~.int`):
            (undocumented)

        work (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lwork (`~.int`):
            (undocumented)

        niters (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)

        devInfo (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)
    """
    _hipsolverDnZZgels__retval = hipsolverStatus_t(chipsolver.hipsolverDnZZgels(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,m,n,nrhs,
        double2.fromPyobj(A).getElementPtr(),lda,
        double2.fromPyobj(B).getElementPtr(),ldb,
        double2.fromPyobj(X).getElementPtr(),ldx,
        <void *>hip._util.types.Pointer.fromPyobj(work)._ptr,lwork,
        <int *>hip._util.types.ListOfInt.fromPyobj(niters)._ptr,
        <int *>hip._util.types.ListOfInt.fromPyobj(devInfo)._ptr))
    return (_hipsolverDnZZgels__retval,)


@cython.embedsignature(True)
def hipsolverDnSgeqrf_bufferSize(object handle, int m, int n, object A, int lda, object lwork):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        m (`~.int`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        A (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        lwork (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)
    """
    _hipsolverDnSgeqrf_bufferSize__retval = hipsolverStatus_t(chipsolver.hipsolverDnSgeqrf_bufferSize(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,m,n,
        <float *>hip._util.types.Pointer.fromPyobj(A)._ptr,lda,
        <int *>hip._util.types.ListOfInt.fromPyobj(lwork)._ptr))
    return (_hipsolverDnSgeqrf_bufferSize__retval,)


@cython.embedsignature(True)
def hipsolverDnDgeqrf_bufferSize(object handle, int m, int n, object A, int lda, object lwork):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        m (`~.int`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        A (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        lwork (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)
    """
    _hipsolverDnDgeqrf_bufferSize__retval = hipsolverStatus_t(chipsolver.hipsolverDnDgeqrf_bufferSize(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,m,n,
        <double *>hip._util.types.Pointer.fromPyobj(A)._ptr,lda,
        <int *>hip._util.types.ListOfInt.fromPyobj(lwork)._ptr))
    return (_hipsolverDnDgeqrf_bufferSize__retval,)


@cython.embedsignature(True)
def hipsolverDnCgeqrf_bufferSize(object handle, int m, int n, object A, int lda, object lwork):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        m (`~.int`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        A (`~.float2`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        lwork (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)
    """
    _hipsolverDnCgeqrf_bufferSize__retval = hipsolverStatus_t(chipsolver.hipsolverDnCgeqrf_bufferSize(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,m,n,
        float2.fromPyobj(A).getElementPtr(),lda,
        <int *>hip._util.types.ListOfInt.fromPyobj(lwork)._ptr))
    return (_hipsolverDnCgeqrf_bufferSize__retval,)


@cython.embedsignature(True)
def hipsolverDnZgeqrf_bufferSize(object handle, int m, int n, object A, int lda, object lwork):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        m (`~.int`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        A (`~.double2`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        lwork (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)
    """
    _hipsolverDnZgeqrf_bufferSize__retval = hipsolverStatus_t(chipsolver.hipsolverDnZgeqrf_bufferSize(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,m,n,
        double2.fromPyobj(A).getElementPtr(),lda,
        <int *>hip._util.types.ListOfInt.fromPyobj(lwork)._ptr))
    return (_hipsolverDnZgeqrf_bufferSize__retval,)


@cython.embedsignature(True)
def hipsolverDnSgeqrf(object handle, int m, int n, object A, int lda, object tau, object work, int lwork, object devInfo):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        m (`~.int`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        A (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        tau (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        work (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lwork (`~.int`):
            (undocumented)

        devInfo (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)
    """
    _hipsolverDnSgeqrf__retval = hipsolverStatus_t(chipsolver.hipsolverDnSgeqrf(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,m,n,
        <float *>hip._util.types.Pointer.fromPyobj(A)._ptr,lda,
        <float *>hip._util.types.Pointer.fromPyobj(tau)._ptr,
        <float *>hip._util.types.Pointer.fromPyobj(work)._ptr,lwork,
        <int *>hip._util.types.ListOfInt.fromPyobj(devInfo)._ptr))
    return (_hipsolverDnSgeqrf__retval,)


@cython.embedsignature(True)
def hipsolverDnDgeqrf(object handle, int m, int n, object A, int lda, object tau, object work, int lwork, object devInfo):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        m (`~.int`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        A (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        tau (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        work (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lwork (`~.int`):
            (undocumented)

        devInfo (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)
    """
    _hipsolverDnDgeqrf__retval = hipsolverStatus_t(chipsolver.hipsolverDnDgeqrf(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,m,n,
        <double *>hip._util.types.Pointer.fromPyobj(A)._ptr,lda,
        <double *>hip._util.types.Pointer.fromPyobj(tau)._ptr,
        <double *>hip._util.types.Pointer.fromPyobj(work)._ptr,lwork,
        <int *>hip._util.types.ListOfInt.fromPyobj(devInfo)._ptr))
    return (_hipsolverDnDgeqrf__retval,)


@cython.embedsignature(True)
def hipsolverDnCgeqrf(object handle, int m, int n, object A, int lda, object tau, object work, int lwork, object devInfo):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        m (`~.int`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        A (`~.float2`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        tau (`~.float2`/`~.object`):
            (undocumented)

        work (`~.float2`/`~.object`):
            (undocumented)

        lwork (`~.int`):
            (undocumented)

        devInfo (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)
    """
    _hipsolverDnCgeqrf__retval = hipsolverStatus_t(chipsolver.hipsolverDnCgeqrf(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,m,n,
        float2.fromPyobj(A).getElementPtr(),lda,
        float2.fromPyobj(tau).getElementPtr(),
        float2.fromPyobj(work).getElementPtr(),lwork,
        <int *>hip._util.types.ListOfInt.fromPyobj(devInfo)._ptr))
    return (_hipsolverDnCgeqrf__retval,)


@cython.embedsignature(True)
def hipsolverDnZgeqrf(object handle, int m, int n, object A, int lda, object tau, object work, int lwork, object devInfo):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        m (`~.int`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        A (`~.double2`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        tau (`~.double2`/`~.object`):
            (undocumented)

        work (`~.double2`/`~.object`):
            (undocumented)

        lwork (`~.int`):
            (undocumented)

        devInfo (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)
    """
    _hipsolverDnZgeqrf__retval = hipsolverStatus_t(chipsolver.hipsolverDnZgeqrf(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,m,n,
        double2.fromPyobj(A).getElementPtr(),lda,
        double2.fromPyobj(tau).getElementPtr(),
        double2.fromPyobj(work).getElementPtr(),lwork,
        <int *>hip._util.types.ListOfInt.fromPyobj(devInfo)._ptr))
    return (_hipsolverDnZgeqrf__retval,)


@cython.embedsignature(True)
def hipsolverDnSSgesv_bufferSize(object handle, int n, int nrhs, object A, int lda, object devIpiv, object B, int ldb, object X, int ldx, object work, object lwork):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        nrhs (`~.int`):
            (undocumented)

        A (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        devIpiv (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)

        B (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        ldb (`~.int`):
            (undocumented)

        X (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        ldx (`~.int`):
            (undocumented)

        work (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lwork (`~.hip._util.types.ListOfUnsignedLong`/`~.object`):
            (undocumented)
    """
    _hipsolverDnSSgesv_bufferSize__retval = hipsolverStatus_t(chipsolver.hipsolverDnSSgesv_bufferSize(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,n,nrhs,
        <float *>hip._util.types.Pointer.fromPyobj(A)._ptr,lda,
        <int *>hip._util.types.ListOfInt.fromPyobj(devIpiv)._ptr,
        <float *>hip._util.types.Pointer.fromPyobj(B)._ptr,ldb,
        <float *>hip._util.types.Pointer.fromPyobj(X)._ptr,ldx,
        <void *>hip._util.types.Pointer.fromPyobj(work)._ptr,
        <unsigned long *>hip._util.types.ListOfUnsignedLong.fromPyobj(lwork)._ptr))
    return (_hipsolverDnSSgesv_bufferSize__retval,)


@cython.embedsignature(True)
def hipsolverDnDDgesv_bufferSize(object handle, int n, int nrhs, object A, int lda, object devIpiv, object B, int ldb, object X, int ldx, object work, object lwork):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        nrhs (`~.int`):
            (undocumented)

        A (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        devIpiv (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)

        B (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        ldb (`~.int`):
            (undocumented)

        X (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        ldx (`~.int`):
            (undocumented)

        work (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lwork (`~.hip._util.types.ListOfUnsignedLong`/`~.object`):
            (undocumented)
    """
    _hipsolverDnDDgesv_bufferSize__retval = hipsolverStatus_t(chipsolver.hipsolverDnDDgesv_bufferSize(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,n,nrhs,
        <double *>hip._util.types.Pointer.fromPyobj(A)._ptr,lda,
        <int *>hip._util.types.ListOfInt.fromPyobj(devIpiv)._ptr,
        <double *>hip._util.types.Pointer.fromPyobj(B)._ptr,ldb,
        <double *>hip._util.types.Pointer.fromPyobj(X)._ptr,ldx,
        <void *>hip._util.types.Pointer.fromPyobj(work)._ptr,
        <unsigned long *>hip._util.types.ListOfUnsignedLong.fromPyobj(lwork)._ptr))
    return (_hipsolverDnDDgesv_bufferSize__retval,)


@cython.embedsignature(True)
def hipsolverDnCCgesv_bufferSize(object handle, int n, int nrhs, object A, int lda, object devIpiv, object B, int ldb, object X, int ldx, object work, object lwork):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        nrhs (`~.int`):
            (undocumented)

        A (`~.float2`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        devIpiv (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)

        B (`~.float2`/`~.object`):
            (undocumented)

        ldb (`~.int`):
            (undocumented)

        X (`~.float2`/`~.object`):
            (undocumented)

        ldx (`~.int`):
            (undocumented)

        work (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lwork (`~.hip._util.types.ListOfUnsignedLong`/`~.object`):
            (undocumented)
    """
    _hipsolverDnCCgesv_bufferSize__retval = hipsolverStatus_t(chipsolver.hipsolverDnCCgesv_bufferSize(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,n,nrhs,
        float2.fromPyobj(A).getElementPtr(),lda,
        <int *>hip._util.types.ListOfInt.fromPyobj(devIpiv)._ptr,
        float2.fromPyobj(B).getElementPtr(),ldb,
        float2.fromPyobj(X).getElementPtr(),ldx,
        <void *>hip._util.types.Pointer.fromPyobj(work)._ptr,
        <unsigned long *>hip._util.types.ListOfUnsignedLong.fromPyobj(lwork)._ptr))
    return (_hipsolverDnCCgesv_bufferSize__retval,)


@cython.embedsignature(True)
def hipsolverDnZZgesv_bufferSize(object handle, int n, int nrhs, object A, int lda, object devIpiv, object B, int ldb, object X, int ldx, object work, object lwork):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        nrhs (`~.int`):
            (undocumented)

        A (`~.double2`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        devIpiv (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)

        B (`~.double2`/`~.object`):
            (undocumented)

        ldb (`~.int`):
            (undocumented)

        X (`~.double2`/`~.object`):
            (undocumented)

        ldx (`~.int`):
            (undocumented)

        work (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lwork (`~.hip._util.types.ListOfUnsignedLong`/`~.object`):
            (undocumented)
    """
    _hipsolverDnZZgesv_bufferSize__retval = hipsolverStatus_t(chipsolver.hipsolverDnZZgesv_bufferSize(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,n,nrhs,
        double2.fromPyobj(A).getElementPtr(),lda,
        <int *>hip._util.types.ListOfInt.fromPyobj(devIpiv)._ptr,
        double2.fromPyobj(B).getElementPtr(),ldb,
        double2.fromPyobj(X).getElementPtr(),ldx,
        <void *>hip._util.types.Pointer.fromPyobj(work)._ptr,
        <unsigned long *>hip._util.types.ListOfUnsignedLong.fromPyobj(lwork)._ptr))
    return (_hipsolverDnZZgesv_bufferSize__retval,)


@cython.embedsignature(True)
def hipsolverDnSSgesv(object handle, int n, int nrhs, object A, int lda, object devIpiv, object B, int ldb, object X, int ldx, object work, unsigned long lwork, object niters, object devInfo):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        nrhs (`~.int`):
            (undocumented)

        A (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        devIpiv (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)

        B (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        ldb (`~.int`):
            (undocumented)

        X (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        ldx (`~.int`):
            (undocumented)

        work (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lwork (`~.int`):
            (undocumented)

        niters (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)

        devInfo (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)
    """
    _hipsolverDnSSgesv__retval = hipsolverStatus_t(chipsolver.hipsolverDnSSgesv(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,n,nrhs,
        <float *>hip._util.types.Pointer.fromPyobj(A)._ptr,lda,
        <int *>hip._util.types.ListOfInt.fromPyobj(devIpiv)._ptr,
        <float *>hip._util.types.Pointer.fromPyobj(B)._ptr,ldb,
        <float *>hip._util.types.Pointer.fromPyobj(X)._ptr,ldx,
        <void *>hip._util.types.Pointer.fromPyobj(work)._ptr,lwork,
        <int *>hip._util.types.ListOfInt.fromPyobj(niters)._ptr,
        <int *>hip._util.types.ListOfInt.fromPyobj(devInfo)._ptr))
    return (_hipsolverDnSSgesv__retval,)


@cython.embedsignature(True)
def hipsolverDnDDgesv(object handle, int n, int nrhs, object A, int lda, object devIpiv, object B, int ldb, object X, int ldx, object work, unsigned long lwork, object niters, object devInfo):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        nrhs (`~.int`):
            (undocumented)

        A (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        devIpiv (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)

        B (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        ldb (`~.int`):
            (undocumented)

        X (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        ldx (`~.int`):
            (undocumented)

        work (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lwork (`~.int`):
            (undocumented)

        niters (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)

        devInfo (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)
    """
    _hipsolverDnDDgesv__retval = hipsolverStatus_t(chipsolver.hipsolverDnDDgesv(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,n,nrhs,
        <double *>hip._util.types.Pointer.fromPyobj(A)._ptr,lda,
        <int *>hip._util.types.ListOfInt.fromPyobj(devIpiv)._ptr,
        <double *>hip._util.types.Pointer.fromPyobj(B)._ptr,ldb,
        <double *>hip._util.types.Pointer.fromPyobj(X)._ptr,ldx,
        <void *>hip._util.types.Pointer.fromPyobj(work)._ptr,lwork,
        <int *>hip._util.types.ListOfInt.fromPyobj(niters)._ptr,
        <int *>hip._util.types.ListOfInt.fromPyobj(devInfo)._ptr))
    return (_hipsolverDnDDgesv__retval,)


@cython.embedsignature(True)
def hipsolverDnCCgesv(object handle, int n, int nrhs, object A, int lda, object devIpiv, object B, int ldb, object X, int ldx, object work, unsigned long lwork, object niters, object devInfo):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        nrhs (`~.int`):
            (undocumented)

        A (`~.float2`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        devIpiv (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)

        B (`~.float2`/`~.object`):
            (undocumented)

        ldb (`~.int`):
            (undocumented)

        X (`~.float2`/`~.object`):
            (undocumented)

        ldx (`~.int`):
            (undocumented)

        work (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lwork (`~.int`):
            (undocumented)

        niters (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)

        devInfo (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)
    """
    _hipsolverDnCCgesv__retval = hipsolverStatus_t(chipsolver.hipsolverDnCCgesv(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,n,nrhs,
        float2.fromPyobj(A).getElementPtr(),lda,
        <int *>hip._util.types.ListOfInt.fromPyobj(devIpiv)._ptr,
        float2.fromPyobj(B).getElementPtr(),ldb,
        float2.fromPyobj(X).getElementPtr(),ldx,
        <void *>hip._util.types.Pointer.fromPyobj(work)._ptr,lwork,
        <int *>hip._util.types.ListOfInt.fromPyobj(niters)._ptr,
        <int *>hip._util.types.ListOfInt.fromPyobj(devInfo)._ptr))
    return (_hipsolverDnCCgesv__retval,)


@cython.embedsignature(True)
def hipsolverDnZZgesv(object handle, int n, int nrhs, object A, int lda, object devIpiv, object B, int ldb, object X, int ldx, object work, unsigned long lwork, object niters, object devInfo):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        nrhs (`~.int`):
            (undocumented)

        A (`~.double2`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        devIpiv (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)

        B (`~.double2`/`~.object`):
            (undocumented)

        ldb (`~.int`):
            (undocumented)

        X (`~.double2`/`~.object`):
            (undocumented)

        ldx (`~.int`):
            (undocumented)

        work (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lwork (`~.int`):
            (undocumented)

        niters (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)

        devInfo (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)
    """
    _hipsolverDnZZgesv__retval = hipsolverStatus_t(chipsolver.hipsolverDnZZgesv(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,n,nrhs,
        double2.fromPyobj(A).getElementPtr(),lda,
        <int *>hip._util.types.ListOfInt.fromPyobj(devIpiv)._ptr,
        double2.fromPyobj(B).getElementPtr(),ldb,
        double2.fromPyobj(X).getElementPtr(),ldx,
        <void *>hip._util.types.Pointer.fromPyobj(work)._ptr,lwork,
        <int *>hip._util.types.ListOfInt.fromPyobj(niters)._ptr,
        <int *>hip._util.types.ListOfInt.fromPyobj(devInfo)._ptr))
    return (_hipsolverDnZZgesv__retval,)


@cython.embedsignature(True)
def hipsolverDnSgesvd_bufferSize(object handle, int m, int n, object lwork):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        m (`~.int`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        lwork (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)
    """
    _hipsolverDnSgesvd_bufferSize__retval = hipsolverStatus_t(chipsolver.hipsolverDnSgesvd_bufferSize(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,m,n,
        <int *>hip._util.types.ListOfInt.fromPyobj(lwork)._ptr))
    return (_hipsolverDnSgesvd_bufferSize__retval,)


@cython.embedsignature(True)
def hipsolverDnDgesvd_bufferSize(object handle, int m, int n, object lwork):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        m (`~.int`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        lwork (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)
    """
    _hipsolverDnDgesvd_bufferSize__retval = hipsolverStatus_t(chipsolver.hipsolverDnDgesvd_bufferSize(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,m,n,
        <int *>hip._util.types.ListOfInt.fromPyobj(lwork)._ptr))
    return (_hipsolverDnDgesvd_bufferSize__retval,)


@cython.embedsignature(True)
def hipsolverDnCgesvd_bufferSize(object handle, int m, int n, object lwork):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        m (`~.int`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        lwork (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)
    """
    _hipsolverDnCgesvd_bufferSize__retval = hipsolverStatus_t(chipsolver.hipsolverDnCgesvd_bufferSize(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,m,n,
        <int *>hip._util.types.ListOfInt.fromPyobj(lwork)._ptr))
    return (_hipsolverDnCgesvd_bufferSize__retval,)


@cython.embedsignature(True)
def hipsolverDnZgesvd_bufferSize(object handle, int m, int n, object lwork):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        m (`~.int`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        lwork (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)
    """
    _hipsolverDnZgesvd_bufferSize__retval = hipsolverStatus_t(chipsolver.hipsolverDnZgesvd_bufferSize(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,m,n,
        <int *>hip._util.types.ListOfInt.fromPyobj(lwork)._ptr))
    return (_hipsolverDnZgesvd_bufferSize__retval,)


@cython.embedsignature(True)
def hipsolverDnSgesvd(object handle, signed char jobu, signed char jobv, int m, int n, object A, int lda, object S, object U, int ldu, object V, int ldv, object work, int lwork, object rwork, object devInfo):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        jobu (`~.b`/`~.y`/`~.t`/`~.e`/`~.s`):
            (undocumented)

        jobv (`~.b`/`~.y`/`~.t`/`~.e`/`~.s`):
            (undocumented)

        m (`~.int`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        A (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        S (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        U (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        ldu (`~.int`):
            (undocumented)

        V (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        ldv (`~.int`):
            (undocumented)

        work (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lwork (`~.int`):
            (undocumented)

        rwork (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        devInfo (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)
    """
    _hipsolverDnSgesvd__retval = hipsolverStatus_t(chipsolver.hipsolverDnSgesvd(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,jobu,jobv,m,n,
        <float *>hip._util.types.Pointer.fromPyobj(A)._ptr,lda,
        <float *>hip._util.types.Pointer.fromPyobj(S)._ptr,
        <float *>hip._util.types.Pointer.fromPyobj(U)._ptr,ldu,
        <float *>hip._util.types.Pointer.fromPyobj(V)._ptr,ldv,
        <float *>hip._util.types.Pointer.fromPyobj(work)._ptr,lwork,
        <float *>hip._util.types.Pointer.fromPyobj(rwork)._ptr,
        <int *>hip._util.types.ListOfInt.fromPyobj(devInfo)._ptr))
    return (_hipsolverDnSgesvd__retval,)


@cython.embedsignature(True)
def hipsolverDnDgesvd(object handle, signed char jobu, signed char jobv, int m, int n, object A, int lda, object S, object U, int ldu, object V, int ldv, object work, int lwork, object rwork, object devInfo):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        jobu (`~.b`/`~.y`/`~.t`/`~.e`/`~.s`):
            (undocumented)

        jobv (`~.b`/`~.y`/`~.t`/`~.e`/`~.s`):
            (undocumented)

        m (`~.int`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        A (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        S (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        U (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        ldu (`~.int`):
            (undocumented)

        V (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        ldv (`~.int`):
            (undocumented)

        work (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lwork (`~.int`):
            (undocumented)

        rwork (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        devInfo (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)
    """
    _hipsolverDnDgesvd__retval = hipsolverStatus_t(chipsolver.hipsolverDnDgesvd(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,jobu,jobv,m,n,
        <double *>hip._util.types.Pointer.fromPyobj(A)._ptr,lda,
        <double *>hip._util.types.Pointer.fromPyobj(S)._ptr,
        <double *>hip._util.types.Pointer.fromPyobj(U)._ptr,ldu,
        <double *>hip._util.types.Pointer.fromPyobj(V)._ptr,ldv,
        <double *>hip._util.types.Pointer.fromPyobj(work)._ptr,lwork,
        <double *>hip._util.types.Pointer.fromPyobj(rwork)._ptr,
        <int *>hip._util.types.ListOfInt.fromPyobj(devInfo)._ptr))
    return (_hipsolverDnDgesvd__retval,)


@cython.embedsignature(True)
def hipsolverDnCgesvd(object handle, signed char jobu, signed char jobv, int m, int n, object A, int lda, object S, object U, int ldu, object V, int ldv, object work, int lwork, object rwork, object devInfo):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        jobu (`~.b`/`~.y`/`~.t`/`~.e`/`~.s`):
            (undocumented)

        jobv (`~.b`/`~.y`/`~.t`/`~.e`/`~.s`):
            (undocumented)

        m (`~.int`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        A (`~.float2`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        S (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        U (`~.float2`/`~.object`):
            (undocumented)

        ldu (`~.int`):
            (undocumented)

        V (`~.float2`/`~.object`):
            (undocumented)

        ldv (`~.int`):
            (undocumented)

        work (`~.float2`/`~.object`):
            (undocumented)

        lwork (`~.int`):
            (undocumented)

        rwork (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        devInfo (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)
    """
    _hipsolverDnCgesvd__retval = hipsolverStatus_t(chipsolver.hipsolverDnCgesvd(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,jobu,jobv,m,n,
        float2.fromPyobj(A).getElementPtr(),lda,
        <float *>hip._util.types.Pointer.fromPyobj(S)._ptr,
        float2.fromPyobj(U).getElementPtr(),ldu,
        float2.fromPyobj(V).getElementPtr(),ldv,
        float2.fromPyobj(work).getElementPtr(),lwork,
        <float *>hip._util.types.Pointer.fromPyobj(rwork)._ptr,
        <int *>hip._util.types.ListOfInt.fromPyobj(devInfo)._ptr))
    return (_hipsolverDnCgesvd__retval,)


@cython.embedsignature(True)
def hipsolverDnZgesvd(object handle, signed char jobu, signed char jobv, int m, int n, object A, int lda, object S, object U, int ldu, object V, int ldv, object work, int lwork, object rwork, object devInfo):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        jobu (`~.b`/`~.y`/`~.t`/`~.e`/`~.s`):
            (undocumented)

        jobv (`~.b`/`~.y`/`~.t`/`~.e`/`~.s`):
            (undocumented)

        m (`~.int`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        A (`~.double2`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        S (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        U (`~.double2`/`~.object`):
            (undocumented)

        ldu (`~.int`):
            (undocumented)

        V (`~.double2`/`~.object`):
            (undocumented)

        ldv (`~.int`):
            (undocumented)

        work (`~.double2`/`~.object`):
            (undocumented)

        lwork (`~.int`):
            (undocumented)

        rwork (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        devInfo (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)
    """
    _hipsolverDnZgesvd__retval = hipsolverStatus_t(chipsolver.hipsolverDnZgesvd(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,jobu,jobv,m,n,
        double2.fromPyobj(A).getElementPtr(),lda,
        <double *>hip._util.types.Pointer.fromPyobj(S)._ptr,
        double2.fromPyobj(U).getElementPtr(),ldu,
        double2.fromPyobj(V).getElementPtr(),ldv,
        double2.fromPyobj(work).getElementPtr(),lwork,
        <double *>hip._util.types.Pointer.fromPyobj(rwork)._ptr,
        <int *>hip._util.types.ListOfInt.fromPyobj(devInfo)._ptr))
    return (_hipsolverDnZgesvd__retval,)


@cython.embedsignature(True)
def hipsolverDnSgesvdj_bufferSize(object handle, object jobz, int econ, int m, int n, object A, int lda, object S, object U, int ldu, object V, int ldv, object lwork, object params):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        jobz (`~.hipsolverEigMode_t`):
            (undocumented)

        econ (`~.int`):
            (undocumented)

        m (`~.int`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        A (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        S (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        U (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        ldu (`~.int`):
            (undocumented)

        V (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        ldv (`~.int`):
            (undocumented)

        lwork (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)

        params (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)
    """
    if not isinstance(jobz,_hipsolverEigMode_t__Base):
        raise TypeError("argument 'jobz' must be of type '_hipsolverEigMode_t__Base'")
    _hipsolverDnSgesvdj_bufferSize__retval = hipsolverStatus_t(chipsolver.hipsolverDnSgesvdj_bufferSize(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,jobz.value,econ,m,n,
        <const float *>hip._util.types.Pointer.fromPyobj(A)._ptr,lda,
        <const float *>hip._util.types.Pointer.fromPyobj(S)._ptr,
        <const float *>hip._util.types.Pointer.fromPyobj(U)._ptr,ldu,
        <const float *>hip._util.types.Pointer.fromPyobj(V)._ptr,ldv,
        <int *>hip._util.types.ListOfInt.fromPyobj(lwork)._ptr,
        <void *>hip._util.types.Pointer.fromPyobj(params)._ptr))
    return (_hipsolverDnSgesvdj_bufferSize__retval,)


@cython.embedsignature(True)
def hipsolverDnDgesvdj_bufferSize(object handle, object jobz, int econ, int m, int n, object A, int lda, object S, object U, int ldu, object V, int ldv, object lwork, object params):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        jobz (`~.hipsolverEigMode_t`):
            (undocumented)

        econ (`~.int`):
            (undocumented)

        m (`~.int`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        A (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        S (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        U (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        ldu (`~.int`):
            (undocumented)

        V (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        ldv (`~.int`):
            (undocumented)

        lwork (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)

        params (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)
    """
    if not isinstance(jobz,_hipsolverEigMode_t__Base):
        raise TypeError("argument 'jobz' must be of type '_hipsolverEigMode_t__Base'")
    _hipsolverDnDgesvdj_bufferSize__retval = hipsolverStatus_t(chipsolver.hipsolverDnDgesvdj_bufferSize(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,jobz.value,econ,m,n,
        <const double *>hip._util.types.Pointer.fromPyobj(A)._ptr,lda,
        <const double *>hip._util.types.Pointer.fromPyobj(S)._ptr,
        <const double *>hip._util.types.Pointer.fromPyobj(U)._ptr,ldu,
        <const double *>hip._util.types.Pointer.fromPyobj(V)._ptr,ldv,
        <int *>hip._util.types.ListOfInt.fromPyobj(lwork)._ptr,
        <void *>hip._util.types.Pointer.fromPyobj(params)._ptr))
    return (_hipsolverDnDgesvdj_bufferSize__retval,)


@cython.embedsignature(True)
def hipsolverDnCgesvdj_bufferSize(object handle, object jobz, int econ, int m, int n, object A, int lda, object S, object U, int ldu, object V, int ldv, object lwork, object params):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        jobz (`~.hipsolverEigMode_t`):
            (undocumented)

        econ (`~.int`):
            (undocumented)

        m (`~.int`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        A (`~.float2`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        S (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        U (`~.float2`/`~.object`):
            (undocumented)

        ldu (`~.int`):
            (undocumented)

        V (`~.float2`/`~.object`):
            (undocumented)

        ldv (`~.int`):
            (undocumented)

        lwork (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)

        params (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)
    """
    if not isinstance(jobz,_hipsolverEigMode_t__Base):
        raise TypeError("argument 'jobz' must be of type '_hipsolverEigMode_t__Base'")
    _hipsolverDnCgesvdj_bufferSize__retval = hipsolverStatus_t(chipsolver.hipsolverDnCgesvdj_bufferSize(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,jobz.value,econ,m,n,
        float2.fromPyobj(A).getElementPtr(),lda,
        <const float *>hip._util.types.Pointer.fromPyobj(S)._ptr,
        float2.fromPyobj(U).getElementPtr(),ldu,
        float2.fromPyobj(V).getElementPtr(),ldv,
        <int *>hip._util.types.ListOfInt.fromPyobj(lwork)._ptr,
        <void *>hip._util.types.Pointer.fromPyobj(params)._ptr))
    return (_hipsolverDnCgesvdj_bufferSize__retval,)


@cython.embedsignature(True)
def hipsolverDnZgesvdj_bufferSize(object handle, object jobz, int econ, int m, int n, object A, int lda, object S, object U, int ldu, object V, int ldv, object lwork, object params):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        jobz (`~.hipsolverEigMode_t`):
            (undocumented)

        econ (`~.int`):
            (undocumented)

        m (`~.int`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        A (`~.double2`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        S (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        U (`~.double2`/`~.object`):
            (undocumented)

        ldu (`~.int`):
            (undocumented)

        V (`~.double2`/`~.object`):
            (undocumented)

        ldv (`~.int`):
            (undocumented)

        lwork (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)

        params (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)
    """
    if not isinstance(jobz,_hipsolverEigMode_t__Base):
        raise TypeError("argument 'jobz' must be of type '_hipsolverEigMode_t__Base'")
    _hipsolverDnZgesvdj_bufferSize__retval = hipsolverStatus_t(chipsolver.hipsolverDnZgesvdj_bufferSize(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,jobz.value,econ,m,n,
        double2.fromPyobj(A).getElementPtr(),lda,
        <const double *>hip._util.types.Pointer.fromPyobj(S)._ptr,
        double2.fromPyobj(U).getElementPtr(),ldu,
        double2.fromPyobj(V).getElementPtr(),ldv,
        <int *>hip._util.types.ListOfInt.fromPyobj(lwork)._ptr,
        <void *>hip._util.types.Pointer.fromPyobj(params)._ptr))
    return (_hipsolverDnZgesvdj_bufferSize__retval,)


@cython.embedsignature(True)
def hipsolverDnSgesvdj(object handle, object jobz, int econ, int m, int n, object A, int lda, object S, object U, int ldu, object V, int ldv, object work, int lwork, object devInfo, object params):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        jobz (`~.hipsolverEigMode_t`):
            (undocumented)

        econ (`~.int`):
            (undocumented)

        m (`~.int`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        A (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        S (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        U (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        ldu (`~.int`):
            (undocumented)

        V (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        ldv (`~.int`):
            (undocumented)

        work (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lwork (`~.int`):
            (undocumented)

        devInfo (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)

        params (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)
    """
    if not isinstance(jobz,_hipsolverEigMode_t__Base):
        raise TypeError("argument 'jobz' must be of type '_hipsolverEigMode_t__Base'")
    _hipsolverDnSgesvdj__retval = hipsolverStatus_t(chipsolver.hipsolverDnSgesvdj(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,jobz.value,econ,m,n,
        <float *>hip._util.types.Pointer.fromPyobj(A)._ptr,lda,
        <float *>hip._util.types.Pointer.fromPyobj(S)._ptr,
        <float *>hip._util.types.Pointer.fromPyobj(U)._ptr,ldu,
        <float *>hip._util.types.Pointer.fromPyobj(V)._ptr,ldv,
        <float *>hip._util.types.Pointer.fromPyobj(work)._ptr,lwork,
        <int *>hip._util.types.ListOfInt.fromPyobj(devInfo)._ptr,
        <void *>hip._util.types.Pointer.fromPyobj(params)._ptr))
    return (_hipsolverDnSgesvdj__retval,)


@cython.embedsignature(True)
def hipsolverDnDgesvdj(object handle, object jobz, int econ, int m, int n, object A, int lda, object S, object U, int ldu, object V, int ldv, object work, int lwork, object devInfo, object params):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        jobz (`~.hipsolverEigMode_t`):
            (undocumented)

        econ (`~.int`):
            (undocumented)

        m (`~.int`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        A (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        S (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        U (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        ldu (`~.int`):
            (undocumented)

        V (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        ldv (`~.int`):
            (undocumented)

        work (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lwork (`~.int`):
            (undocumented)

        devInfo (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)

        params (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)
    """
    if not isinstance(jobz,_hipsolverEigMode_t__Base):
        raise TypeError("argument 'jobz' must be of type '_hipsolverEigMode_t__Base'")
    _hipsolverDnDgesvdj__retval = hipsolverStatus_t(chipsolver.hipsolverDnDgesvdj(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,jobz.value,econ,m,n,
        <double *>hip._util.types.Pointer.fromPyobj(A)._ptr,lda,
        <double *>hip._util.types.Pointer.fromPyobj(S)._ptr,
        <double *>hip._util.types.Pointer.fromPyobj(U)._ptr,ldu,
        <double *>hip._util.types.Pointer.fromPyobj(V)._ptr,ldv,
        <double *>hip._util.types.Pointer.fromPyobj(work)._ptr,lwork,
        <int *>hip._util.types.ListOfInt.fromPyobj(devInfo)._ptr,
        <void *>hip._util.types.Pointer.fromPyobj(params)._ptr))
    return (_hipsolverDnDgesvdj__retval,)


@cython.embedsignature(True)
def hipsolverDnCgesvdj(object handle, object jobz, int econ, int m, int n, object A, int lda, object S, object U, int ldu, object V, int ldv, object work, int lwork, object devInfo, object params):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        jobz (`~.hipsolverEigMode_t`):
            (undocumented)

        econ (`~.int`):
            (undocumented)

        m (`~.int`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        A (`~.float2`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        S (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        U (`~.float2`/`~.object`):
            (undocumented)

        ldu (`~.int`):
            (undocumented)

        V (`~.float2`/`~.object`):
            (undocumented)

        ldv (`~.int`):
            (undocumented)

        work (`~.float2`/`~.object`):
            (undocumented)

        lwork (`~.int`):
            (undocumented)

        devInfo (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)

        params (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)
    """
    if not isinstance(jobz,_hipsolverEigMode_t__Base):
        raise TypeError("argument 'jobz' must be of type '_hipsolverEigMode_t__Base'")
    _hipsolverDnCgesvdj__retval = hipsolverStatus_t(chipsolver.hipsolverDnCgesvdj(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,jobz.value,econ,m,n,
        float2.fromPyobj(A).getElementPtr(),lda,
        <float *>hip._util.types.Pointer.fromPyobj(S)._ptr,
        float2.fromPyobj(U).getElementPtr(),ldu,
        float2.fromPyobj(V).getElementPtr(),ldv,
        float2.fromPyobj(work).getElementPtr(),lwork,
        <int *>hip._util.types.ListOfInt.fromPyobj(devInfo)._ptr,
        <void *>hip._util.types.Pointer.fromPyobj(params)._ptr))
    return (_hipsolverDnCgesvdj__retval,)


@cython.embedsignature(True)
def hipsolverDnZgesvdj(object handle, object jobz, int econ, int m, int n, object A, int lda, object S, object U, int ldu, object V, int ldv, object work, int lwork, object devInfo, object params):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        jobz (`~.hipsolverEigMode_t`):
            (undocumented)

        econ (`~.int`):
            (undocumented)

        m (`~.int`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        A (`~.double2`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        S (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        U (`~.double2`/`~.object`):
            (undocumented)

        ldu (`~.int`):
            (undocumented)

        V (`~.double2`/`~.object`):
            (undocumented)

        ldv (`~.int`):
            (undocumented)

        work (`~.double2`/`~.object`):
            (undocumented)

        lwork (`~.int`):
            (undocumented)

        devInfo (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)

        params (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)
    """
    if not isinstance(jobz,_hipsolverEigMode_t__Base):
        raise TypeError("argument 'jobz' must be of type '_hipsolverEigMode_t__Base'")
    _hipsolverDnZgesvdj__retval = hipsolverStatus_t(chipsolver.hipsolverDnZgesvdj(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,jobz.value,econ,m,n,
        double2.fromPyobj(A).getElementPtr(),lda,
        <double *>hip._util.types.Pointer.fromPyobj(S)._ptr,
        double2.fromPyobj(U).getElementPtr(),ldu,
        double2.fromPyobj(V).getElementPtr(),ldv,
        double2.fromPyobj(work).getElementPtr(),lwork,
        <int *>hip._util.types.ListOfInt.fromPyobj(devInfo)._ptr,
        <void *>hip._util.types.Pointer.fromPyobj(params)._ptr))
    return (_hipsolverDnZgesvdj__retval,)


@cython.embedsignature(True)
def hipsolverDnSgesvdjBatched_bufferSize(object handle, object jobz, int m, int n, object A, int lda, object S, object U, int ldu, object V, int ldv, object lwork, object params, int batch_count):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        jobz (`~.hipsolverEigMode_t`):
            (undocumented)

        m (`~.int`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        A (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        S (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        U (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        ldu (`~.int`):
            (undocumented)

        V (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        ldv (`~.int`):
            (undocumented)

        lwork (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)

        params (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        batch_count (`~.int`):
            (undocumented)
    """
    if not isinstance(jobz,_hipsolverEigMode_t__Base):
        raise TypeError("argument 'jobz' must be of type '_hipsolverEigMode_t__Base'")
    _hipsolverDnSgesvdjBatched_bufferSize__retval = hipsolverStatus_t(chipsolver.hipsolverDnSgesvdjBatched_bufferSize(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,jobz.value,m,n,
        <const float *>hip._util.types.Pointer.fromPyobj(A)._ptr,lda,
        <const float *>hip._util.types.Pointer.fromPyobj(S)._ptr,
        <const float *>hip._util.types.Pointer.fromPyobj(U)._ptr,ldu,
        <const float *>hip._util.types.Pointer.fromPyobj(V)._ptr,ldv,
        <int *>hip._util.types.ListOfInt.fromPyobj(lwork)._ptr,
        <void *>hip._util.types.Pointer.fromPyobj(params)._ptr,batch_count))
    return (_hipsolverDnSgesvdjBatched_bufferSize__retval,)


@cython.embedsignature(True)
def hipsolverDnDgesvdjBatched_bufferSize(object handle, object jobz, int m, int n, object A, int lda, object S, object U, int ldu, object V, int ldv, object lwork, object params, int batch_count):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        jobz (`~.hipsolverEigMode_t`):
            (undocumented)

        m (`~.int`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        A (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        S (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        U (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        ldu (`~.int`):
            (undocumented)

        V (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        ldv (`~.int`):
            (undocumented)

        lwork (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)

        params (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        batch_count (`~.int`):
            (undocumented)
    """
    if not isinstance(jobz,_hipsolverEigMode_t__Base):
        raise TypeError("argument 'jobz' must be of type '_hipsolverEigMode_t__Base'")
    _hipsolverDnDgesvdjBatched_bufferSize__retval = hipsolverStatus_t(chipsolver.hipsolverDnDgesvdjBatched_bufferSize(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,jobz.value,m,n,
        <const double *>hip._util.types.Pointer.fromPyobj(A)._ptr,lda,
        <const double *>hip._util.types.Pointer.fromPyobj(S)._ptr,
        <const double *>hip._util.types.Pointer.fromPyobj(U)._ptr,ldu,
        <const double *>hip._util.types.Pointer.fromPyobj(V)._ptr,ldv,
        <int *>hip._util.types.ListOfInt.fromPyobj(lwork)._ptr,
        <void *>hip._util.types.Pointer.fromPyobj(params)._ptr,batch_count))
    return (_hipsolverDnDgesvdjBatched_bufferSize__retval,)


@cython.embedsignature(True)
def hipsolverDnCgesvdjBatched_bufferSize(object handle, object jobz, int m, int n, object A, int lda, object S, object U, int ldu, object V, int ldv, object lwork, object params, int batch_count):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        jobz (`~.hipsolverEigMode_t`):
            (undocumented)

        m (`~.int`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        A (`~.float2`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        S (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        U (`~.float2`/`~.object`):
            (undocumented)

        ldu (`~.int`):
            (undocumented)

        V (`~.float2`/`~.object`):
            (undocumented)

        ldv (`~.int`):
            (undocumented)

        lwork (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)

        params (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        batch_count (`~.int`):
            (undocumented)
    """
    if not isinstance(jobz,_hipsolverEigMode_t__Base):
        raise TypeError("argument 'jobz' must be of type '_hipsolverEigMode_t__Base'")
    _hipsolverDnCgesvdjBatched_bufferSize__retval = hipsolverStatus_t(chipsolver.hipsolverDnCgesvdjBatched_bufferSize(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,jobz.value,m,n,
        float2.fromPyobj(A).getElementPtr(),lda,
        <const float *>hip._util.types.Pointer.fromPyobj(S)._ptr,
        float2.fromPyobj(U).getElementPtr(),ldu,
        float2.fromPyobj(V).getElementPtr(),ldv,
        <int *>hip._util.types.ListOfInt.fromPyobj(lwork)._ptr,
        <void *>hip._util.types.Pointer.fromPyobj(params)._ptr,batch_count))
    return (_hipsolverDnCgesvdjBatched_bufferSize__retval,)


@cython.embedsignature(True)
def hipsolverDnZgesvdjBatched_bufferSize(object handle, object jobz, int m, int n, object A, int lda, object S, object U, int ldu, object V, int ldv, object lwork, object params, int batch_count):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        jobz (`~.hipsolverEigMode_t`):
            (undocumented)

        m (`~.int`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        A (`~.double2`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        S (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        U (`~.double2`/`~.object`):
            (undocumented)

        ldu (`~.int`):
            (undocumented)

        V (`~.double2`/`~.object`):
            (undocumented)

        ldv (`~.int`):
            (undocumented)

        lwork (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)

        params (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        batch_count (`~.int`):
            (undocumented)
    """
    if not isinstance(jobz,_hipsolverEigMode_t__Base):
        raise TypeError("argument 'jobz' must be of type '_hipsolverEigMode_t__Base'")
    _hipsolverDnZgesvdjBatched_bufferSize__retval = hipsolverStatus_t(chipsolver.hipsolverDnZgesvdjBatched_bufferSize(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,jobz.value,m,n,
        double2.fromPyobj(A).getElementPtr(),lda,
        <const double *>hip._util.types.Pointer.fromPyobj(S)._ptr,
        double2.fromPyobj(U).getElementPtr(),ldu,
        double2.fromPyobj(V).getElementPtr(),ldv,
        <int *>hip._util.types.ListOfInt.fromPyobj(lwork)._ptr,
        <void *>hip._util.types.Pointer.fromPyobj(params)._ptr,batch_count))
    return (_hipsolverDnZgesvdjBatched_bufferSize__retval,)


@cython.embedsignature(True)
def hipsolverDnSgesvdjBatched(object handle, object jobz, int m, int n, object A, int lda, object S, object U, int ldu, object V, int ldv, object work, int lwork, object devInfo, object params, int batch_count):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        jobz (`~.hipsolverEigMode_t`):
            (undocumented)

        m (`~.int`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        A (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        S (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        U (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        ldu (`~.int`):
            (undocumented)

        V (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        ldv (`~.int`):
            (undocumented)

        work (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lwork (`~.int`):
            (undocumented)

        devInfo (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)

        params (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        batch_count (`~.int`):
            (undocumented)
    """
    if not isinstance(jobz,_hipsolverEigMode_t__Base):
        raise TypeError("argument 'jobz' must be of type '_hipsolverEigMode_t__Base'")
    _hipsolverDnSgesvdjBatched__retval = hipsolverStatus_t(chipsolver.hipsolverDnSgesvdjBatched(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,jobz.value,m,n,
        <float *>hip._util.types.Pointer.fromPyobj(A)._ptr,lda,
        <float *>hip._util.types.Pointer.fromPyobj(S)._ptr,
        <float *>hip._util.types.Pointer.fromPyobj(U)._ptr,ldu,
        <float *>hip._util.types.Pointer.fromPyobj(V)._ptr,ldv,
        <float *>hip._util.types.Pointer.fromPyobj(work)._ptr,lwork,
        <int *>hip._util.types.ListOfInt.fromPyobj(devInfo)._ptr,
        <void *>hip._util.types.Pointer.fromPyobj(params)._ptr,batch_count))
    return (_hipsolverDnSgesvdjBatched__retval,)


@cython.embedsignature(True)
def hipsolverDnDgesvdjBatched(object handle, object jobz, int m, int n, object A, int lda, object S, object U, int ldu, object V, int ldv, object work, int lwork, object devInfo, object params, int batch_count):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        jobz (`~.hipsolverEigMode_t`):
            (undocumented)

        m (`~.int`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        A (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        S (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        U (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        ldu (`~.int`):
            (undocumented)

        V (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        ldv (`~.int`):
            (undocumented)

        work (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lwork (`~.int`):
            (undocumented)

        devInfo (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)

        params (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        batch_count (`~.int`):
            (undocumented)
    """
    if not isinstance(jobz,_hipsolverEigMode_t__Base):
        raise TypeError("argument 'jobz' must be of type '_hipsolverEigMode_t__Base'")
    _hipsolverDnDgesvdjBatched__retval = hipsolverStatus_t(chipsolver.hipsolverDnDgesvdjBatched(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,jobz.value,m,n,
        <double *>hip._util.types.Pointer.fromPyobj(A)._ptr,lda,
        <double *>hip._util.types.Pointer.fromPyobj(S)._ptr,
        <double *>hip._util.types.Pointer.fromPyobj(U)._ptr,ldu,
        <double *>hip._util.types.Pointer.fromPyobj(V)._ptr,ldv,
        <double *>hip._util.types.Pointer.fromPyobj(work)._ptr,lwork,
        <int *>hip._util.types.ListOfInt.fromPyobj(devInfo)._ptr,
        <void *>hip._util.types.Pointer.fromPyobj(params)._ptr,batch_count))
    return (_hipsolverDnDgesvdjBatched__retval,)


@cython.embedsignature(True)
def hipsolverDnCgesvdjBatched(object handle, object jobz, int m, int n, object A, int lda, object S, object U, int ldu, object V, int ldv, object work, int lwork, object devInfo, object params, int batch_count):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        jobz (`~.hipsolverEigMode_t`):
            (undocumented)

        m (`~.int`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        A (`~.float2`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        S (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        U (`~.float2`/`~.object`):
            (undocumented)

        ldu (`~.int`):
            (undocumented)

        V (`~.float2`/`~.object`):
            (undocumented)

        ldv (`~.int`):
            (undocumented)

        work (`~.float2`/`~.object`):
            (undocumented)

        lwork (`~.int`):
            (undocumented)

        devInfo (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)

        params (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        batch_count (`~.int`):
            (undocumented)
    """
    if not isinstance(jobz,_hipsolverEigMode_t__Base):
        raise TypeError("argument 'jobz' must be of type '_hipsolverEigMode_t__Base'")
    _hipsolverDnCgesvdjBatched__retval = hipsolverStatus_t(chipsolver.hipsolverDnCgesvdjBatched(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,jobz.value,m,n,
        float2.fromPyobj(A).getElementPtr(),lda,
        <float *>hip._util.types.Pointer.fromPyobj(S)._ptr,
        float2.fromPyobj(U).getElementPtr(),ldu,
        float2.fromPyobj(V).getElementPtr(),ldv,
        float2.fromPyobj(work).getElementPtr(),lwork,
        <int *>hip._util.types.ListOfInt.fromPyobj(devInfo)._ptr,
        <void *>hip._util.types.Pointer.fromPyobj(params)._ptr,batch_count))
    return (_hipsolverDnCgesvdjBatched__retval,)


@cython.embedsignature(True)
def hipsolverDnZgesvdjBatched(object handle, object jobz, int m, int n, object A, int lda, object S, object U, int ldu, object V, int ldv, object work, int lwork, object devInfo, object params, int batch_count):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        jobz (`~.hipsolverEigMode_t`):
            (undocumented)

        m (`~.int`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        A (`~.double2`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        S (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        U (`~.double2`/`~.object`):
            (undocumented)

        ldu (`~.int`):
            (undocumented)

        V (`~.double2`/`~.object`):
            (undocumented)

        ldv (`~.int`):
            (undocumented)

        work (`~.double2`/`~.object`):
            (undocumented)

        lwork (`~.int`):
            (undocumented)

        devInfo (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)

        params (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        batch_count (`~.int`):
            (undocumented)
    """
    if not isinstance(jobz,_hipsolverEigMode_t__Base):
        raise TypeError("argument 'jobz' must be of type '_hipsolverEigMode_t__Base'")
    _hipsolverDnZgesvdjBatched__retval = hipsolverStatus_t(chipsolver.hipsolverDnZgesvdjBatched(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,jobz.value,m,n,
        double2.fromPyobj(A).getElementPtr(),lda,
        <double *>hip._util.types.Pointer.fromPyobj(S)._ptr,
        double2.fromPyobj(U).getElementPtr(),ldu,
        double2.fromPyobj(V).getElementPtr(),ldv,
        double2.fromPyobj(work).getElementPtr(),lwork,
        <int *>hip._util.types.ListOfInt.fromPyobj(devInfo)._ptr,
        <void *>hip._util.types.Pointer.fromPyobj(params)._ptr,batch_count))
    return (_hipsolverDnZgesvdjBatched__retval,)


@cython.embedsignature(True)
def hipsolverDnSgesvdaStridedBatched_bufferSize(object handle, object jobz, int rank, int m, int n, object A, int lda, long long strideA, object S, long long strideS, object U, int ldu, long long strideU, object V, int ldv, long long strideV, object lwork, int batch_count):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        jobz (`~.hipsolverEigMode_t`):
            (undocumented)

        rank (`~.int`):
            (undocumented)

        m (`~.int`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        A (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        strideA (`~.int`):
            (undocumented)

        S (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        strideS (`~.int`):
            (undocumented)

        U (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        ldu (`~.int`):
            (undocumented)

        strideU (`~.int`):
            (undocumented)

        V (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        ldv (`~.int`):
            (undocumented)

        strideV (`~.int`):
            (undocumented)

        lwork (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)

        batch_count (`~.int`):
            (undocumented)
    """
    if not isinstance(jobz,_hipsolverEigMode_t__Base):
        raise TypeError("argument 'jobz' must be of type '_hipsolverEigMode_t__Base'")
    _hipsolverDnSgesvdaStridedBatched_bufferSize__retval = hipsolverStatus_t(chipsolver.hipsolverDnSgesvdaStridedBatched_bufferSize(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,jobz.value,rank,m,n,
        <const float *>hip._util.types.Pointer.fromPyobj(A)._ptr,lda,strideA,
        <const float *>hip._util.types.Pointer.fromPyobj(S)._ptr,strideS,
        <const float *>hip._util.types.Pointer.fromPyobj(U)._ptr,ldu,strideU,
        <const float *>hip._util.types.Pointer.fromPyobj(V)._ptr,ldv,strideV,
        <int *>hip._util.types.ListOfInt.fromPyobj(lwork)._ptr,batch_count))
    return (_hipsolverDnSgesvdaStridedBatched_bufferSize__retval,)


@cython.embedsignature(True)
def hipsolverDnDgesvdaStridedBatched_bufferSize(object handle, object jobz, int rank, int m, int n, object A, int lda, long long strideA, object S, long long strideS, object U, int ldu, long long strideU, object V, int ldv, long long strideV, object lwork, int batch_count):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        jobz (`~.hipsolverEigMode_t`):
            (undocumented)

        rank (`~.int`):
            (undocumented)

        m (`~.int`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        A (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        strideA (`~.int`):
            (undocumented)

        S (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        strideS (`~.int`):
            (undocumented)

        U (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        ldu (`~.int`):
            (undocumented)

        strideU (`~.int`):
            (undocumented)

        V (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        ldv (`~.int`):
            (undocumented)

        strideV (`~.int`):
            (undocumented)

        lwork (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)

        batch_count (`~.int`):
            (undocumented)
    """
    if not isinstance(jobz,_hipsolverEigMode_t__Base):
        raise TypeError("argument 'jobz' must be of type '_hipsolverEigMode_t__Base'")
    _hipsolverDnDgesvdaStridedBatched_bufferSize__retval = hipsolverStatus_t(chipsolver.hipsolverDnDgesvdaStridedBatched_bufferSize(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,jobz.value,rank,m,n,
        <const double *>hip._util.types.Pointer.fromPyobj(A)._ptr,lda,strideA,
        <const double *>hip._util.types.Pointer.fromPyobj(S)._ptr,strideS,
        <const double *>hip._util.types.Pointer.fromPyobj(U)._ptr,ldu,strideU,
        <const double *>hip._util.types.Pointer.fromPyobj(V)._ptr,ldv,strideV,
        <int *>hip._util.types.ListOfInt.fromPyobj(lwork)._ptr,batch_count))
    return (_hipsolverDnDgesvdaStridedBatched_bufferSize__retval,)


@cython.embedsignature(True)
def hipsolverDnCgesvdaStridedBatched_bufferSize(object handle, object jobz, int rank, int m, int n, object A, int lda, long long strideA, object S, long long strideS, object U, int ldu, long long strideU, object V, int ldv, long long strideV, object lwork, int batch_count):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        jobz (`~.hipsolverEigMode_t`):
            (undocumented)

        rank (`~.int`):
            (undocumented)

        m (`~.int`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        A (`~.float2`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        strideA (`~.int`):
            (undocumented)

        S (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        strideS (`~.int`):
            (undocumented)

        U (`~.float2`/`~.object`):
            (undocumented)

        ldu (`~.int`):
            (undocumented)

        strideU (`~.int`):
            (undocumented)

        V (`~.float2`/`~.object`):
            (undocumented)

        ldv (`~.int`):
            (undocumented)

        strideV (`~.int`):
            (undocumented)

        lwork (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)

        batch_count (`~.int`):
            (undocumented)
    """
    if not isinstance(jobz,_hipsolverEigMode_t__Base):
        raise TypeError("argument 'jobz' must be of type '_hipsolverEigMode_t__Base'")
    _hipsolverDnCgesvdaStridedBatched_bufferSize__retval = hipsolverStatus_t(chipsolver.hipsolverDnCgesvdaStridedBatched_bufferSize(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,jobz.value,rank,m,n,
        float2.fromPyobj(A).getElementPtr(),lda,strideA,
        <const float *>hip._util.types.Pointer.fromPyobj(S)._ptr,strideS,
        float2.fromPyobj(U).getElementPtr(),ldu,strideU,
        float2.fromPyobj(V).getElementPtr(),ldv,strideV,
        <int *>hip._util.types.ListOfInt.fromPyobj(lwork)._ptr,batch_count))
    return (_hipsolverDnCgesvdaStridedBatched_bufferSize__retval,)


@cython.embedsignature(True)
def hipsolverDnZgesvdaStridedBatched_bufferSize(object handle, object jobz, int rank, int m, int n, object A, int lda, long long strideA, object S, long long strideS, object U, int ldu, long long strideU, object V, int ldv, long long strideV, object lwork, int batch_count):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        jobz (`~.hipsolverEigMode_t`):
            (undocumented)

        rank (`~.int`):
            (undocumented)

        m (`~.int`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        A (`~.double2`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        strideA (`~.int`):
            (undocumented)

        S (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        strideS (`~.int`):
            (undocumented)

        U (`~.double2`/`~.object`):
            (undocumented)

        ldu (`~.int`):
            (undocumented)

        strideU (`~.int`):
            (undocumented)

        V (`~.double2`/`~.object`):
            (undocumented)

        ldv (`~.int`):
            (undocumented)

        strideV (`~.int`):
            (undocumented)

        lwork (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)

        batch_count (`~.int`):
            (undocumented)
    """
    if not isinstance(jobz,_hipsolverEigMode_t__Base):
        raise TypeError("argument 'jobz' must be of type '_hipsolverEigMode_t__Base'")
    _hipsolverDnZgesvdaStridedBatched_bufferSize__retval = hipsolverStatus_t(chipsolver.hipsolverDnZgesvdaStridedBatched_bufferSize(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,jobz.value,rank,m,n,
        double2.fromPyobj(A).getElementPtr(),lda,strideA,
        <const double *>hip._util.types.Pointer.fromPyobj(S)._ptr,strideS,
        double2.fromPyobj(U).getElementPtr(),ldu,strideU,
        double2.fromPyobj(V).getElementPtr(),ldv,strideV,
        <int *>hip._util.types.ListOfInt.fromPyobj(lwork)._ptr,batch_count))
    return (_hipsolverDnZgesvdaStridedBatched_bufferSize__retval,)


@cython.embedsignature(True)
def hipsolverDnSgesvdaStridedBatched(object handle, object jobz, int rank, int m, int n, object A, int lda, long long strideA, object S, long long strideS, object U, int ldu, long long strideU, object V, int ldv, long long strideV, object work, int lwork, object devInfo, object hRnrmF, int batch_count):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        jobz (`~.hipsolverEigMode_t`):
            (undocumented)

        rank (`~.int`):
            (undocumented)

        m (`~.int`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        A (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        strideA (`~.int`):
            (undocumented)

        S (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        strideS (`~.int`):
            (undocumented)

        U (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        ldu (`~.int`):
            (undocumented)

        strideU (`~.int`):
            (undocumented)

        V (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        ldv (`~.int`):
            (undocumented)

        strideV (`~.int`):
            (undocumented)

        work (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lwork (`~.int`):
            (undocumented)

        devInfo (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)

        hRnrmF (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        batch_count (`~.int`):
            (undocumented)
    """
    if not isinstance(jobz,_hipsolverEigMode_t__Base):
        raise TypeError("argument 'jobz' must be of type '_hipsolverEigMode_t__Base'")
    _hipsolverDnSgesvdaStridedBatched__retval = hipsolverStatus_t(chipsolver.hipsolverDnSgesvdaStridedBatched(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,jobz.value,rank,m,n,
        <const float *>hip._util.types.Pointer.fromPyobj(A)._ptr,lda,strideA,
        <float *>hip._util.types.Pointer.fromPyobj(S)._ptr,strideS,
        <float *>hip._util.types.Pointer.fromPyobj(U)._ptr,ldu,strideU,
        <float *>hip._util.types.Pointer.fromPyobj(V)._ptr,ldv,strideV,
        <float *>hip._util.types.Pointer.fromPyobj(work)._ptr,lwork,
        <int *>hip._util.types.ListOfInt.fromPyobj(devInfo)._ptr,
        <double *>hip._util.types.Pointer.fromPyobj(hRnrmF)._ptr,batch_count))
    return (_hipsolverDnSgesvdaStridedBatched__retval,)


@cython.embedsignature(True)
def hipsolverDnDgesvdaStridedBatched(object handle, object jobz, int rank, int m, int n, object A, int lda, long long strideA, object S, long long strideS, object U, int ldu, long long strideU, object V, int ldv, long long strideV, object work, int lwork, object devInfo, object hRnrmF, int batch_count):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        jobz (`~.hipsolverEigMode_t`):
            (undocumented)

        rank (`~.int`):
            (undocumented)

        m (`~.int`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        A (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        strideA (`~.int`):
            (undocumented)

        S (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        strideS (`~.int`):
            (undocumented)

        U (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        ldu (`~.int`):
            (undocumented)

        strideU (`~.int`):
            (undocumented)

        V (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        ldv (`~.int`):
            (undocumented)

        strideV (`~.int`):
            (undocumented)

        work (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lwork (`~.int`):
            (undocumented)

        devInfo (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)

        hRnrmF (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        batch_count (`~.int`):
            (undocumented)
    """
    if not isinstance(jobz,_hipsolverEigMode_t__Base):
        raise TypeError("argument 'jobz' must be of type '_hipsolverEigMode_t__Base'")
    _hipsolverDnDgesvdaStridedBatched__retval = hipsolverStatus_t(chipsolver.hipsolverDnDgesvdaStridedBatched(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,jobz.value,rank,m,n,
        <const double *>hip._util.types.Pointer.fromPyobj(A)._ptr,lda,strideA,
        <double *>hip._util.types.Pointer.fromPyobj(S)._ptr,strideS,
        <double *>hip._util.types.Pointer.fromPyobj(U)._ptr,ldu,strideU,
        <double *>hip._util.types.Pointer.fromPyobj(V)._ptr,ldv,strideV,
        <double *>hip._util.types.Pointer.fromPyobj(work)._ptr,lwork,
        <int *>hip._util.types.ListOfInt.fromPyobj(devInfo)._ptr,
        <double *>hip._util.types.Pointer.fromPyobj(hRnrmF)._ptr,batch_count))
    return (_hipsolverDnDgesvdaStridedBatched__retval,)


@cython.embedsignature(True)
def hipsolverDnCgesvdaStridedBatched(object handle, object jobz, int rank, int m, int n, object A, int lda, long long strideA, object S, long long strideS, object U, int ldu, long long strideU, object V, int ldv, long long strideV, object work, int lwork, object devInfo, object hRnrmF, int batch_count):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        jobz (`~.hipsolverEigMode_t`):
            (undocumented)

        rank (`~.int`):
            (undocumented)

        m (`~.int`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        A (`~.float2`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        strideA (`~.int`):
            (undocumented)

        S (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        strideS (`~.int`):
            (undocumented)

        U (`~.float2`/`~.object`):
            (undocumented)

        ldu (`~.int`):
            (undocumented)

        strideU (`~.int`):
            (undocumented)

        V (`~.float2`/`~.object`):
            (undocumented)

        ldv (`~.int`):
            (undocumented)

        strideV (`~.int`):
            (undocumented)

        work (`~.float2`/`~.object`):
            (undocumented)

        lwork (`~.int`):
            (undocumented)

        devInfo (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)

        hRnrmF (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        batch_count (`~.int`):
            (undocumented)
    """
    if not isinstance(jobz,_hipsolverEigMode_t__Base):
        raise TypeError("argument 'jobz' must be of type '_hipsolverEigMode_t__Base'")
    _hipsolverDnCgesvdaStridedBatched__retval = hipsolverStatus_t(chipsolver.hipsolverDnCgesvdaStridedBatched(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,jobz.value,rank,m,n,
        float2.fromPyobj(A).getElementPtr(),lda,strideA,
        <float *>hip._util.types.Pointer.fromPyobj(S)._ptr,strideS,
        float2.fromPyobj(U).getElementPtr(),ldu,strideU,
        float2.fromPyobj(V).getElementPtr(),ldv,strideV,
        float2.fromPyobj(work).getElementPtr(),lwork,
        <int *>hip._util.types.ListOfInt.fromPyobj(devInfo)._ptr,
        <double *>hip._util.types.Pointer.fromPyobj(hRnrmF)._ptr,batch_count))
    return (_hipsolverDnCgesvdaStridedBatched__retval,)


@cython.embedsignature(True)
def hipsolverDnZgesvdaStridedBatched(object handle, object jobz, int rank, int m, int n, object A, int lda, long long strideA, object S, long long strideS, object U, int ldu, long long strideU, object V, int ldv, long long strideV, object work, int lwork, object devInfo, object hRnrmF, int batch_count):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        jobz (`~.hipsolverEigMode_t`):
            (undocumented)

        rank (`~.int`):
            (undocumented)

        m (`~.int`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        A (`~.double2`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        strideA (`~.int`):
            (undocumented)

        S (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        strideS (`~.int`):
            (undocumented)

        U (`~.double2`/`~.object`):
            (undocumented)

        ldu (`~.int`):
            (undocumented)

        strideU (`~.int`):
            (undocumented)

        V (`~.double2`/`~.object`):
            (undocumented)

        ldv (`~.int`):
            (undocumented)

        strideV (`~.int`):
            (undocumented)

        work (`~.double2`/`~.object`):
            (undocumented)

        lwork (`~.int`):
            (undocumented)

        devInfo (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)

        hRnrmF (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        batch_count (`~.int`):
            (undocumented)
    """
    if not isinstance(jobz,_hipsolverEigMode_t__Base):
        raise TypeError("argument 'jobz' must be of type '_hipsolverEigMode_t__Base'")
    _hipsolverDnZgesvdaStridedBatched__retval = hipsolverStatus_t(chipsolver.hipsolverDnZgesvdaStridedBatched(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,jobz.value,rank,m,n,
        double2.fromPyobj(A).getElementPtr(),lda,strideA,
        <double *>hip._util.types.Pointer.fromPyobj(S)._ptr,strideS,
        double2.fromPyobj(U).getElementPtr(),ldu,strideU,
        double2.fromPyobj(V).getElementPtr(),ldv,strideV,
        double2.fromPyobj(work).getElementPtr(),lwork,
        <int *>hip._util.types.ListOfInt.fromPyobj(devInfo)._ptr,
        <double *>hip._util.types.Pointer.fromPyobj(hRnrmF)._ptr,batch_count))
    return (_hipsolverDnZgesvdaStridedBatched__retval,)


@cython.embedsignature(True)
def hipsolverDnSgetrf_bufferSize(object handle, int m, int n, object A, int lda, object lwork):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        m (`~.int`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        A (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        lwork (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)
    """
    _hipsolverDnSgetrf_bufferSize__retval = hipsolverStatus_t(chipsolver.hipsolverDnSgetrf_bufferSize(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,m,n,
        <float *>hip._util.types.Pointer.fromPyobj(A)._ptr,lda,
        <int *>hip._util.types.ListOfInt.fromPyobj(lwork)._ptr))
    return (_hipsolverDnSgetrf_bufferSize__retval,)


@cython.embedsignature(True)
def hipsolverDnDgetrf_bufferSize(object handle, int m, int n, object A, int lda, object lwork):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        m (`~.int`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        A (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        lwork (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)
    """
    _hipsolverDnDgetrf_bufferSize__retval = hipsolverStatus_t(chipsolver.hipsolverDnDgetrf_bufferSize(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,m,n,
        <double *>hip._util.types.Pointer.fromPyobj(A)._ptr,lda,
        <int *>hip._util.types.ListOfInt.fromPyobj(lwork)._ptr))
    return (_hipsolverDnDgetrf_bufferSize__retval,)


@cython.embedsignature(True)
def hipsolverDnCgetrf_bufferSize(object handle, int m, int n, object A, int lda, object lwork):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        m (`~.int`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        A (`~.float2`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        lwork (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)
    """
    _hipsolverDnCgetrf_bufferSize__retval = hipsolverStatus_t(chipsolver.hipsolverDnCgetrf_bufferSize(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,m,n,
        float2.fromPyobj(A).getElementPtr(),lda,
        <int *>hip._util.types.ListOfInt.fromPyobj(lwork)._ptr))
    return (_hipsolverDnCgetrf_bufferSize__retval,)


@cython.embedsignature(True)
def hipsolverDnZgetrf_bufferSize(object handle, int m, int n, object A, int lda, object lwork):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        m (`~.int`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        A (`~.double2`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        lwork (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)
    """
    _hipsolverDnZgetrf_bufferSize__retval = hipsolverStatus_t(chipsolver.hipsolverDnZgetrf_bufferSize(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,m,n,
        double2.fromPyobj(A).getElementPtr(),lda,
        <int *>hip._util.types.ListOfInt.fromPyobj(lwork)._ptr))
    return (_hipsolverDnZgetrf_bufferSize__retval,)


@cython.embedsignature(True)
def hipsolverDnSgetrf(object handle, int m, int n, object A, int lda, object work, object devIpiv, object devInfo):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        m (`~.int`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        A (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        work (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        devIpiv (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)

        devInfo (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)
    """
    _hipsolverDnSgetrf__retval = hipsolverStatus_t(chipsolver.hipsolverDnSgetrf(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,m,n,
        <float *>hip._util.types.Pointer.fromPyobj(A)._ptr,lda,
        <float *>hip._util.types.Pointer.fromPyobj(work)._ptr,
        <int *>hip._util.types.ListOfInt.fromPyobj(devIpiv)._ptr,
        <int *>hip._util.types.ListOfInt.fromPyobj(devInfo)._ptr))
    return (_hipsolverDnSgetrf__retval,)


@cython.embedsignature(True)
def hipsolverDnDgetrf(object handle, int m, int n, object A, int lda, object work, object devIpiv, object devInfo):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        m (`~.int`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        A (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        work (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        devIpiv (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)

        devInfo (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)
    """
    _hipsolverDnDgetrf__retval = hipsolverStatus_t(chipsolver.hipsolverDnDgetrf(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,m,n,
        <double *>hip._util.types.Pointer.fromPyobj(A)._ptr,lda,
        <double *>hip._util.types.Pointer.fromPyobj(work)._ptr,
        <int *>hip._util.types.ListOfInt.fromPyobj(devIpiv)._ptr,
        <int *>hip._util.types.ListOfInt.fromPyobj(devInfo)._ptr))
    return (_hipsolverDnDgetrf__retval,)


@cython.embedsignature(True)
def hipsolverDnCgetrf(object handle, int m, int n, object A, int lda, object work, object devIpiv, object devInfo):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        m (`~.int`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        A (`~.float2`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        work (`~.float2`/`~.object`):
            (undocumented)

        devIpiv (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)

        devInfo (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)
    """
    _hipsolverDnCgetrf__retval = hipsolverStatus_t(chipsolver.hipsolverDnCgetrf(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,m,n,
        float2.fromPyobj(A).getElementPtr(),lda,
        float2.fromPyobj(work).getElementPtr(),
        <int *>hip._util.types.ListOfInt.fromPyobj(devIpiv)._ptr,
        <int *>hip._util.types.ListOfInt.fromPyobj(devInfo)._ptr))
    return (_hipsolverDnCgetrf__retval,)


@cython.embedsignature(True)
def hipsolverDnZgetrf(object handle, int m, int n, object A, int lda, object work, object devIpiv, object devInfo):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        m (`~.int`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        A (`~.double2`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        work (`~.double2`/`~.object`):
            (undocumented)

        devIpiv (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)

        devInfo (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)
    """
    _hipsolverDnZgetrf__retval = hipsolverStatus_t(chipsolver.hipsolverDnZgetrf(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,m,n,
        double2.fromPyobj(A).getElementPtr(),lda,
        double2.fromPyobj(work).getElementPtr(),
        <int *>hip._util.types.ListOfInt.fromPyobj(devIpiv)._ptr,
        <int *>hip._util.types.ListOfInt.fromPyobj(devInfo)._ptr))
    return (_hipsolverDnZgetrf__retval,)


@cython.embedsignature(True)
def hipsolverDnSgetrs(object handle, object trans, int n, int nrhs, object A, int lda, object devIpiv, object B, int ldb, object devInfo):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        trans (`~.hipblasOperation_t`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        nrhs (`~.int`):
            (undocumented)

        A (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        devIpiv (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)

        B (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        ldb (`~.int`):
            (undocumented)

        devInfo (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)
    """
    if not isinstance(trans,_hipblasOperation_t__Base):
        raise TypeError("argument 'trans' must be of type '_hipblasOperation_t__Base'")
    _hipsolverDnSgetrs__retval = hipsolverStatus_t(chipsolver.hipsolverDnSgetrs(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,trans.value,n,nrhs,
        <const float *>hip._util.types.Pointer.fromPyobj(A)._ptr,lda,
        <const int *>hip._util.types.ListOfInt.fromPyobj(devIpiv)._ptr,
        <float *>hip._util.types.Pointer.fromPyobj(B)._ptr,ldb,
        <int *>hip._util.types.ListOfInt.fromPyobj(devInfo)._ptr))
    return (_hipsolverDnSgetrs__retval,)


@cython.embedsignature(True)
def hipsolverDnDgetrs(object handle, object trans, int n, int nrhs, object A, int lda, object devIpiv, object B, int ldb, object devInfo):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        trans (`~.hipblasOperation_t`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        nrhs (`~.int`):
            (undocumented)

        A (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        devIpiv (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)

        B (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        ldb (`~.int`):
            (undocumented)

        devInfo (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)
    """
    if not isinstance(trans,_hipblasOperation_t__Base):
        raise TypeError("argument 'trans' must be of type '_hipblasOperation_t__Base'")
    _hipsolverDnDgetrs__retval = hipsolverStatus_t(chipsolver.hipsolverDnDgetrs(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,trans.value,n,nrhs,
        <const double *>hip._util.types.Pointer.fromPyobj(A)._ptr,lda,
        <const int *>hip._util.types.ListOfInt.fromPyobj(devIpiv)._ptr,
        <double *>hip._util.types.Pointer.fromPyobj(B)._ptr,ldb,
        <int *>hip._util.types.ListOfInt.fromPyobj(devInfo)._ptr))
    return (_hipsolverDnDgetrs__retval,)


@cython.embedsignature(True)
def hipsolverDnCgetrs(object handle, object trans, int n, int nrhs, object A, int lda, object devIpiv, object B, int ldb, object devInfo):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        trans (`~.hipblasOperation_t`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        nrhs (`~.int`):
            (undocumented)

        A (`~.float2`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        devIpiv (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)

        B (`~.float2`/`~.object`):
            (undocumented)

        ldb (`~.int`):
            (undocumented)

        devInfo (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)
    """
    if not isinstance(trans,_hipblasOperation_t__Base):
        raise TypeError("argument 'trans' must be of type '_hipblasOperation_t__Base'")
    _hipsolverDnCgetrs__retval = hipsolverStatus_t(chipsolver.hipsolverDnCgetrs(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,trans.value,n,nrhs,
        float2.fromPyobj(A).getElementPtr(),lda,
        <const int *>hip._util.types.ListOfInt.fromPyobj(devIpiv)._ptr,
        float2.fromPyobj(B).getElementPtr(),ldb,
        <int *>hip._util.types.ListOfInt.fromPyobj(devInfo)._ptr))
    return (_hipsolverDnCgetrs__retval,)


@cython.embedsignature(True)
def hipsolverDnZgetrs(object handle, object trans, int n, int nrhs, object A, int lda, object devIpiv, object B, int ldb, object devInfo):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        trans (`~.hipblasOperation_t`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        nrhs (`~.int`):
            (undocumented)

        A (`~.double2`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        devIpiv (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)

        B (`~.double2`/`~.object`):
            (undocumented)

        ldb (`~.int`):
            (undocumented)

        devInfo (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)
    """
    if not isinstance(trans,_hipblasOperation_t__Base):
        raise TypeError("argument 'trans' must be of type '_hipblasOperation_t__Base'")
    _hipsolverDnZgetrs__retval = hipsolverStatus_t(chipsolver.hipsolverDnZgetrs(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,trans.value,n,nrhs,
        double2.fromPyobj(A).getElementPtr(),lda,
        <const int *>hip._util.types.ListOfInt.fromPyobj(devIpiv)._ptr,
        double2.fromPyobj(B).getElementPtr(),ldb,
        <int *>hip._util.types.ListOfInt.fromPyobj(devInfo)._ptr))
    return (_hipsolverDnZgetrs__retval,)


@cython.embedsignature(True)
def hipsolverDnSpotrf_bufferSize(object handle, object uplo, int n, object A, int lda, object lwork):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        uplo (`~.hipblasFillMode_t`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        A (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        lwork (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)
    """
    if not isinstance(uplo,_hipblasFillMode_t__Base):
        raise TypeError("argument 'uplo' must be of type '_hipblasFillMode_t__Base'")
    _hipsolverDnSpotrf_bufferSize__retval = hipsolverStatus_t(chipsolver.hipsolverDnSpotrf_bufferSize(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,uplo.value,n,
        <float *>hip._util.types.Pointer.fromPyobj(A)._ptr,lda,
        <int *>hip._util.types.ListOfInt.fromPyobj(lwork)._ptr))
    return (_hipsolverDnSpotrf_bufferSize__retval,)


@cython.embedsignature(True)
def hipsolverDnDpotrf_bufferSize(object handle, object uplo, int n, object A, int lda, object lwork):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        uplo (`~.hipblasFillMode_t`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        A (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        lwork (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)
    """
    if not isinstance(uplo,_hipblasFillMode_t__Base):
        raise TypeError("argument 'uplo' must be of type '_hipblasFillMode_t__Base'")
    _hipsolverDnDpotrf_bufferSize__retval = hipsolverStatus_t(chipsolver.hipsolverDnDpotrf_bufferSize(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,uplo.value,n,
        <double *>hip._util.types.Pointer.fromPyobj(A)._ptr,lda,
        <int *>hip._util.types.ListOfInt.fromPyobj(lwork)._ptr))
    return (_hipsolverDnDpotrf_bufferSize__retval,)


@cython.embedsignature(True)
def hipsolverDnCpotrf_bufferSize(object handle, object uplo, int n, object A, int lda, object lwork):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        uplo (`~.hipblasFillMode_t`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        A (`~.float2`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        lwork (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)
    """
    if not isinstance(uplo,_hipblasFillMode_t__Base):
        raise TypeError("argument 'uplo' must be of type '_hipblasFillMode_t__Base'")
    _hipsolverDnCpotrf_bufferSize__retval = hipsolverStatus_t(chipsolver.hipsolverDnCpotrf_bufferSize(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,uplo.value,n,
        float2.fromPyobj(A).getElementPtr(),lda,
        <int *>hip._util.types.ListOfInt.fromPyobj(lwork)._ptr))
    return (_hipsolverDnCpotrf_bufferSize__retval,)


@cython.embedsignature(True)
def hipsolverDnZpotrf_bufferSize(object handle, object uplo, int n, object A, int lda, object lwork):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        uplo (`~.hipblasFillMode_t`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        A (`~.double2`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        lwork (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)
    """
    if not isinstance(uplo,_hipblasFillMode_t__Base):
        raise TypeError("argument 'uplo' must be of type '_hipblasFillMode_t__Base'")
    _hipsolverDnZpotrf_bufferSize__retval = hipsolverStatus_t(chipsolver.hipsolverDnZpotrf_bufferSize(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,uplo.value,n,
        double2.fromPyobj(A).getElementPtr(),lda,
        <int *>hip._util.types.ListOfInt.fromPyobj(lwork)._ptr))
    return (_hipsolverDnZpotrf_bufferSize__retval,)


@cython.embedsignature(True)
def hipsolverDnSpotrf(object handle, object uplo, int n, object A, int lda, object work, int lwork, object devInfo):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        uplo (`~.hipblasFillMode_t`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        A (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        work (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lwork (`~.int`):
            (undocumented)

        devInfo (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)
    """
    if not isinstance(uplo,_hipblasFillMode_t__Base):
        raise TypeError("argument 'uplo' must be of type '_hipblasFillMode_t__Base'")
    _hipsolverDnSpotrf__retval = hipsolverStatus_t(chipsolver.hipsolverDnSpotrf(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,uplo.value,n,
        <float *>hip._util.types.Pointer.fromPyobj(A)._ptr,lda,
        <float *>hip._util.types.Pointer.fromPyobj(work)._ptr,lwork,
        <int *>hip._util.types.ListOfInt.fromPyobj(devInfo)._ptr))
    return (_hipsolverDnSpotrf__retval,)


@cython.embedsignature(True)
def hipsolverDnDpotrf(object handle, object uplo, int n, object A, int lda, object work, int lwork, object devInfo):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        uplo (`~.hipblasFillMode_t`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        A (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        work (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lwork (`~.int`):
            (undocumented)

        devInfo (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)
    """
    if not isinstance(uplo,_hipblasFillMode_t__Base):
        raise TypeError("argument 'uplo' must be of type '_hipblasFillMode_t__Base'")
    _hipsolverDnDpotrf__retval = hipsolverStatus_t(chipsolver.hipsolverDnDpotrf(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,uplo.value,n,
        <double *>hip._util.types.Pointer.fromPyobj(A)._ptr,lda,
        <double *>hip._util.types.Pointer.fromPyobj(work)._ptr,lwork,
        <int *>hip._util.types.ListOfInt.fromPyobj(devInfo)._ptr))
    return (_hipsolverDnDpotrf__retval,)


@cython.embedsignature(True)
def hipsolverDnCpotrf(object handle, object uplo, int n, object A, int lda, object work, int lwork, object devInfo):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        uplo (`~.hipblasFillMode_t`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        A (`~.float2`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        work (`~.float2`/`~.object`):
            (undocumented)

        lwork (`~.int`):
            (undocumented)

        devInfo (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)
    """
    if not isinstance(uplo,_hipblasFillMode_t__Base):
        raise TypeError("argument 'uplo' must be of type '_hipblasFillMode_t__Base'")
    _hipsolverDnCpotrf__retval = hipsolverStatus_t(chipsolver.hipsolverDnCpotrf(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,uplo.value,n,
        float2.fromPyobj(A).getElementPtr(),lda,
        float2.fromPyobj(work).getElementPtr(),lwork,
        <int *>hip._util.types.ListOfInt.fromPyobj(devInfo)._ptr))
    return (_hipsolverDnCpotrf__retval,)


@cython.embedsignature(True)
def hipsolverDnZpotrf(object handle, object uplo, int n, object A, int lda, object work, int lwork, object devInfo):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        uplo (`~.hipblasFillMode_t`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        A (`~.double2`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        work (`~.double2`/`~.object`):
            (undocumented)

        lwork (`~.int`):
            (undocumented)

        devInfo (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)
    """
    if not isinstance(uplo,_hipblasFillMode_t__Base):
        raise TypeError("argument 'uplo' must be of type '_hipblasFillMode_t__Base'")
    _hipsolverDnZpotrf__retval = hipsolverStatus_t(chipsolver.hipsolverDnZpotrf(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,uplo.value,n,
        double2.fromPyobj(A).getElementPtr(),lda,
        double2.fromPyobj(work).getElementPtr(),lwork,
        <int *>hip._util.types.ListOfInt.fromPyobj(devInfo)._ptr))
    return (_hipsolverDnZpotrf__retval,)


@cython.embedsignature(True)
def hipsolverDnSpotrfBatched(object handle, object uplo, int n, object A, int lda, object devInfo, int batch_count):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        uplo (`~.hipblasFillMode_t`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        A (`~.hip._util.types.ListOfPointer`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        devInfo (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)

        batch_count (`~.int`):
            (undocumented)
    """
    if not isinstance(uplo,_hipblasFillMode_t__Base):
        raise TypeError("argument 'uplo' must be of type '_hipblasFillMode_t__Base'")
    _hipsolverDnSpotrfBatched__retval = hipsolverStatus_t(chipsolver.hipsolverDnSpotrfBatched(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,uplo.value,n,
        <float **>hip._util.types.ListOfPointer.fromPyobj(A)._ptr,lda,
        <int *>hip._util.types.ListOfInt.fromPyobj(devInfo)._ptr,batch_count))
    return (_hipsolverDnSpotrfBatched__retval,)


@cython.embedsignature(True)
def hipsolverDnDpotrfBatched(object handle, object uplo, int n, object A, int lda, object devInfo, int batch_count):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        uplo (`~.hipblasFillMode_t`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        A (`~.hip._util.types.ListOfPointer`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        devInfo (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)

        batch_count (`~.int`):
            (undocumented)
    """
    if not isinstance(uplo,_hipblasFillMode_t__Base):
        raise TypeError("argument 'uplo' must be of type '_hipblasFillMode_t__Base'")
    _hipsolverDnDpotrfBatched__retval = hipsolverStatus_t(chipsolver.hipsolverDnDpotrfBatched(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,uplo.value,n,
        <double **>hip._util.types.ListOfPointer.fromPyobj(A)._ptr,lda,
        <int *>hip._util.types.ListOfInt.fromPyobj(devInfo)._ptr,batch_count))
    return (_hipsolverDnDpotrfBatched__retval,)


@cython.embedsignature(True)
def hipsolverDnCpotrfBatched(object handle, object uplo, int n, object A, int lda, object devInfo, int batch_count):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        uplo (`~.hipblasFillMode_t`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        A (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        devInfo (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)

        batch_count (`~.int`):
            (undocumented)
    """
    if not isinstance(uplo,_hipblasFillMode_t__Base):
        raise TypeError("argument 'uplo' must be of type '_hipblasFillMode_t__Base'")
    _hipsolverDnCpotrfBatched__retval = hipsolverStatus_t(chipsolver.hipsolverDnCpotrfBatched(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,uplo.value,n,
        <chipsolver.float2 **>hip._util.types.Pointer.fromPyobj(A)._ptr,lda,
        <int *>hip._util.types.ListOfInt.fromPyobj(devInfo)._ptr,batch_count))
    return (_hipsolverDnCpotrfBatched__retval,)


@cython.embedsignature(True)
def hipsolverDnZpotrfBatched(object handle, object uplo, int n, object A, int lda, object devInfo, int batch_count):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        uplo (`~.hipblasFillMode_t`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        A (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        devInfo (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)

        batch_count (`~.int`):
            (undocumented)
    """
    if not isinstance(uplo,_hipblasFillMode_t__Base):
        raise TypeError("argument 'uplo' must be of type '_hipblasFillMode_t__Base'")
    _hipsolverDnZpotrfBatched__retval = hipsolverStatus_t(chipsolver.hipsolverDnZpotrfBatched(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,uplo.value,n,
        <chipsolver.double2 **>hip._util.types.Pointer.fromPyobj(A)._ptr,lda,
        <int *>hip._util.types.ListOfInt.fromPyobj(devInfo)._ptr,batch_count))
    return (_hipsolverDnZpotrfBatched__retval,)


@cython.embedsignature(True)
def hipsolverDnSpotri_bufferSize(object handle, object uplo, int n, object A, int lda, object lwork):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        uplo (`~.hipblasFillMode_t`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        A (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        lwork (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)
    """
    if not isinstance(uplo,_hipblasFillMode_t__Base):
        raise TypeError("argument 'uplo' must be of type '_hipblasFillMode_t__Base'")
    _hipsolverDnSpotri_bufferSize__retval = hipsolverStatus_t(chipsolver.hipsolverDnSpotri_bufferSize(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,uplo.value,n,
        <float *>hip._util.types.Pointer.fromPyobj(A)._ptr,lda,
        <int *>hip._util.types.ListOfInt.fromPyobj(lwork)._ptr))
    return (_hipsolverDnSpotri_bufferSize__retval,)


@cython.embedsignature(True)
def hipsolverDnDpotri_bufferSize(object handle, object uplo, int n, object A, int lda, object lwork):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        uplo (`~.hipblasFillMode_t`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        A (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        lwork (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)
    """
    if not isinstance(uplo,_hipblasFillMode_t__Base):
        raise TypeError("argument 'uplo' must be of type '_hipblasFillMode_t__Base'")
    _hipsolverDnDpotri_bufferSize__retval = hipsolverStatus_t(chipsolver.hipsolverDnDpotri_bufferSize(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,uplo.value,n,
        <double *>hip._util.types.Pointer.fromPyobj(A)._ptr,lda,
        <int *>hip._util.types.ListOfInt.fromPyobj(lwork)._ptr))
    return (_hipsolverDnDpotri_bufferSize__retval,)


@cython.embedsignature(True)
def hipsolverDnCpotri_bufferSize(object handle, object uplo, int n, object A, int lda, object lwork):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        uplo (`~.hipblasFillMode_t`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        A (`~.float2`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        lwork (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)
    """
    if not isinstance(uplo,_hipblasFillMode_t__Base):
        raise TypeError("argument 'uplo' must be of type '_hipblasFillMode_t__Base'")
    _hipsolverDnCpotri_bufferSize__retval = hipsolverStatus_t(chipsolver.hipsolverDnCpotri_bufferSize(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,uplo.value,n,
        float2.fromPyobj(A).getElementPtr(),lda,
        <int *>hip._util.types.ListOfInt.fromPyobj(lwork)._ptr))
    return (_hipsolverDnCpotri_bufferSize__retval,)


@cython.embedsignature(True)
def hipsolverDnZpotri_bufferSize(object handle, object uplo, int n, object A, int lda, object lwork):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        uplo (`~.hipblasFillMode_t`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        A (`~.double2`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        lwork (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)
    """
    if not isinstance(uplo,_hipblasFillMode_t__Base):
        raise TypeError("argument 'uplo' must be of type '_hipblasFillMode_t__Base'")
    _hipsolverDnZpotri_bufferSize__retval = hipsolverStatus_t(chipsolver.hipsolverDnZpotri_bufferSize(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,uplo.value,n,
        double2.fromPyobj(A).getElementPtr(),lda,
        <int *>hip._util.types.ListOfInt.fromPyobj(lwork)._ptr))
    return (_hipsolverDnZpotri_bufferSize__retval,)


@cython.embedsignature(True)
def hipsolverDnSpotri(object handle, object uplo, int n, object A, int lda, object work, int lwork, object devInfo):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        uplo (`~.hipblasFillMode_t`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        A (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        work (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lwork (`~.int`):
            (undocumented)

        devInfo (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)
    """
    if not isinstance(uplo,_hipblasFillMode_t__Base):
        raise TypeError("argument 'uplo' must be of type '_hipblasFillMode_t__Base'")
    _hipsolverDnSpotri__retval = hipsolverStatus_t(chipsolver.hipsolverDnSpotri(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,uplo.value,n,
        <float *>hip._util.types.Pointer.fromPyobj(A)._ptr,lda,
        <float *>hip._util.types.Pointer.fromPyobj(work)._ptr,lwork,
        <int *>hip._util.types.ListOfInt.fromPyobj(devInfo)._ptr))
    return (_hipsolverDnSpotri__retval,)


@cython.embedsignature(True)
def hipsolverDnDpotri(object handle, object uplo, int n, object A, int lda, object work, int lwork, object devInfo):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        uplo (`~.hipblasFillMode_t`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        A (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        work (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lwork (`~.int`):
            (undocumented)

        devInfo (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)
    """
    if not isinstance(uplo,_hipblasFillMode_t__Base):
        raise TypeError("argument 'uplo' must be of type '_hipblasFillMode_t__Base'")
    _hipsolverDnDpotri__retval = hipsolverStatus_t(chipsolver.hipsolverDnDpotri(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,uplo.value,n,
        <double *>hip._util.types.Pointer.fromPyobj(A)._ptr,lda,
        <double *>hip._util.types.Pointer.fromPyobj(work)._ptr,lwork,
        <int *>hip._util.types.ListOfInt.fromPyobj(devInfo)._ptr))
    return (_hipsolverDnDpotri__retval,)


@cython.embedsignature(True)
def hipsolverDnCpotri(object handle, object uplo, int n, object A, int lda, object work, int lwork, object devInfo):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        uplo (`~.hipblasFillMode_t`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        A (`~.float2`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        work (`~.float2`/`~.object`):
            (undocumented)

        lwork (`~.int`):
            (undocumented)

        devInfo (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)
    """
    if not isinstance(uplo,_hipblasFillMode_t__Base):
        raise TypeError("argument 'uplo' must be of type '_hipblasFillMode_t__Base'")
    _hipsolverDnCpotri__retval = hipsolverStatus_t(chipsolver.hipsolverDnCpotri(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,uplo.value,n,
        float2.fromPyobj(A).getElementPtr(),lda,
        float2.fromPyobj(work).getElementPtr(),lwork,
        <int *>hip._util.types.ListOfInt.fromPyobj(devInfo)._ptr))
    return (_hipsolverDnCpotri__retval,)


@cython.embedsignature(True)
def hipsolverDnZpotri(object handle, object uplo, int n, object A, int lda, object work, int lwork, object devInfo):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        uplo (`~.hipblasFillMode_t`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        A (`~.double2`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        work (`~.double2`/`~.object`):
            (undocumented)

        lwork (`~.int`):
            (undocumented)

        devInfo (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)
    """
    if not isinstance(uplo,_hipblasFillMode_t__Base):
        raise TypeError("argument 'uplo' must be of type '_hipblasFillMode_t__Base'")
    _hipsolverDnZpotri__retval = hipsolverStatus_t(chipsolver.hipsolverDnZpotri(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,uplo.value,n,
        double2.fromPyobj(A).getElementPtr(),lda,
        double2.fromPyobj(work).getElementPtr(),lwork,
        <int *>hip._util.types.ListOfInt.fromPyobj(devInfo)._ptr))
    return (_hipsolverDnZpotri__retval,)


@cython.embedsignature(True)
def hipsolverDnSpotrs(object handle, object uplo, int n, int nrhs, object A, int lda, object B, int ldb, object devInfo):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        uplo (`~.hipblasFillMode_t`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        nrhs (`~.int`):
            (undocumented)

        A (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        B (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        ldb (`~.int`):
            (undocumented)

        devInfo (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)
    """
    if not isinstance(uplo,_hipblasFillMode_t__Base):
        raise TypeError("argument 'uplo' must be of type '_hipblasFillMode_t__Base'")
    _hipsolverDnSpotrs__retval = hipsolverStatus_t(chipsolver.hipsolverDnSpotrs(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,uplo.value,n,nrhs,
        <const float *>hip._util.types.Pointer.fromPyobj(A)._ptr,lda,
        <float *>hip._util.types.Pointer.fromPyobj(B)._ptr,ldb,
        <int *>hip._util.types.ListOfInt.fromPyobj(devInfo)._ptr))
    return (_hipsolverDnSpotrs__retval,)


@cython.embedsignature(True)
def hipsolverDnDpotrs(object handle, object uplo, int n, int nrhs, object A, int lda, object B, int ldb, object devInfo):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        uplo (`~.hipblasFillMode_t`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        nrhs (`~.int`):
            (undocumented)

        A (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        B (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        ldb (`~.int`):
            (undocumented)

        devInfo (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)
    """
    if not isinstance(uplo,_hipblasFillMode_t__Base):
        raise TypeError("argument 'uplo' must be of type '_hipblasFillMode_t__Base'")
    _hipsolverDnDpotrs__retval = hipsolverStatus_t(chipsolver.hipsolverDnDpotrs(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,uplo.value,n,nrhs,
        <const double *>hip._util.types.Pointer.fromPyobj(A)._ptr,lda,
        <double *>hip._util.types.Pointer.fromPyobj(B)._ptr,ldb,
        <int *>hip._util.types.ListOfInt.fromPyobj(devInfo)._ptr))
    return (_hipsolverDnDpotrs__retval,)


@cython.embedsignature(True)
def hipsolverDnCpotrs(object handle, object uplo, int n, int nrhs, object A, int lda, object B, int ldb, object devInfo):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        uplo (`~.hipblasFillMode_t`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        nrhs (`~.int`):
            (undocumented)

        A (`~.float2`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        B (`~.float2`/`~.object`):
            (undocumented)

        ldb (`~.int`):
            (undocumented)

        devInfo (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)
    """
    if not isinstance(uplo,_hipblasFillMode_t__Base):
        raise TypeError("argument 'uplo' must be of type '_hipblasFillMode_t__Base'")
    _hipsolverDnCpotrs__retval = hipsolverStatus_t(chipsolver.hipsolverDnCpotrs(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,uplo.value,n,nrhs,
        float2.fromPyobj(A).getElementPtr(),lda,
        float2.fromPyobj(B).getElementPtr(),ldb,
        <int *>hip._util.types.ListOfInt.fromPyobj(devInfo)._ptr))
    return (_hipsolverDnCpotrs__retval,)


@cython.embedsignature(True)
def hipsolverDnZpotrs(object handle, object uplo, int n, int nrhs, object A, int lda, object B, int ldb, object devInfo):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        uplo (`~.hipblasFillMode_t`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        nrhs (`~.int`):
            (undocumented)

        A (`~.double2`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        B (`~.double2`/`~.object`):
            (undocumented)

        ldb (`~.int`):
            (undocumented)

        devInfo (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)
    """
    if not isinstance(uplo,_hipblasFillMode_t__Base):
        raise TypeError("argument 'uplo' must be of type '_hipblasFillMode_t__Base'")
    _hipsolverDnZpotrs__retval = hipsolverStatus_t(chipsolver.hipsolverDnZpotrs(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,uplo.value,n,nrhs,
        double2.fromPyobj(A).getElementPtr(),lda,
        double2.fromPyobj(B).getElementPtr(),ldb,
        <int *>hip._util.types.ListOfInt.fromPyobj(devInfo)._ptr))
    return (_hipsolverDnZpotrs__retval,)


@cython.embedsignature(True)
def hipsolverDnSpotrsBatched(object handle, object uplo, int n, int nrhs, object A, int lda, object B, int ldb, object devInfo, int batch_count):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        uplo (`~.hipblasFillMode_t`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        nrhs (`~.int`):
            (undocumented)

        A (`~.hip._util.types.ListOfPointer`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        B (`~.hip._util.types.ListOfPointer`/`~.object`):
            (undocumented)

        ldb (`~.int`):
            (undocumented)

        devInfo (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)

        batch_count (`~.int`):
            (undocumented)
    """
    if not isinstance(uplo,_hipblasFillMode_t__Base):
        raise TypeError("argument 'uplo' must be of type '_hipblasFillMode_t__Base'")
    _hipsolverDnSpotrsBatched__retval = hipsolverStatus_t(chipsolver.hipsolverDnSpotrsBatched(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,uplo.value,n,nrhs,
        <float **>hip._util.types.ListOfPointer.fromPyobj(A)._ptr,lda,
        <float **>hip._util.types.ListOfPointer.fromPyobj(B)._ptr,ldb,
        <int *>hip._util.types.ListOfInt.fromPyobj(devInfo)._ptr,batch_count))
    return (_hipsolverDnSpotrsBatched__retval,)


@cython.embedsignature(True)
def hipsolverDnDpotrsBatched(object handle, object uplo, int n, int nrhs, object A, int lda, object B, int ldb, object devInfo, int batch_count):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        uplo (`~.hipblasFillMode_t`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        nrhs (`~.int`):
            (undocumented)

        A (`~.hip._util.types.ListOfPointer`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        B (`~.hip._util.types.ListOfPointer`/`~.object`):
            (undocumented)

        ldb (`~.int`):
            (undocumented)

        devInfo (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)

        batch_count (`~.int`):
            (undocumented)
    """
    if not isinstance(uplo,_hipblasFillMode_t__Base):
        raise TypeError("argument 'uplo' must be of type '_hipblasFillMode_t__Base'")
    _hipsolverDnDpotrsBatched__retval = hipsolverStatus_t(chipsolver.hipsolverDnDpotrsBatched(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,uplo.value,n,nrhs,
        <double **>hip._util.types.ListOfPointer.fromPyobj(A)._ptr,lda,
        <double **>hip._util.types.ListOfPointer.fromPyobj(B)._ptr,ldb,
        <int *>hip._util.types.ListOfInt.fromPyobj(devInfo)._ptr,batch_count))
    return (_hipsolverDnDpotrsBatched__retval,)


@cython.embedsignature(True)
def hipsolverDnCpotrsBatched(object handle, object uplo, int n, int nrhs, object A, int lda, object B, int ldb, object devInfo, int batch_count):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        uplo (`~.hipblasFillMode_t`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        nrhs (`~.int`):
            (undocumented)

        A (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        B (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        ldb (`~.int`):
            (undocumented)

        devInfo (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)

        batch_count (`~.int`):
            (undocumented)
    """
    if not isinstance(uplo,_hipblasFillMode_t__Base):
        raise TypeError("argument 'uplo' must be of type '_hipblasFillMode_t__Base'")
    _hipsolverDnCpotrsBatched__retval = hipsolverStatus_t(chipsolver.hipsolverDnCpotrsBatched(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,uplo.value,n,nrhs,
        <chipsolver.float2 **>hip._util.types.Pointer.fromPyobj(A)._ptr,lda,
        <chipsolver.float2 **>hip._util.types.Pointer.fromPyobj(B)._ptr,ldb,
        <int *>hip._util.types.ListOfInt.fromPyobj(devInfo)._ptr,batch_count))
    return (_hipsolverDnCpotrsBatched__retval,)


@cython.embedsignature(True)
def hipsolverDnZpotrsBatched(object handle, object uplo, int n, int nrhs, object A, int lda, object B, int ldb, object devInfo, int batch_count):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        uplo (`~.hipblasFillMode_t`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        nrhs (`~.int`):
            (undocumented)

        A (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        B (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        ldb (`~.int`):
            (undocumented)

        devInfo (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)

        batch_count (`~.int`):
            (undocumented)
    """
    if not isinstance(uplo,_hipblasFillMode_t__Base):
        raise TypeError("argument 'uplo' must be of type '_hipblasFillMode_t__Base'")
    _hipsolverDnZpotrsBatched__retval = hipsolverStatus_t(chipsolver.hipsolverDnZpotrsBatched(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,uplo.value,n,nrhs,
        <chipsolver.double2 **>hip._util.types.Pointer.fromPyobj(A)._ptr,lda,
        <chipsolver.double2 **>hip._util.types.Pointer.fromPyobj(B)._ptr,ldb,
        <int *>hip._util.types.ListOfInt.fromPyobj(devInfo)._ptr,batch_count))
    return (_hipsolverDnZpotrsBatched__retval,)


@cython.embedsignature(True)
def hipsolverDnSsyevd_bufferSize(object handle, object jobz, object uplo, int n, object A, int lda, object W, object lwork):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        jobz (`~.hipsolverEigMode_t`):
            (undocumented)

        uplo (`~.hipblasFillMode_t`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        A (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        W (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lwork (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)
    """
    if not isinstance(jobz,_hipsolverEigMode_t__Base):
        raise TypeError("argument 'jobz' must be of type '_hipsolverEigMode_t__Base'")                    
    if not isinstance(uplo,_hipblasFillMode_t__Base):
        raise TypeError("argument 'uplo' must be of type '_hipblasFillMode_t__Base'")
    _hipsolverDnSsyevd_bufferSize__retval = hipsolverStatus_t(chipsolver.hipsolverDnSsyevd_bufferSize(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,jobz.value,uplo.value,n,
        <const float *>hip._util.types.Pointer.fromPyobj(A)._ptr,lda,
        <const float *>hip._util.types.Pointer.fromPyobj(W)._ptr,
        <int *>hip._util.types.ListOfInt.fromPyobj(lwork)._ptr))
    return (_hipsolverDnSsyevd_bufferSize__retval,)


@cython.embedsignature(True)
def hipsolverDnDsyevd_bufferSize(object handle, object jobz, object uplo, int n, object A, int lda, object W, object lwork):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        jobz (`~.hipsolverEigMode_t`):
            (undocumented)

        uplo (`~.hipblasFillMode_t`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        A (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        W (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lwork (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)
    """
    if not isinstance(jobz,_hipsolverEigMode_t__Base):
        raise TypeError("argument 'jobz' must be of type '_hipsolverEigMode_t__Base'")                    
    if not isinstance(uplo,_hipblasFillMode_t__Base):
        raise TypeError("argument 'uplo' must be of type '_hipblasFillMode_t__Base'")
    _hipsolverDnDsyevd_bufferSize__retval = hipsolverStatus_t(chipsolver.hipsolverDnDsyevd_bufferSize(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,jobz.value,uplo.value,n,
        <const double *>hip._util.types.Pointer.fromPyobj(A)._ptr,lda,
        <const double *>hip._util.types.Pointer.fromPyobj(W)._ptr,
        <int *>hip._util.types.ListOfInt.fromPyobj(lwork)._ptr))
    return (_hipsolverDnDsyevd_bufferSize__retval,)


@cython.embedsignature(True)
def hipsolverDnCheevd_bufferSize(object handle, object jobz, object uplo, int n, object A, int lda, object W, object lwork):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        jobz (`~.hipsolverEigMode_t`):
            (undocumented)

        uplo (`~.hipblasFillMode_t`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        A (`~.float2`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        W (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lwork (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)
    """
    if not isinstance(jobz,_hipsolverEigMode_t__Base):
        raise TypeError("argument 'jobz' must be of type '_hipsolverEigMode_t__Base'")                    
    if not isinstance(uplo,_hipblasFillMode_t__Base):
        raise TypeError("argument 'uplo' must be of type '_hipblasFillMode_t__Base'")
    _hipsolverDnCheevd_bufferSize__retval = hipsolverStatus_t(chipsolver.hipsolverDnCheevd_bufferSize(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,jobz.value,uplo.value,n,
        float2.fromPyobj(A).getElementPtr(),lda,
        <const float *>hip._util.types.Pointer.fromPyobj(W)._ptr,
        <int *>hip._util.types.ListOfInt.fromPyobj(lwork)._ptr))
    return (_hipsolverDnCheevd_bufferSize__retval,)


@cython.embedsignature(True)
def hipsolverDnZheevd_bufferSize(object handle, object jobz, object uplo, int n, object A, int lda, object W, object lwork):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        jobz (`~.hipsolverEigMode_t`):
            (undocumented)

        uplo (`~.hipblasFillMode_t`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        A (`~.double2`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        W (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lwork (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)
    """
    if not isinstance(jobz,_hipsolverEigMode_t__Base):
        raise TypeError("argument 'jobz' must be of type '_hipsolverEigMode_t__Base'")                    
    if not isinstance(uplo,_hipblasFillMode_t__Base):
        raise TypeError("argument 'uplo' must be of type '_hipblasFillMode_t__Base'")
    _hipsolverDnZheevd_bufferSize__retval = hipsolverStatus_t(chipsolver.hipsolverDnZheevd_bufferSize(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,jobz.value,uplo.value,n,
        double2.fromPyobj(A).getElementPtr(),lda,
        <const double *>hip._util.types.Pointer.fromPyobj(W)._ptr,
        <int *>hip._util.types.ListOfInt.fromPyobj(lwork)._ptr))
    return (_hipsolverDnZheevd_bufferSize__retval,)


@cython.embedsignature(True)
def hipsolverDnSsyevd(object handle, object jobz, object uplo, int n, object A, int lda, object W, object work, int lwork, object devInfo):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        jobz (`~.hipsolverEigMode_t`):
            (undocumented)

        uplo (`~.hipblasFillMode_t`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        A (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        W (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        work (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lwork (`~.int`):
            (undocumented)

        devInfo (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)
    """
    if not isinstance(jobz,_hipsolverEigMode_t__Base):
        raise TypeError("argument 'jobz' must be of type '_hipsolverEigMode_t__Base'")                    
    if not isinstance(uplo,_hipblasFillMode_t__Base):
        raise TypeError("argument 'uplo' must be of type '_hipblasFillMode_t__Base'")
    _hipsolverDnSsyevd__retval = hipsolverStatus_t(chipsolver.hipsolverDnSsyevd(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,jobz.value,uplo.value,n,
        <float *>hip._util.types.Pointer.fromPyobj(A)._ptr,lda,
        <float *>hip._util.types.Pointer.fromPyobj(W)._ptr,
        <float *>hip._util.types.Pointer.fromPyobj(work)._ptr,lwork,
        <int *>hip._util.types.ListOfInt.fromPyobj(devInfo)._ptr))
    return (_hipsolverDnSsyevd__retval,)


@cython.embedsignature(True)
def hipsolverDnDsyevd(object handle, object jobz, object uplo, int n, object A, int lda, object W, object work, int lwork, object devInfo):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        jobz (`~.hipsolverEigMode_t`):
            (undocumented)

        uplo (`~.hipblasFillMode_t`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        A (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        W (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        work (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lwork (`~.int`):
            (undocumented)

        devInfo (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)
    """
    if not isinstance(jobz,_hipsolverEigMode_t__Base):
        raise TypeError("argument 'jobz' must be of type '_hipsolverEigMode_t__Base'")                    
    if not isinstance(uplo,_hipblasFillMode_t__Base):
        raise TypeError("argument 'uplo' must be of type '_hipblasFillMode_t__Base'")
    _hipsolverDnDsyevd__retval = hipsolverStatus_t(chipsolver.hipsolverDnDsyevd(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,jobz.value,uplo.value,n,
        <double *>hip._util.types.Pointer.fromPyobj(A)._ptr,lda,
        <double *>hip._util.types.Pointer.fromPyobj(W)._ptr,
        <double *>hip._util.types.Pointer.fromPyobj(work)._ptr,lwork,
        <int *>hip._util.types.ListOfInt.fromPyobj(devInfo)._ptr))
    return (_hipsolverDnDsyevd__retval,)


@cython.embedsignature(True)
def hipsolverDnCheevd(object handle, object jobz, object uplo, int n, object A, int lda, object W, object work, int lwork, object devInfo):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        jobz (`~.hipsolverEigMode_t`):
            (undocumented)

        uplo (`~.hipblasFillMode_t`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        A (`~.float2`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        W (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        work (`~.float2`/`~.object`):
            (undocumented)

        lwork (`~.int`):
            (undocumented)

        devInfo (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)
    """
    if not isinstance(jobz,_hipsolverEigMode_t__Base):
        raise TypeError("argument 'jobz' must be of type '_hipsolverEigMode_t__Base'")                    
    if not isinstance(uplo,_hipblasFillMode_t__Base):
        raise TypeError("argument 'uplo' must be of type '_hipblasFillMode_t__Base'")
    _hipsolverDnCheevd__retval = hipsolverStatus_t(chipsolver.hipsolverDnCheevd(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,jobz.value,uplo.value,n,
        float2.fromPyobj(A).getElementPtr(),lda,
        <float *>hip._util.types.Pointer.fromPyobj(W)._ptr,
        float2.fromPyobj(work).getElementPtr(),lwork,
        <int *>hip._util.types.ListOfInt.fromPyobj(devInfo)._ptr))
    return (_hipsolverDnCheevd__retval,)


@cython.embedsignature(True)
def hipsolverDnZheevd(object handle, object jobz, object uplo, int n, object A, int lda, object W, object work, int lwork, object devInfo):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        jobz (`~.hipsolverEigMode_t`):
            (undocumented)

        uplo (`~.hipblasFillMode_t`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        A (`~.double2`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        W (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        work (`~.double2`/`~.object`):
            (undocumented)

        lwork (`~.int`):
            (undocumented)

        devInfo (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)
    """
    if not isinstance(jobz,_hipsolverEigMode_t__Base):
        raise TypeError("argument 'jobz' must be of type '_hipsolverEigMode_t__Base'")                    
    if not isinstance(uplo,_hipblasFillMode_t__Base):
        raise TypeError("argument 'uplo' must be of type '_hipblasFillMode_t__Base'")
    _hipsolverDnZheevd__retval = hipsolverStatus_t(chipsolver.hipsolverDnZheevd(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,jobz.value,uplo.value,n,
        double2.fromPyobj(A).getElementPtr(),lda,
        <double *>hip._util.types.Pointer.fromPyobj(W)._ptr,
        double2.fromPyobj(work).getElementPtr(),lwork,
        <int *>hip._util.types.ListOfInt.fromPyobj(devInfo)._ptr))
    return (_hipsolverDnZheevd__retval,)


@cython.embedsignature(True)
def hipsolverDnSsyevdx_bufferSize(object handle, object jobz, object range, object uplo, int n, object A, int lda, float vl, float vu, int il, int iu, object nev, object W, object lwork):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        jobz (`~.hipsolverEigMode_t`):
            (undocumented)

        range (`~.hipsolverEigRange_t`):
            (undocumented)

        uplo (`~.hipblasFillMode_t`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        A (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        vl (`~.float`/`~.int`):
            (undocumented)

        vu (`~.float`/`~.int`):
            (undocumented)

        il (`~.int`):
            (undocumented)

        iu (`~.int`):
            (undocumented)

        nev (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)

        W (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lwork (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)
    """
    if not isinstance(jobz,_hipsolverEigMode_t__Base):
        raise TypeError("argument 'jobz' must be of type '_hipsolverEigMode_t__Base'")                    
    if not isinstance(range,_hipsolverEigRange_t__Base):
        raise TypeError("argument 'range' must be of type '_hipsolverEigRange_t__Base'")                    
    if not isinstance(uplo,_hipblasFillMode_t__Base):
        raise TypeError("argument 'uplo' must be of type '_hipblasFillMode_t__Base'")
    _hipsolverDnSsyevdx_bufferSize__retval = hipsolverStatus_t(chipsolver.hipsolverDnSsyevdx_bufferSize(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,jobz.value,range.value,uplo.value,n,
        <const float *>hip._util.types.Pointer.fromPyobj(A)._ptr,lda,vl,vu,il,iu,
        <int *>hip._util.types.ListOfInt.fromPyobj(nev)._ptr,
        <const float *>hip._util.types.Pointer.fromPyobj(W)._ptr,
        <int *>hip._util.types.ListOfInt.fromPyobj(lwork)._ptr))
    return (_hipsolverDnSsyevdx_bufferSize__retval,)


@cython.embedsignature(True)
def hipsolverDnDsyevdx_bufferSize(object handle, object jobz, object range, object uplo, int n, object A, int lda, double vl, double vu, int il, int iu, object nev, object W, object lwork):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        jobz (`~.hipsolverEigMode_t`):
            (undocumented)

        range (`~.hipsolverEigRange_t`):
            (undocumented)

        uplo (`~.hipblasFillMode_t`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        A (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        vl (`~.float`/`~.int`):
            (undocumented)

        vu (`~.float`/`~.int`):
            (undocumented)

        il (`~.int`):
            (undocumented)

        iu (`~.int`):
            (undocumented)

        nev (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)

        W (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lwork (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)
    """
    if not isinstance(jobz,_hipsolverEigMode_t__Base):
        raise TypeError("argument 'jobz' must be of type '_hipsolverEigMode_t__Base'")                    
    if not isinstance(range,_hipsolverEigRange_t__Base):
        raise TypeError("argument 'range' must be of type '_hipsolverEigRange_t__Base'")                    
    if not isinstance(uplo,_hipblasFillMode_t__Base):
        raise TypeError("argument 'uplo' must be of type '_hipblasFillMode_t__Base'")
    _hipsolverDnDsyevdx_bufferSize__retval = hipsolverStatus_t(chipsolver.hipsolverDnDsyevdx_bufferSize(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,jobz.value,range.value,uplo.value,n,
        <const double *>hip._util.types.Pointer.fromPyobj(A)._ptr,lda,vl,vu,il,iu,
        <int *>hip._util.types.ListOfInt.fromPyobj(nev)._ptr,
        <const double *>hip._util.types.Pointer.fromPyobj(W)._ptr,
        <int *>hip._util.types.ListOfInt.fromPyobj(lwork)._ptr))
    return (_hipsolverDnDsyevdx_bufferSize__retval,)


@cython.embedsignature(True)
def hipsolverDnCheevdx_bufferSize(object handle, object jobz, object range, object uplo, int n, object A, int lda, float vl, float vu, int il, int iu, object nev, object W, object lwork):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        jobz (`~.hipsolverEigMode_t`):
            (undocumented)

        range (`~.hipsolverEigRange_t`):
            (undocumented)

        uplo (`~.hipblasFillMode_t`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        A (`~.float2`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        vl (`~.float`/`~.int`):
            (undocumented)

        vu (`~.float`/`~.int`):
            (undocumented)

        il (`~.int`):
            (undocumented)

        iu (`~.int`):
            (undocumented)

        nev (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)

        W (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lwork (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)
    """
    if not isinstance(jobz,_hipsolverEigMode_t__Base):
        raise TypeError("argument 'jobz' must be of type '_hipsolverEigMode_t__Base'")                    
    if not isinstance(range,_hipsolverEigRange_t__Base):
        raise TypeError("argument 'range' must be of type '_hipsolverEigRange_t__Base'")                    
    if not isinstance(uplo,_hipblasFillMode_t__Base):
        raise TypeError("argument 'uplo' must be of type '_hipblasFillMode_t__Base'")
    _hipsolverDnCheevdx_bufferSize__retval = hipsolverStatus_t(chipsolver.hipsolverDnCheevdx_bufferSize(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,jobz.value,range.value,uplo.value,n,
        float2.fromPyobj(A).getElementPtr(),lda,vl,vu,il,iu,
        <int *>hip._util.types.ListOfInt.fromPyobj(nev)._ptr,
        <const float *>hip._util.types.Pointer.fromPyobj(W)._ptr,
        <int *>hip._util.types.ListOfInt.fromPyobj(lwork)._ptr))
    return (_hipsolverDnCheevdx_bufferSize__retval,)


@cython.embedsignature(True)
def hipsolverDnZheevdx_bufferSize(object handle, object jobz, object range, object uplo, int n, object A, int lda, double vl, double vu, int il, int iu, object nev, object W, object lwork):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        jobz (`~.hipsolverEigMode_t`):
            (undocumented)

        range (`~.hipsolverEigRange_t`):
            (undocumented)

        uplo (`~.hipblasFillMode_t`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        A (`~.double2`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        vl (`~.float`/`~.int`):
            (undocumented)

        vu (`~.float`/`~.int`):
            (undocumented)

        il (`~.int`):
            (undocumented)

        iu (`~.int`):
            (undocumented)

        nev (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)

        W (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lwork (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)
    """
    if not isinstance(jobz,_hipsolverEigMode_t__Base):
        raise TypeError("argument 'jobz' must be of type '_hipsolverEigMode_t__Base'")                    
    if not isinstance(range,_hipsolverEigRange_t__Base):
        raise TypeError("argument 'range' must be of type '_hipsolverEigRange_t__Base'")                    
    if not isinstance(uplo,_hipblasFillMode_t__Base):
        raise TypeError("argument 'uplo' must be of type '_hipblasFillMode_t__Base'")
    _hipsolverDnZheevdx_bufferSize__retval = hipsolverStatus_t(chipsolver.hipsolverDnZheevdx_bufferSize(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,jobz.value,range.value,uplo.value,n,
        double2.fromPyobj(A).getElementPtr(),lda,vl,vu,il,iu,
        <int *>hip._util.types.ListOfInt.fromPyobj(nev)._ptr,
        <const double *>hip._util.types.Pointer.fromPyobj(W)._ptr,
        <int *>hip._util.types.ListOfInt.fromPyobj(lwork)._ptr))
    return (_hipsolverDnZheevdx_bufferSize__retval,)


@cython.embedsignature(True)
def hipsolverDnSsyevdx(object handle, object jobz, object range, object uplo, int n, object A, int lda, float vl, float vu, int il, int iu, object nev, object W, object work, int lwork, object devInfo):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        jobz (`~.hipsolverEigMode_t`):
            (undocumented)

        range (`~.hipsolverEigRange_t`):
            (undocumented)

        uplo (`~.hipblasFillMode_t`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        A (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        vl (`~.float`/`~.int`):
            (undocumented)

        vu (`~.float`/`~.int`):
            (undocumented)

        il (`~.int`):
            (undocumented)

        iu (`~.int`):
            (undocumented)

        nev (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)

        W (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        work (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lwork (`~.int`):
            (undocumented)

        devInfo (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)
    """
    if not isinstance(jobz,_hipsolverEigMode_t__Base):
        raise TypeError("argument 'jobz' must be of type '_hipsolverEigMode_t__Base'")                    
    if not isinstance(range,_hipsolverEigRange_t__Base):
        raise TypeError("argument 'range' must be of type '_hipsolverEigRange_t__Base'")                    
    if not isinstance(uplo,_hipblasFillMode_t__Base):
        raise TypeError("argument 'uplo' must be of type '_hipblasFillMode_t__Base'")
    _hipsolverDnSsyevdx__retval = hipsolverStatus_t(chipsolver.hipsolverDnSsyevdx(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,jobz.value,range.value,uplo.value,n,
        <float *>hip._util.types.Pointer.fromPyobj(A)._ptr,lda,vl,vu,il,iu,
        <int *>hip._util.types.ListOfInt.fromPyobj(nev)._ptr,
        <float *>hip._util.types.Pointer.fromPyobj(W)._ptr,
        <float *>hip._util.types.Pointer.fromPyobj(work)._ptr,lwork,
        <int *>hip._util.types.ListOfInt.fromPyobj(devInfo)._ptr))
    return (_hipsolverDnSsyevdx__retval,)


@cython.embedsignature(True)
def hipsolverDnDsyevdx(object handle, object jobz, object range, object uplo, int n, object A, int lda, double vl, double vu, int il, int iu, object nev, object W, object work, int lwork, object devInfo):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        jobz (`~.hipsolverEigMode_t`):
            (undocumented)

        range (`~.hipsolverEigRange_t`):
            (undocumented)

        uplo (`~.hipblasFillMode_t`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        A (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        vl (`~.float`/`~.int`):
            (undocumented)

        vu (`~.float`/`~.int`):
            (undocumented)

        il (`~.int`):
            (undocumented)

        iu (`~.int`):
            (undocumented)

        nev (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)

        W (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        work (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lwork (`~.int`):
            (undocumented)

        devInfo (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)
    """
    if not isinstance(jobz,_hipsolverEigMode_t__Base):
        raise TypeError("argument 'jobz' must be of type '_hipsolverEigMode_t__Base'")                    
    if not isinstance(range,_hipsolverEigRange_t__Base):
        raise TypeError("argument 'range' must be of type '_hipsolverEigRange_t__Base'")                    
    if not isinstance(uplo,_hipblasFillMode_t__Base):
        raise TypeError("argument 'uplo' must be of type '_hipblasFillMode_t__Base'")
    _hipsolverDnDsyevdx__retval = hipsolverStatus_t(chipsolver.hipsolverDnDsyevdx(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,jobz.value,range.value,uplo.value,n,
        <double *>hip._util.types.Pointer.fromPyobj(A)._ptr,lda,vl,vu,il,iu,
        <int *>hip._util.types.ListOfInt.fromPyobj(nev)._ptr,
        <double *>hip._util.types.Pointer.fromPyobj(W)._ptr,
        <double *>hip._util.types.Pointer.fromPyobj(work)._ptr,lwork,
        <int *>hip._util.types.ListOfInt.fromPyobj(devInfo)._ptr))
    return (_hipsolverDnDsyevdx__retval,)


@cython.embedsignature(True)
def hipsolverDnCheevdx(object handle, object jobz, object range, object uplo, int n, object A, int lda, float vl, float vu, int il, int iu, object nev, object W, object work, int lwork, object devInfo):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        jobz (`~.hipsolverEigMode_t`):
            (undocumented)

        range (`~.hipsolverEigRange_t`):
            (undocumented)

        uplo (`~.hipblasFillMode_t`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        A (`~.float2`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        vl (`~.float`/`~.int`):
            (undocumented)

        vu (`~.float`/`~.int`):
            (undocumented)

        il (`~.int`):
            (undocumented)

        iu (`~.int`):
            (undocumented)

        nev (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)

        W (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        work (`~.float2`/`~.object`):
            (undocumented)

        lwork (`~.int`):
            (undocumented)

        devInfo (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)
    """
    if not isinstance(jobz,_hipsolverEigMode_t__Base):
        raise TypeError("argument 'jobz' must be of type '_hipsolverEigMode_t__Base'")                    
    if not isinstance(range,_hipsolverEigRange_t__Base):
        raise TypeError("argument 'range' must be of type '_hipsolverEigRange_t__Base'")                    
    if not isinstance(uplo,_hipblasFillMode_t__Base):
        raise TypeError("argument 'uplo' must be of type '_hipblasFillMode_t__Base'")
    _hipsolverDnCheevdx__retval = hipsolverStatus_t(chipsolver.hipsolverDnCheevdx(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,jobz.value,range.value,uplo.value,n,
        float2.fromPyobj(A).getElementPtr(),lda,vl,vu,il,iu,
        <int *>hip._util.types.ListOfInt.fromPyobj(nev)._ptr,
        <float *>hip._util.types.Pointer.fromPyobj(W)._ptr,
        float2.fromPyobj(work).getElementPtr(),lwork,
        <int *>hip._util.types.ListOfInt.fromPyobj(devInfo)._ptr))
    return (_hipsolverDnCheevdx__retval,)


@cython.embedsignature(True)
def hipsolverDnZheevdx(object handle, object jobz, object range, object uplo, int n, object A, int lda, double vl, double vu, int il, int iu, object nev, object W, object work, int lwork, object devInfo):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        jobz (`~.hipsolverEigMode_t`):
            (undocumented)

        range (`~.hipsolverEigRange_t`):
            (undocumented)

        uplo (`~.hipblasFillMode_t`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        A (`~.double2`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        vl (`~.float`/`~.int`):
            (undocumented)

        vu (`~.float`/`~.int`):
            (undocumented)

        il (`~.int`):
            (undocumented)

        iu (`~.int`):
            (undocumented)

        nev (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)

        W (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        work (`~.double2`/`~.object`):
            (undocumented)

        lwork (`~.int`):
            (undocumented)

        devInfo (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)
    """
    if not isinstance(jobz,_hipsolverEigMode_t__Base):
        raise TypeError("argument 'jobz' must be of type '_hipsolverEigMode_t__Base'")                    
    if not isinstance(range,_hipsolverEigRange_t__Base):
        raise TypeError("argument 'range' must be of type '_hipsolverEigRange_t__Base'")                    
    if not isinstance(uplo,_hipblasFillMode_t__Base):
        raise TypeError("argument 'uplo' must be of type '_hipblasFillMode_t__Base'")
    _hipsolverDnZheevdx__retval = hipsolverStatus_t(chipsolver.hipsolverDnZheevdx(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,jobz.value,range.value,uplo.value,n,
        double2.fromPyobj(A).getElementPtr(),lda,vl,vu,il,iu,
        <int *>hip._util.types.ListOfInt.fromPyobj(nev)._ptr,
        <double *>hip._util.types.Pointer.fromPyobj(W)._ptr,
        double2.fromPyobj(work).getElementPtr(),lwork,
        <int *>hip._util.types.ListOfInt.fromPyobj(devInfo)._ptr))
    return (_hipsolverDnZheevdx__retval,)


@cython.embedsignature(True)
def hipsolverDnSsyevj_bufferSize(object handle, object jobz, object uplo, int n, object A, int lda, object W, object lwork, object params):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        jobz (`~.hipsolverEigMode_t`):
            (undocumented)

        uplo (`~.hipblasFillMode_t`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        A (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        W (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lwork (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)

        params (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)
    """
    if not isinstance(jobz,_hipsolverEigMode_t__Base):
        raise TypeError("argument 'jobz' must be of type '_hipsolverEigMode_t__Base'")                    
    if not isinstance(uplo,_hipblasFillMode_t__Base):
        raise TypeError("argument 'uplo' must be of type '_hipblasFillMode_t__Base'")
    _hipsolverDnSsyevj_bufferSize__retval = hipsolverStatus_t(chipsolver.hipsolverDnSsyevj_bufferSize(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,jobz.value,uplo.value,n,
        <const float *>hip._util.types.Pointer.fromPyobj(A)._ptr,lda,
        <const float *>hip._util.types.Pointer.fromPyobj(W)._ptr,
        <int *>hip._util.types.ListOfInt.fromPyobj(lwork)._ptr,
        <void *>hip._util.types.Pointer.fromPyobj(params)._ptr))
    return (_hipsolverDnSsyevj_bufferSize__retval,)


@cython.embedsignature(True)
def hipsolverDnDsyevj_bufferSize(object handle, object jobz, object uplo, int n, object A, int lda, object W, object lwork, object params):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        jobz (`~.hipsolverEigMode_t`):
            (undocumented)

        uplo (`~.hipblasFillMode_t`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        A (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        W (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lwork (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)

        params (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)
    """
    if not isinstance(jobz,_hipsolverEigMode_t__Base):
        raise TypeError("argument 'jobz' must be of type '_hipsolverEigMode_t__Base'")                    
    if not isinstance(uplo,_hipblasFillMode_t__Base):
        raise TypeError("argument 'uplo' must be of type '_hipblasFillMode_t__Base'")
    _hipsolverDnDsyevj_bufferSize__retval = hipsolverStatus_t(chipsolver.hipsolverDnDsyevj_bufferSize(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,jobz.value,uplo.value,n,
        <const double *>hip._util.types.Pointer.fromPyobj(A)._ptr,lda,
        <const double *>hip._util.types.Pointer.fromPyobj(W)._ptr,
        <int *>hip._util.types.ListOfInt.fromPyobj(lwork)._ptr,
        <void *>hip._util.types.Pointer.fromPyobj(params)._ptr))
    return (_hipsolverDnDsyevj_bufferSize__retval,)


@cython.embedsignature(True)
def hipsolverDnCheevj_bufferSize(object handle, object jobz, object uplo, int n, object A, int lda, object W, object lwork, object params):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        jobz (`~.hipsolverEigMode_t`):
            (undocumented)

        uplo (`~.hipblasFillMode_t`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        A (`~.float2`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        W (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lwork (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)

        params (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)
    """
    if not isinstance(jobz,_hipsolverEigMode_t__Base):
        raise TypeError("argument 'jobz' must be of type '_hipsolverEigMode_t__Base'")                    
    if not isinstance(uplo,_hipblasFillMode_t__Base):
        raise TypeError("argument 'uplo' must be of type '_hipblasFillMode_t__Base'")
    _hipsolverDnCheevj_bufferSize__retval = hipsolverStatus_t(chipsolver.hipsolverDnCheevj_bufferSize(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,jobz.value,uplo.value,n,
        float2.fromPyobj(A).getElementPtr(),lda,
        <const float *>hip._util.types.Pointer.fromPyobj(W)._ptr,
        <int *>hip._util.types.ListOfInt.fromPyobj(lwork)._ptr,
        <void *>hip._util.types.Pointer.fromPyobj(params)._ptr))
    return (_hipsolverDnCheevj_bufferSize__retval,)


@cython.embedsignature(True)
def hipsolverDnZheevj_bufferSize(object handle, object jobz, object uplo, int n, object A, int lda, object W, object lwork, object params):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        jobz (`~.hipsolverEigMode_t`):
            (undocumented)

        uplo (`~.hipblasFillMode_t`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        A (`~.double2`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        W (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lwork (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)

        params (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)
    """
    if not isinstance(jobz,_hipsolverEigMode_t__Base):
        raise TypeError("argument 'jobz' must be of type '_hipsolverEigMode_t__Base'")                    
    if not isinstance(uplo,_hipblasFillMode_t__Base):
        raise TypeError("argument 'uplo' must be of type '_hipblasFillMode_t__Base'")
    _hipsolverDnZheevj_bufferSize__retval = hipsolverStatus_t(chipsolver.hipsolverDnZheevj_bufferSize(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,jobz.value,uplo.value,n,
        double2.fromPyobj(A).getElementPtr(),lda,
        <const double *>hip._util.types.Pointer.fromPyobj(W)._ptr,
        <int *>hip._util.types.ListOfInt.fromPyobj(lwork)._ptr,
        <void *>hip._util.types.Pointer.fromPyobj(params)._ptr))
    return (_hipsolverDnZheevj_bufferSize__retval,)


@cython.embedsignature(True)
def hipsolverDnSsyevj(object handle, object jobz, object uplo, int n, object A, int lda, object W, object work, int lwork, object devInfo, object params):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        jobz (`~.hipsolverEigMode_t`):
            (undocumented)

        uplo (`~.hipblasFillMode_t`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        A (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        W (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        work (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lwork (`~.int`):
            (undocumented)

        devInfo (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)

        params (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)
    """
    if not isinstance(jobz,_hipsolverEigMode_t__Base):
        raise TypeError("argument 'jobz' must be of type '_hipsolverEigMode_t__Base'")                    
    if not isinstance(uplo,_hipblasFillMode_t__Base):
        raise TypeError("argument 'uplo' must be of type '_hipblasFillMode_t__Base'")
    _hipsolverDnSsyevj__retval = hipsolverStatus_t(chipsolver.hipsolverDnSsyevj(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,jobz.value,uplo.value,n,
        <float *>hip._util.types.Pointer.fromPyobj(A)._ptr,lda,
        <float *>hip._util.types.Pointer.fromPyobj(W)._ptr,
        <float *>hip._util.types.Pointer.fromPyobj(work)._ptr,lwork,
        <int *>hip._util.types.ListOfInt.fromPyobj(devInfo)._ptr,
        <void *>hip._util.types.Pointer.fromPyobj(params)._ptr))
    return (_hipsolverDnSsyevj__retval,)


@cython.embedsignature(True)
def hipsolverDnDsyevj(object handle, object jobz, object uplo, int n, object A, int lda, object W, object work, int lwork, object devInfo, object params):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        jobz (`~.hipsolverEigMode_t`):
            (undocumented)

        uplo (`~.hipblasFillMode_t`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        A (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        W (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        work (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lwork (`~.int`):
            (undocumented)

        devInfo (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)

        params (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)
    """
    if not isinstance(jobz,_hipsolverEigMode_t__Base):
        raise TypeError("argument 'jobz' must be of type '_hipsolverEigMode_t__Base'")                    
    if not isinstance(uplo,_hipblasFillMode_t__Base):
        raise TypeError("argument 'uplo' must be of type '_hipblasFillMode_t__Base'")
    _hipsolverDnDsyevj__retval = hipsolverStatus_t(chipsolver.hipsolverDnDsyevj(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,jobz.value,uplo.value,n,
        <double *>hip._util.types.Pointer.fromPyobj(A)._ptr,lda,
        <double *>hip._util.types.Pointer.fromPyobj(W)._ptr,
        <double *>hip._util.types.Pointer.fromPyobj(work)._ptr,lwork,
        <int *>hip._util.types.ListOfInt.fromPyobj(devInfo)._ptr,
        <void *>hip._util.types.Pointer.fromPyobj(params)._ptr))
    return (_hipsolverDnDsyevj__retval,)


@cython.embedsignature(True)
def hipsolverDnCheevj(object handle, object jobz, object uplo, int n, object A, int lda, object W, object work, int lwork, object devInfo, object params):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        jobz (`~.hipsolverEigMode_t`):
            (undocumented)

        uplo (`~.hipblasFillMode_t`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        A (`~.float2`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        W (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        work (`~.float2`/`~.object`):
            (undocumented)

        lwork (`~.int`):
            (undocumented)

        devInfo (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)

        params (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)
    """
    if not isinstance(jobz,_hipsolverEigMode_t__Base):
        raise TypeError("argument 'jobz' must be of type '_hipsolverEigMode_t__Base'")                    
    if not isinstance(uplo,_hipblasFillMode_t__Base):
        raise TypeError("argument 'uplo' must be of type '_hipblasFillMode_t__Base'")
    _hipsolverDnCheevj__retval = hipsolverStatus_t(chipsolver.hipsolverDnCheevj(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,jobz.value,uplo.value,n,
        float2.fromPyobj(A).getElementPtr(),lda,
        <float *>hip._util.types.Pointer.fromPyobj(W)._ptr,
        float2.fromPyobj(work).getElementPtr(),lwork,
        <int *>hip._util.types.ListOfInt.fromPyobj(devInfo)._ptr,
        <void *>hip._util.types.Pointer.fromPyobj(params)._ptr))
    return (_hipsolverDnCheevj__retval,)


@cython.embedsignature(True)
def hipsolverDnZheevj(object handle, object jobz, object uplo, int n, object A, int lda, object W, object work, int lwork, object devInfo, object params):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        jobz (`~.hipsolverEigMode_t`):
            (undocumented)

        uplo (`~.hipblasFillMode_t`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        A (`~.double2`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        W (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        work (`~.double2`/`~.object`):
            (undocumented)

        lwork (`~.int`):
            (undocumented)

        devInfo (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)

        params (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)
    """
    if not isinstance(jobz,_hipsolverEigMode_t__Base):
        raise TypeError("argument 'jobz' must be of type '_hipsolverEigMode_t__Base'")                    
    if not isinstance(uplo,_hipblasFillMode_t__Base):
        raise TypeError("argument 'uplo' must be of type '_hipblasFillMode_t__Base'")
    _hipsolverDnZheevj__retval = hipsolverStatus_t(chipsolver.hipsolverDnZheevj(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,jobz.value,uplo.value,n,
        double2.fromPyobj(A).getElementPtr(),lda,
        <double *>hip._util.types.Pointer.fromPyobj(W)._ptr,
        double2.fromPyobj(work).getElementPtr(),lwork,
        <int *>hip._util.types.ListOfInt.fromPyobj(devInfo)._ptr,
        <void *>hip._util.types.Pointer.fromPyobj(params)._ptr))
    return (_hipsolverDnZheevj__retval,)


@cython.embedsignature(True)
def hipsolverDnSsyevjBatched_bufferSize(object handle, object jobz, object uplo, int n, object A, int lda, object W, object lwork, object params, int batch_count):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        jobz (`~.hipsolverEigMode_t`):
            (undocumented)

        uplo (`~.hipblasFillMode_t`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        A (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        W (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lwork (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)

        params (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        batch_count (`~.int`):
            (undocumented)
    """
    if not isinstance(jobz,_hipsolverEigMode_t__Base):
        raise TypeError("argument 'jobz' must be of type '_hipsolverEigMode_t__Base'")                    
    if not isinstance(uplo,_hipblasFillMode_t__Base):
        raise TypeError("argument 'uplo' must be of type '_hipblasFillMode_t__Base'")
    _hipsolverDnSsyevjBatched_bufferSize__retval = hipsolverStatus_t(chipsolver.hipsolverDnSsyevjBatched_bufferSize(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,jobz.value,uplo.value,n,
        <const float *>hip._util.types.Pointer.fromPyobj(A)._ptr,lda,
        <const float *>hip._util.types.Pointer.fromPyobj(W)._ptr,
        <int *>hip._util.types.ListOfInt.fromPyobj(lwork)._ptr,
        <void *>hip._util.types.Pointer.fromPyobj(params)._ptr,batch_count))
    return (_hipsolverDnSsyevjBatched_bufferSize__retval,)


@cython.embedsignature(True)
def hipsolverDnDsyevjBatched_bufferSize(object handle, object jobz, object uplo, int n, object A, int lda, object W, object lwork, object params, int batch_count):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        jobz (`~.hipsolverEigMode_t`):
            (undocumented)

        uplo (`~.hipblasFillMode_t`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        A (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        W (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lwork (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)

        params (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        batch_count (`~.int`):
            (undocumented)
    """
    if not isinstance(jobz,_hipsolverEigMode_t__Base):
        raise TypeError("argument 'jobz' must be of type '_hipsolverEigMode_t__Base'")                    
    if not isinstance(uplo,_hipblasFillMode_t__Base):
        raise TypeError("argument 'uplo' must be of type '_hipblasFillMode_t__Base'")
    _hipsolverDnDsyevjBatched_bufferSize__retval = hipsolverStatus_t(chipsolver.hipsolverDnDsyevjBatched_bufferSize(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,jobz.value,uplo.value,n,
        <const double *>hip._util.types.Pointer.fromPyobj(A)._ptr,lda,
        <const double *>hip._util.types.Pointer.fromPyobj(W)._ptr,
        <int *>hip._util.types.ListOfInt.fromPyobj(lwork)._ptr,
        <void *>hip._util.types.Pointer.fromPyobj(params)._ptr,batch_count))
    return (_hipsolverDnDsyevjBatched_bufferSize__retval,)


@cython.embedsignature(True)
def hipsolverDnCheevjBatched_bufferSize(object handle, object jobz, object uplo, int n, object A, int lda, object W, object lwork, object params, int batch_count):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        jobz (`~.hipsolverEigMode_t`):
            (undocumented)

        uplo (`~.hipblasFillMode_t`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        A (`~.float2`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        W (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lwork (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)

        params (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        batch_count (`~.int`):
            (undocumented)
    """
    if not isinstance(jobz,_hipsolverEigMode_t__Base):
        raise TypeError("argument 'jobz' must be of type '_hipsolverEigMode_t__Base'")                    
    if not isinstance(uplo,_hipblasFillMode_t__Base):
        raise TypeError("argument 'uplo' must be of type '_hipblasFillMode_t__Base'")
    _hipsolverDnCheevjBatched_bufferSize__retval = hipsolverStatus_t(chipsolver.hipsolverDnCheevjBatched_bufferSize(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,jobz.value,uplo.value,n,
        float2.fromPyobj(A).getElementPtr(),lda,
        <const float *>hip._util.types.Pointer.fromPyobj(W)._ptr,
        <int *>hip._util.types.ListOfInt.fromPyobj(lwork)._ptr,
        <void *>hip._util.types.Pointer.fromPyobj(params)._ptr,batch_count))
    return (_hipsolverDnCheevjBatched_bufferSize__retval,)


@cython.embedsignature(True)
def hipsolverDnZheevjBatched_bufferSize(object handle, object jobz, object uplo, int n, object A, int lda, object W, object lwork, object params, int batch_count):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        jobz (`~.hipsolverEigMode_t`):
            (undocumented)

        uplo (`~.hipblasFillMode_t`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        A (`~.double2`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        W (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lwork (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)

        params (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        batch_count (`~.int`):
            (undocumented)
    """
    if not isinstance(jobz,_hipsolverEigMode_t__Base):
        raise TypeError("argument 'jobz' must be of type '_hipsolverEigMode_t__Base'")                    
    if not isinstance(uplo,_hipblasFillMode_t__Base):
        raise TypeError("argument 'uplo' must be of type '_hipblasFillMode_t__Base'")
    _hipsolverDnZheevjBatched_bufferSize__retval = hipsolverStatus_t(chipsolver.hipsolverDnZheevjBatched_bufferSize(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,jobz.value,uplo.value,n,
        double2.fromPyobj(A).getElementPtr(),lda,
        <const double *>hip._util.types.Pointer.fromPyobj(W)._ptr,
        <int *>hip._util.types.ListOfInt.fromPyobj(lwork)._ptr,
        <void *>hip._util.types.Pointer.fromPyobj(params)._ptr,batch_count))
    return (_hipsolverDnZheevjBatched_bufferSize__retval,)


@cython.embedsignature(True)
def hipsolverDnSsyevjBatched(object handle, object jobz, object uplo, int n, object A, int lda, object W, object work, int lwork, object devInfo, object params, int batch_count):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        jobz (`~.hipsolverEigMode_t`):
            (undocumented)

        uplo (`~.hipblasFillMode_t`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        A (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        W (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        work (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lwork (`~.int`):
            (undocumented)

        devInfo (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)

        params (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        batch_count (`~.int`):
            (undocumented)
    """
    if not isinstance(jobz,_hipsolverEigMode_t__Base):
        raise TypeError("argument 'jobz' must be of type '_hipsolverEigMode_t__Base'")                    
    if not isinstance(uplo,_hipblasFillMode_t__Base):
        raise TypeError("argument 'uplo' must be of type '_hipblasFillMode_t__Base'")
    _hipsolverDnSsyevjBatched__retval = hipsolverStatus_t(chipsolver.hipsolverDnSsyevjBatched(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,jobz.value,uplo.value,n,
        <float *>hip._util.types.Pointer.fromPyobj(A)._ptr,lda,
        <float *>hip._util.types.Pointer.fromPyobj(W)._ptr,
        <float *>hip._util.types.Pointer.fromPyobj(work)._ptr,lwork,
        <int *>hip._util.types.ListOfInt.fromPyobj(devInfo)._ptr,
        <void *>hip._util.types.Pointer.fromPyobj(params)._ptr,batch_count))
    return (_hipsolverDnSsyevjBatched__retval,)


@cython.embedsignature(True)
def hipsolverDnDsyevjBatched(object handle, object jobz, object uplo, int n, object A, int lda, object W, object work, int lwork, object devInfo, object params, int batch_count):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        jobz (`~.hipsolverEigMode_t`):
            (undocumented)

        uplo (`~.hipblasFillMode_t`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        A (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        W (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        work (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lwork (`~.int`):
            (undocumented)

        devInfo (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)

        params (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        batch_count (`~.int`):
            (undocumented)
    """
    if not isinstance(jobz,_hipsolverEigMode_t__Base):
        raise TypeError("argument 'jobz' must be of type '_hipsolverEigMode_t__Base'")                    
    if not isinstance(uplo,_hipblasFillMode_t__Base):
        raise TypeError("argument 'uplo' must be of type '_hipblasFillMode_t__Base'")
    _hipsolverDnDsyevjBatched__retval = hipsolverStatus_t(chipsolver.hipsolverDnDsyevjBatched(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,jobz.value,uplo.value,n,
        <double *>hip._util.types.Pointer.fromPyobj(A)._ptr,lda,
        <double *>hip._util.types.Pointer.fromPyobj(W)._ptr,
        <double *>hip._util.types.Pointer.fromPyobj(work)._ptr,lwork,
        <int *>hip._util.types.ListOfInt.fromPyobj(devInfo)._ptr,
        <void *>hip._util.types.Pointer.fromPyobj(params)._ptr,batch_count))
    return (_hipsolverDnDsyevjBatched__retval,)


@cython.embedsignature(True)
def hipsolverDnCheevjBatched(object handle, object jobz, object uplo, int n, object A, int lda, object W, object work, int lwork, object devInfo, object params, int batch_count):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        jobz (`~.hipsolverEigMode_t`):
            (undocumented)

        uplo (`~.hipblasFillMode_t`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        A (`~.float2`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        W (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        work (`~.float2`/`~.object`):
            (undocumented)

        lwork (`~.int`):
            (undocumented)

        devInfo (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)

        params (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        batch_count (`~.int`):
            (undocumented)
    """
    if not isinstance(jobz,_hipsolverEigMode_t__Base):
        raise TypeError("argument 'jobz' must be of type '_hipsolverEigMode_t__Base'")                    
    if not isinstance(uplo,_hipblasFillMode_t__Base):
        raise TypeError("argument 'uplo' must be of type '_hipblasFillMode_t__Base'")
    _hipsolverDnCheevjBatched__retval = hipsolverStatus_t(chipsolver.hipsolverDnCheevjBatched(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,jobz.value,uplo.value,n,
        float2.fromPyobj(A).getElementPtr(),lda,
        <float *>hip._util.types.Pointer.fromPyobj(W)._ptr,
        float2.fromPyobj(work).getElementPtr(),lwork,
        <int *>hip._util.types.ListOfInt.fromPyobj(devInfo)._ptr,
        <void *>hip._util.types.Pointer.fromPyobj(params)._ptr,batch_count))
    return (_hipsolverDnCheevjBatched__retval,)


@cython.embedsignature(True)
def hipsolverDnZheevjBatched(object handle, object jobz, object uplo, int n, object A, int lda, object W, object work, int lwork, object devInfo, object params, int batch_count):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        jobz (`~.hipsolverEigMode_t`):
            (undocumented)

        uplo (`~.hipblasFillMode_t`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        A (`~.double2`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        W (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        work (`~.double2`/`~.object`):
            (undocumented)

        lwork (`~.int`):
            (undocumented)

        devInfo (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)

        params (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        batch_count (`~.int`):
            (undocumented)
    """
    if not isinstance(jobz,_hipsolverEigMode_t__Base):
        raise TypeError("argument 'jobz' must be of type '_hipsolverEigMode_t__Base'")                    
    if not isinstance(uplo,_hipblasFillMode_t__Base):
        raise TypeError("argument 'uplo' must be of type '_hipblasFillMode_t__Base'")
    _hipsolverDnZheevjBatched__retval = hipsolverStatus_t(chipsolver.hipsolverDnZheevjBatched(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,jobz.value,uplo.value,n,
        double2.fromPyobj(A).getElementPtr(),lda,
        <double *>hip._util.types.Pointer.fromPyobj(W)._ptr,
        double2.fromPyobj(work).getElementPtr(),lwork,
        <int *>hip._util.types.ListOfInt.fromPyobj(devInfo)._ptr,
        <void *>hip._util.types.Pointer.fromPyobj(params)._ptr,batch_count))
    return (_hipsolverDnZheevjBatched__retval,)


@cython.embedsignature(True)
def hipsolverDnSsygvd_bufferSize(object handle, object itype, object jobz, object uplo, int n, object A, int lda, object B, int ldb, object W, object lwork):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        itype (`~.hipsolverEigType_t`):
            (undocumented)

        jobz (`~.hipsolverEigMode_t`):
            (undocumented)

        uplo (`~.hipblasFillMode_t`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        A (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        B (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        ldb (`~.int`):
            (undocumented)

        W (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lwork (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)
    """
    if not isinstance(itype,_hipsolverEigType_t__Base):
        raise TypeError("argument 'itype' must be of type '_hipsolverEigType_t__Base'")                    
    if not isinstance(jobz,_hipsolverEigMode_t__Base):
        raise TypeError("argument 'jobz' must be of type '_hipsolverEigMode_t__Base'")                    
    if not isinstance(uplo,_hipblasFillMode_t__Base):
        raise TypeError("argument 'uplo' must be of type '_hipblasFillMode_t__Base'")
    _hipsolverDnSsygvd_bufferSize__retval = hipsolverStatus_t(chipsolver.hipsolverDnSsygvd_bufferSize(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,itype.value,jobz.value,uplo.value,n,
        <const float *>hip._util.types.Pointer.fromPyobj(A)._ptr,lda,
        <const float *>hip._util.types.Pointer.fromPyobj(B)._ptr,ldb,
        <const float *>hip._util.types.Pointer.fromPyobj(W)._ptr,
        <int *>hip._util.types.ListOfInt.fromPyobj(lwork)._ptr))
    return (_hipsolverDnSsygvd_bufferSize__retval,)


@cython.embedsignature(True)
def hipsolverDnDsygvd_bufferSize(object handle, object itype, object jobz, object uplo, int n, object A, int lda, object B, int ldb, object W, object lwork):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        itype (`~.hipsolverEigType_t`):
            (undocumented)

        jobz (`~.hipsolverEigMode_t`):
            (undocumented)

        uplo (`~.hipblasFillMode_t`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        A (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        B (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        ldb (`~.int`):
            (undocumented)

        W (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lwork (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)
    """
    if not isinstance(itype,_hipsolverEigType_t__Base):
        raise TypeError("argument 'itype' must be of type '_hipsolverEigType_t__Base'")                    
    if not isinstance(jobz,_hipsolverEigMode_t__Base):
        raise TypeError("argument 'jobz' must be of type '_hipsolverEigMode_t__Base'")                    
    if not isinstance(uplo,_hipblasFillMode_t__Base):
        raise TypeError("argument 'uplo' must be of type '_hipblasFillMode_t__Base'")
    _hipsolverDnDsygvd_bufferSize__retval = hipsolverStatus_t(chipsolver.hipsolverDnDsygvd_bufferSize(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,itype.value,jobz.value,uplo.value,n,
        <const double *>hip._util.types.Pointer.fromPyobj(A)._ptr,lda,
        <const double *>hip._util.types.Pointer.fromPyobj(B)._ptr,ldb,
        <const double *>hip._util.types.Pointer.fromPyobj(W)._ptr,
        <int *>hip._util.types.ListOfInt.fromPyobj(lwork)._ptr))
    return (_hipsolverDnDsygvd_bufferSize__retval,)


@cython.embedsignature(True)
def hipsolverDnChegvd_bufferSize(object handle, object itype, object jobz, object uplo, int n, object A, int lda, object B, int ldb, object W, object lwork):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        itype (`~.hipsolverEigType_t`):
            (undocumented)

        jobz (`~.hipsolverEigMode_t`):
            (undocumented)

        uplo (`~.hipblasFillMode_t`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        A (`~.float2`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        B (`~.float2`/`~.object`):
            (undocumented)

        ldb (`~.int`):
            (undocumented)

        W (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lwork (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)
    """
    if not isinstance(itype,_hipsolverEigType_t__Base):
        raise TypeError("argument 'itype' must be of type '_hipsolverEigType_t__Base'")                    
    if not isinstance(jobz,_hipsolverEigMode_t__Base):
        raise TypeError("argument 'jobz' must be of type '_hipsolverEigMode_t__Base'")                    
    if not isinstance(uplo,_hipblasFillMode_t__Base):
        raise TypeError("argument 'uplo' must be of type '_hipblasFillMode_t__Base'")
    _hipsolverDnChegvd_bufferSize__retval = hipsolverStatus_t(chipsolver.hipsolverDnChegvd_bufferSize(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,itype.value,jobz.value,uplo.value,n,
        float2.fromPyobj(A).getElementPtr(),lda,
        float2.fromPyobj(B).getElementPtr(),ldb,
        <const float *>hip._util.types.Pointer.fromPyobj(W)._ptr,
        <int *>hip._util.types.ListOfInt.fromPyobj(lwork)._ptr))
    return (_hipsolverDnChegvd_bufferSize__retval,)


@cython.embedsignature(True)
def hipsolverDnZhegvd_bufferSize(object handle, object itype, object jobz, object uplo, int n, object A, int lda, object B, int ldb, object W, object lwork):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        itype (`~.hipsolverEigType_t`):
            (undocumented)

        jobz (`~.hipsolverEigMode_t`):
            (undocumented)

        uplo (`~.hipblasFillMode_t`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        A (`~.double2`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        B (`~.double2`/`~.object`):
            (undocumented)

        ldb (`~.int`):
            (undocumented)

        W (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lwork (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)
    """
    if not isinstance(itype,_hipsolverEigType_t__Base):
        raise TypeError("argument 'itype' must be of type '_hipsolverEigType_t__Base'")                    
    if not isinstance(jobz,_hipsolverEigMode_t__Base):
        raise TypeError("argument 'jobz' must be of type '_hipsolverEigMode_t__Base'")                    
    if not isinstance(uplo,_hipblasFillMode_t__Base):
        raise TypeError("argument 'uplo' must be of type '_hipblasFillMode_t__Base'")
    _hipsolverDnZhegvd_bufferSize__retval = hipsolverStatus_t(chipsolver.hipsolverDnZhegvd_bufferSize(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,itype.value,jobz.value,uplo.value,n,
        double2.fromPyobj(A).getElementPtr(),lda,
        double2.fromPyobj(B).getElementPtr(),ldb,
        <const double *>hip._util.types.Pointer.fromPyobj(W)._ptr,
        <int *>hip._util.types.ListOfInt.fromPyobj(lwork)._ptr))
    return (_hipsolverDnZhegvd_bufferSize__retval,)


@cython.embedsignature(True)
def hipsolverDnSsygvd(object handle, object itype, object jobz, object uplo, int n, object A, int lda, object B, int ldb, object W, object work, int lwork, object devInfo):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        itype (`~.hipsolverEigType_t`):
            (undocumented)

        jobz (`~.hipsolverEigMode_t`):
            (undocumented)

        uplo (`~.hipblasFillMode_t`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        A (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        B (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        ldb (`~.int`):
            (undocumented)

        W (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        work (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lwork (`~.int`):
            (undocumented)

        devInfo (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)
    """
    if not isinstance(itype,_hipsolverEigType_t__Base):
        raise TypeError("argument 'itype' must be of type '_hipsolverEigType_t__Base'")                    
    if not isinstance(jobz,_hipsolverEigMode_t__Base):
        raise TypeError("argument 'jobz' must be of type '_hipsolverEigMode_t__Base'")                    
    if not isinstance(uplo,_hipblasFillMode_t__Base):
        raise TypeError("argument 'uplo' must be of type '_hipblasFillMode_t__Base'")
    _hipsolverDnSsygvd__retval = hipsolverStatus_t(chipsolver.hipsolverDnSsygvd(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,itype.value,jobz.value,uplo.value,n,
        <float *>hip._util.types.Pointer.fromPyobj(A)._ptr,lda,
        <float *>hip._util.types.Pointer.fromPyobj(B)._ptr,ldb,
        <float *>hip._util.types.Pointer.fromPyobj(W)._ptr,
        <float *>hip._util.types.Pointer.fromPyobj(work)._ptr,lwork,
        <int *>hip._util.types.ListOfInt.fromPyobj(devInfo)._ptr))
    return (_hipsolverDnSsygvd__retval,)


@cython.embedsignature(True)
def hipsolverDnDsygvd(object handle, object itype, object jobz, object uplo, int n, object A, int lda, object B, int ldb, object W, object work, int lwork, object devInfo):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        itype (`~.hipsolverEigType_t`):
            (undocumented)

        jobz (`~.hipsolverEigMode_t`):
            (undocumented)

        uplo (`~.hipblasFillMode_t`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        A (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        B (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        ldb (`~.int`):
            (undocumented)

        W (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        work (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lwork (`~.int`):
            (undocumented)

        devInfo (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)
    """
    if not isinstance(itype,_hipsolverEigType_t__Base):
        raise TypeError("argument 'itype' must be of type '_hipsolverEigType_t__Base'")                    
    if not isinstance(jobz,_hipsolverEigMode_t__Base):
        raise TypeError("argument 'jobz' must be of type '_hipsolverEigMode_t__Base'")                    
    if not isinstance(uplo,_hipblasFillMode_t__Base):
        raise TypeError("argument 'uplo' must be of type '_hipblasFillMode_t__Base'")
    _hipsolverDnDsygvd__retval = hipsolverStatus_t(chipsolver.hipsolverDnDsygvd(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,itype.value,jobz.value,uplo.value,n,
        <double *>hip._util.types.Pointer.fromPyobj(A)._ptr,lda,
        <double *>hip._util.types.Pointer.fromPyobj(B)._ptr,ldb,
        <double *>hip._util.types.Pointer.fromPyobj(W)._ptr,
        <double *>hip._util.types.Pointer.fromPyobj(work)._ptr,lwork,
        <int *>hip._util.types.ListOfInt.fromPyobj(devInfo)._ptr))
    return (_hipsolverDnDsygvd__retval,)


@cython.embedsignature(True)
def hipsolverDnChegvd(object handle, object itype, object jobz, object uplo, int n, object A, int lda, object B, int ldb, object W, object work, int lwork, object devInfo):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        itype (`~.hipsolverEigType_t`):
            (undocumented)

        jobz (`~.hipsolverEigMode_t`):
            (undocumented)

        uplo (`~.hipblasFillMode_t`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        A (`~.float2`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        B (`~.float2`/`~.object`):
            (undocumented)

        ldb (`~.int`):
            (undocumented)

        W (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        work (`~.float2`/`~.object`):
            (undocumented)

        lwork (`~.int`):
            (undocumented)

        devInfo (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)
    """
    if not isinstance(itype,_hipsolverEigType_t__Base):
        raise TypeError("argument 'itype' must be of type '_hipsolverEigType_t__Base'")                    
    if not isinstance(jobz,_hipsolverEigMode_t__Base):
        raise TypeError("argument 'jobz' must be of type '_hipsolverEigMode_t__Base'")                    
    if not isinstance(uplo,_hipblasFillMode_t__Base):
        raise TypeError("argument 'uplo' must be of type '_hipblasFillMode_t__Base'")
    _hipsolverDnChegvd__retval = hipsolverStatus_t(chipsolver.hipsolverDnChegvd(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,itype.value,jobz.value,uplo.value,n,
        float2.fromPyobj(A).getElementPtr(),lda,
        float2.fromPyobj(B).getElementPtr(),ldb,
        <float *>hip._util.types.Pointer.fromPyobj(W)._ptr,
        float2.fromPyobj(work).getElementPtr(),lwork,
        <int *>hip._util.types.ListOfInt.fromPyobj(devInfo)._ptr))
    return (_hipsolverDnChegvd__retval,)


@cython.embedsignature(True)
def hipsolverDnZhegvd(object handle, object itype, object jobz, object uplo, int n, object A, int lda, object B, int ldb, object W, object work, int lwork, object devInfo):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        itype (`~.hipsolverEigType_t`):
            (undocumented)

        jobz (`~.hipsolverEigMode_t`):
            (undocumented)

        uplo (`~.hipblasFillMode_t`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        A (`~.double2`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        B (`~.double2`/`~.object`):
            (undocumented)

        ldb (`~.int`):
            (undocumented)

        W (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        work (`~.double2`/`~.object`):
            (undocumented)

        lwork (`~.int`):
            (undocumented)

        devInfo (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)
    """
    if not isinstance(itype,_hipsolverEigType_t__Base):
        raise TypeError("argument 'itype' must be of type '_hipsolverEigType_t__Base'")                    
    if not isinstance(jobz,_hipsolverEigMode_t__Base):
        raise TypeError("argument 'jobz' must be of type '_hipsolverEigMode_t__Base'")                    
    if not isinstance(uplo,_hipblasFillMode_t__Base):
        raise TypeError("argument 'uplo' must be of type '_hipblasFillMode_t__Base'")
    _hipsolverDnZhegvd__retval = hipsolverStatus_t(chipsolver.hipsolverDnZhegvd(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,itype.value,jobz.value,uplo.value,n,
        double2.fromPyobj(A).getElementPtr(),lda,
        double2.fromPyobj(B).getElementPtr(),ldb,
        <double *>hip._util.types.Pointer.fromPyobj(W)._ptr,
        double2.fromPyobj(work).getElementPtr(),lwork,
        <int *>hip._util.types.ListOfInt.fromPyobj(devInfo)._ptr))
    return (_hipsolverDnZhegvd__retval,)


@cython.embedsignature(True)
def hipsolverDnSsygvdx_bufferSize(object handle, object itype, object jobz, object range, object uplo, int n, object A, int lda, object B, int ldb, float vl, float vu, int il, int iu, object nev, object W, object lwork):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        itype (`~.hipsolverEigType_t`):
            (undocumented)

        jobz (`~.hipsolverEigMode_t`):
            (undocumented)

        range (`~.hipsolverEigRange_t`):
            (undocumented)

        uplo (`~.hipblasFillMode_t`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        A (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        B (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        ldb (`~.int`):
            (undocumented)

        vl (`~.float`/`~.int`):
            (undocumented)

        vu (`~.float`/`~.int`):
            (undocumented)

        il (`~.int`):
            (undocumented)

        iu (`~.int`):
            (undocumented)

        nev (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)

        W (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lwork (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)
    """
    if not isinstance(itype,_hipsolverEigType_t__Base):
        raise TypeError("argument 'itype' must be of type '_hipsolverEigType_t__Base'")                    
    if not isinstance(jobz,_hipsolverEigMode_t__Base):
        raise TypeError("argument 'jobz' must be of type '_hipsolverEigMode_t__Base'")                    
    if not isinstance(range,_hipsolverEigRange_t__Base):
        raise TypeError("argument 'range' must be of type '_hipsolverEigRange_t__Base'")                    
    if not isinstance(uplo,_hipblasFillMode_t__Base):
        raise TypeError("argument 'uplo' must be of type '_hipblasFillMode_t__Base'")
    _hipsolverDnSsygvdx_bufferSize__retval = hipsolverStatus_t(chipsolver.hipsolverDnSsygvdx_bufferSize(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,itype.value,jobz.value,range.value,uplo.value,n,
        <const float *>hip._util.types.Pointer.fromPyobj(A)._ptr,lda,
        <const float *>hip._util.types.Pointer.fromPyobj(B)._ptr,ldb,vl,vu,il,iu,
        <int *>hip._util.types.ListOfInt.fromPyobj(nev)._ptr,
        <const float *>hip._util.types.Pointer.fromPyobj(W)._ptr,
        <int *>hip._util.types.ListOfInt.fromPyobj(lwork)._ptr))
    return (_hipsolverDnSsygvdx_bufferSize__retval,)


@cython.embedsignature(True)
def hipsolverDnDsygvdx_bufferSize(object handle, object itype, object jobz, object range, object uplo, int n, object A, int lda, object B, int ldb, double vl, double vu, int il, int iu, object nev, object W, object lwork):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        itype (`~.hipsolverEigType_t`):
            (undocumented)

        jobz (`~.hipsolverEigMode_t`):
            (undocumented)

        range (`~.hipsolverEigRange_t`):
            (undocumented)

        uplo (`~.hipblasFillMode_t`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        A (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        B (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        ldb (`~.int`):
            (undocumented)

        vl (`~.float`/`~.int`):
            (undocumented)

        vu (`~.float`/`~.int`):
            (undocumented)

        il (`~.int`):
            (undocumented)

        iu (`~.int`):
            (undocumented)

        nev (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)

        W (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lwork (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)
    """
    if not isinstance(itype,_hipsolverEigType_t__Base):
        raise TypeError("argument 'itype' must be of type '_hipsolverEigType_t__Base'")                    
    if not isinstance(jobz,_hipsolverEigMode_t__Base):
        raise TypeError("argument 'jobz' must be of type '_hipsolverEigMode_t__Base'")                    
    if not isinstance(range,_hipsolverEigRange_t__Base):
        raise TypeError("argument 'range' must be of type '_hipsolverEigRange_t__Base'")                    
    if not isinstance(uplo,_hipblasFillMode_t__Base):
        raise TypeError("argument 'uplo' must be of type '_hipblasFillMode_t__Base'")
    _hipsolverDnDsygvdx_bufferSize__retval = hipsolverStatus_t(chipsolver.hipsolverDnDsygvdx_bufferSize(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,itype.value,jobz.value,range.value,uplo.value,n,
        <const double *>hip._util.types.Pointer.fromPyobj(A)._ptr,lda,
        <const double *>hip._util.types.Pointer.fromPyobj(B)._ptr,ldb,vl,vu,il,iu,
        <int *>hip._util.types.ListOfInt.fromPyobj(nev)._ptr,
        <const double *>hip._util.types.Pointer.fromPyobj(W)._ptr,
        <int *>hip._util.types.ListOfInt.fromPyobj(lwork)._ptr))
    return (_hipsolverDnDsygvdx_bufferSize__retval,)


@cython.embedsignature(True)
def hipsolverDnChegvdx_bufferSize(object handle, object itype, object jobz, object range, object uplo, int n, object A, int lda, object B, int ldb, float vl, float vu, int il, int iu, object nev, object W, object lwork):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        itype (`~.hipsolverEigType_t`):
            (undocumented)

        jobz (`~.hipsolverEigMode_t`):
            (undocumented)

        range (`~.hipsolverEigRange_t`):
            (undocumented)

        uplo (`~.hipblasFillMode_t`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        A (`~.float2`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        B (`~.float2`/`~.object`):
            (undocumented)

        ldb (`~.int`):
            (undocumented)

        vl (`~.float`/`~.int`):
            (undocumented)

        vu (`~.float`/`~.int`):
            (undocumented)

        il (`~.int`):
            (undocumented)

        iu (`~.int`):
            (undocumented)

        nev (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)

        W (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lwork (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)
    """
    if not isinstance(itype,_hipsolverEigType_t__Base):
        raise TypeError("argument 'itype' must be of type '_hipsolverEigType_t__Base'")                    
    if not isinstance(jobz,_hipsolverEigMode_t__Base):
        raise TypeError("argument 'jobz' must be of type '_hipsolverEigMode_t__Base'")                    
    if not isinstance(range,_hipsolverEigRange_t__Base):
        raise TypeError("argument 'range' must be of type '_hipsolverEigRange_t__Base'")                    
    if not isinstance(uplo,_hipblasFillMode_t__Base):
        raise TypeError("argument 'uplo' must be of type '_hipblasFillMode_t__Base'")
    _hipsolverDnChegvdx_bufferSize__retval = hipsolverStatus_t(chipsolver.hipsolverDnChegvdx_bufferSize(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,itype.value,jobz.value,range.value,uplo.value,n,
        float2.fromPyobj(A).getElementPtr(),lda,
        float2.fromPyobj(B).getElementPtr(),ldb,vl,vu,il,iu,
        <int *>hip._util.types.ListOfInt.fromPyobj(nev)._ptr,
        <const float *>hip._util.types.Pointer.fromPyobj(W)._ptr,
        <int *>hip._util.types.ListOfInt.fromPyobj(lwork)._ptr))
    return (_hipsolverDnChegvdx_bufferSize__retval,)


@cython.embedsignature(True)
def hipsolverDnZhegvdx_bufferSize(object handle, object itype, object jobz, object range, object uplo, int n, object A, int lda, object B, int ldb, double vl, double vu, int il, int iu, object nev, object W, object lwork):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        itype (`~.hipsolverEigType_t`):
            (undocumented)

        jobz (`~.hipsolverEigMode_t`):
            (undocumented)

        range (`~.hipsolverEigRange_t`):
            (undocumented)

        uplo (`~.hipblasFillMode_t`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        A (`~.double2`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        B (`~.double2`/`~.object`):
            (undocumented)

        ldb (`~.int`):
            (undocumented)

        vl (`~.float`/`~.int`):
            (undocumented)

        vu (`~.float`/`~.int`):
            (undocumented)

        il (`~.int`):
            (undocumented)

        iu (`~.int`):
            (undocumented)

        nev (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)

        W (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lwork (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)
    """
    if not isinstance(itype,_hipsolverEigType_t__Base):
        raise TypeError("argument 'itype' must be of type '_hipsolverEigType_t__Base'")                    
    if not isinstance(jobz,_hipsolverEigMode_t__Base):
        raise TypeError("argument 'jobz' must be of type '_hipsolverEigMode_t__Base'")                    
    if not isinstance(range,_hipsolverEigRange_t__Base):
        raise TypeError("argument 'range' must be of type '_hipsolverEigRange_t__Base'")                    
    if not isinstance(uplo,_hipblasFillMode_t__Base):
        raise TypeError("argument 'uplo' must be of type '_hipblasFillMode_t__Base'")
    _hipsolverDnZhegvdx_bufferSize__retval = hipsolverStatus_t(chipsolver.hipsolverDnZhegvdx_bufferSize(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,itype.value,jobz.value,range.value,uplo.value,n,
        double2.fromPyobj(A).getElementPtr(),lda,
        double2.fromPyobj(B).getElementPtr(),ldb,vl,vu,il,iu,
        <int *>hip._util.types.ListOfInt.fromPyobj(nev)._ptr,
        <const double *>hip._util.types.Pointer.fromPyobj(W)._ptr,
        <int *>hip._util.types.ListOfInt.fromPyobj(lwork)._ptr))
    return (_hipsolverDnZhegvdx_bufferSize__retval,)


@cython.embedsignature(True)
def hipsolverDnSsygvdx(object handle, object itype, object jobz, object range, object uplo, int n, object A, int lda, object B, int ldb, float vl, float vu, int il, int iu, object nev, object W, object work, int lwork, object devInfo):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        itype (`~.hipsolverEigType_t`):
            (undocumented)

        jobz (`~.hipsolverEigMode_t`):
            (undocumented)

        range (`~.hipsolverEigRange_t`):
            (undocumented)

        uplo (`~.hipblasFillMode_t`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        A (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        B (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        ldb (`~.int`):
            (undocumented)

        vl (`~.float`/`~.int`):
            (undocumented)

        vu (`~.float`/`~.int`):
            (undocumented)

        il (`~.int`):
            (undocumented)

        iu (`~.int`):
            (undocumented)

        nev (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)

        W (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        work (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lwork (`~.int`):
            (undocumented)

        devInfo (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)
    """
    if not isinstance(itype,_hipsolverEigType_t__Base):
        raise TypeError("argument 'itype' must be of type '_hipsolverEigType_t__Base'")                    
    if not isinstance(jobz,_hipsolverEigMode_t__Base):
        raise TypeError("argument 'jobz' must be of type '_hipsolverEigMode_t__Base'")                    
    if not isinstance(range,_hipsolverEigRange_t__Base):
        raise TypeError("argument 'range' must be of type '_hipsolverEigRange_t__Base'")                    
    if not isinstance(uplo,_hipblasFillMode_t__Base):
        raise TypeError("argument 'uplo' must be of type '_hipblasFillMode_t__Base'")
    _hipsolverDnSsygvdx__retval = hipsolverStatus_t(chipsolver.hipsolverDnSsygvdx(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,itype.value,jobz.value,range.value,uplo.value,n,
        <float *>hip._util.types.Pointer.fromPyobj(A)._ptr,lda,
        <float *>hip._util.types.Pointer.fromPyobj(B)._ptr,ldb,vl,vu,il,iu,
        <int *>hip._util.types.ListOfInt.fromPyobj(nev)._ptr,
        <float *>hip._util.types.Pointer.fromPyobj(W)._ptr,
        <float *>hip._util.types.Pointer.fromPyobj(work)._ptr,lwork,
        <int *>hip._util.types.ListOfInt.fromPyobj(devInfo)._ptr))
    return (_hipsolverDnSsygvdx__retval,)


@cython.embedsignature(True)
def hipsolverDnDsygvdx(object handle, object itype, object jobz, object range, object uplo, int n, object A, int lda, object B, int ldb, double vl, double vu, int il, int iu, object nev, object W, object work, int lwork, object devInfo):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        itype (`~.hipsolverEigType_t`):
            (undocumented)

        jobz (`~.hipsolverEigMode_t`):
            (undocumented)

        range (`~.hipsolverEigRange_t`):
            (undocumented)

        uplo (`~.hipblasFillMode_t`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        A (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        B (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        ldb (`~.int`):
            (undocumented)

        vl (`~.float`/`~.int`):
            (undocumented)

        vu (`~.float`/`~.int`):
            (undocumented)

        il (`~.int`):
            (undocumented)

        iu (`~.int`):
            (undocumented)

        nev (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)

        W (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        work (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lwork (`~.int`):
            (undocumented)

        devInfo (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)
    """
    if not isinstance(itype,_hipsolverEigType_t__Base):
        raise TypeError("argument 'itype' must be of type '_hipsolverEigType_t__Base'")                    
    if not isinstance(jobz,_hipsolverEigMode_t__Base):
        raise TypeError("argument 'jobz' must be of type '_hipsolverEigMode_t__Base'")                    
    if not isinstance(range,_hipsolverEigRange_t__Base):
        raise TypeError("argument 'range' must be of type '_hipsolverEigRange_t__Base'")                    
    if not isinstance(uplo,_hipblasFillMode_t__Base):
        raise TypeError("argument 'uplo' must be of type '_hipblasFillMode_t__Base'")
    _hipsolverDnDsygvdx__retval = hipsolverStatus_t(chipsolver.hipsolverDnDsygvdx(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,itype.value,jobz.value,range.value,uplo.value,n,
        <double *>hip._util.types.Pointer.fromPyobj(A)._ptr,lda,
        <double *>hip._util.types.Pointer.fromPyobj(B)._ptr,ldb,vl,vu,il,iu,
        <int *>hip._util.types.ListOfInt.fromPyobj(nev)._ptr,
        <double *>hip._util.types.Pointer.fromPyobj(W)._ptr,
        <double *>hip._util.types.Pointer.fromPyobj(work)._ptr,lwork,
        <int *>hip._util.types.ListOfInt.fromPyobj(devInfo)._ptr))
    return (_hipsolverDnDsygvdx__retval,)


@cython.embedsignature(True)
def hipsolverDnChegvdx(object handle, object itype, object jobz, object range, object uplo, int n, object A, int lda, object B, int ldb, float vl, float vu, int il, int iu, object nev, object W, object work, int lwork, object devInfo):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        itype (`~.hipsolverEigType_t`):
            (undocumented)

        jobz (`~.hipsolverEigMode_t`):
            (undocumented)

        range (`~.hipsolverEigRange_t`):
            (undocumented)

        uplo (`~.hipblasFillMode_t`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        A (`~.float2`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        B (`~.float2`/`~.object`):
            (undocumented)

        ldb (`~.int`):
            (undocumented)

        vl (`~.float`/`~.int`):
            (undocumented)

        vu (`~.float`/`~.int`):
            (undocumented)

        il (`~.int`):
            (undocumented)

        iu (`~.int`):
            (undocumented)

        nev (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)

        W (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        work (`~.float2`/`~.object`):
            (undocumented)

        lwork (`~.int`):
            (undocumented)

        devInfo (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)
    """
    if not isinstance(itype,_hipsolverEigType_t__Base):
        raise TypeError("argument 'itype' must be of type '_hipsolverEigType_t__Base'")                    
    if not isinstance(jobz,_hipsolverEigMode_t__Base):
        raise TypeError("argument 'jobz' must be of type '_hipsolverEigMode_t__Base'")                    
    if not isinstance(range,_hipsolverEigRange_t__Base):
        raise TypeError("argument 'range' must be of type '_hipsolverEigRange_t__Base'")                    
    if not isinstance(uplo,_hipblasFillMode_t__Base):
        raise TypeError("argument 'uplo' must be of type '_hipblasFillMode_t__Base'")
    _hipsolverDnChegvdx__retval = hipsolverStatus_t(chipsolver.hipsolverDnChegvdx(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,itype.value,jobz.value,range.value,uplo.value,n,
        float2.fromPyobj(A).getElementPtr(),lda,
        float2.fromPyobj(B).getElementPtr(),ldb,vl,vu,il,iu,
        <int *>hip._util.types.ListOfInt.fromPyobj(nev)._ptr,
        <float *>hip._util.types.Pointer.fromPyobj(W)._ptr,
        float2.fromPyobj(work).getElementPtr(),lwork,
        <int *>hip._util.types.ListOfInt.fromPyobj(devInfo)._ptr))
    return (_hipsolverDnChegvdx__retval,)


@cython.embedsignature(True)
def hipsolverDnZhegvdx(object handle, object itype, object jobz, object range, object uplo, int n, object A, int lda, object B, int ldb, double vl, double vu, int il, int iu, object nev, object W, object work, int lwork, object devInfo):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        itype (`~.hipsolverEigType_t`):
            (undocumented)

        jobz (`~.hipsolverEigMode_t`):
            (undocumented)

        range (`~.hipsolverEigRange_t`):
            (undocumented)

        uplo (`~.hipblasFillMode_t`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        A (`~.double2`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        B (`~.double2`/`~.object`):
            (undocumented)

        ldb (`~.int`):
            (undocumented)

        vl (`~.float`/`~.int`):
            (undocumented)

        vu (`~.float`/`~.int`):
            (undocumented)

        il (`~.int`):
            (undocumented)

        iu (`~.int`):
            (undocumented)

        nev (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)

        W (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        work (`~.double2`/`~.object`):
            (undocumented)

        lwork (`~.int`):
            (undocumented)

        devInfo (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)
    """
    if not isinstance(itype,_hipsolverEigType_t__Base):
        raise TypeError("argument 'itype' must be of type '_hipsolverEigType_t__Base'")                    
    if not isinstance(jobz,_hipsolverEigMode_t__Base):
        raise TypeError("argument 'jobz' must be of type '_hipsolverEigMode_t__Base'")                    
    if not isinstance(range,_hipsolverEigRange_t__Base):
        raise TypeError("argument 'range' must be of type '_hipsolverEigRange_t__Base'")                    
    if not isinstance(uplo,_hipblasFillMode_t__Base):
        raise TypeError("argument 'uplo' must be of type '_hipblasFillMode_t__Base'")
    _hipsolverDnZhegvdx__retval = hipsolverStatus_t(chipsolver.hipsolverDnZhegvdx(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,itype.value,jobz.value,range.value,uplo.value,n,
        double2.fromPyobj(A).getElementPtr(),lda,
        double2.fromPyobj(B).getElementPtr(),ldb,vl,vu,il,iu,
        <int *>hip._util.types.ListOfInt.fromPyobj(nev)._ptr,
        <double *>hip._util.types.Pointer.fromPyobj(W)._ptr,
        double2.fromPyobj(work).getElementPtr(),lwork,
        <int *>hip._util.types.ListOfInt.fromPyobj(devInfo)._ptr))
    return (_hipsolverDnZhegvdx__retval,)


@cython.embedsignature(True)
def hipsolverDnSsygvj_bufferSize(object handle, object itype, object jobz, object uplo, int n, object A, int lda, object B, int ldb, object W, object lwork, object params):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        itype (`~.hipsolverEigType_t`):
            (undocumented)

        jobz (`~.hipsolverEigMode_t`):
            (undocumented)

        uplo (`~.hipblasFillMode_t`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        A (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        B (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        ldb (`~.int`):
            (undocumented)

        W (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lwork (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)

        params (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)
    """
    if not isinstance(itype,_hipsolverEigType_t__Base):
        raise TypeError("argument 'itype' must be of type '_hipsolverEigType_t__Base'")                    
    if not isinstance(jobz,_hipsolverEigMode_t__Base):
        raise TypeError("argument 'jobz' must be of type '_hipsolverEigMode_t__Base'")                    
    if not isinstance(uplo,_hipblasFillMode_t__Base):
        raise TypeError("argument 'uplo' must be of type '_hipblasFillMode_t__Base'")
    _hipsolverDnSsygvj_bufferSize__retval = hipsolverStatus_t(chipsolver.hipsolverDnSsygvj_bufferSize(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,itype.value,jobz.value,uplo.value,n,
        <const float *>hip._util.types.Pointer.fromPyobj(A)._ptr,lda,
        <const float *>hip._util.types.Pointer.fromPyobj(B)._ptr,ldb,
        <const float *>hip._util.types.Pointer.fromPyobj(W)._ptr,
        <int *>hip._util.types.ListOfInt.fromPyobj(lwork)._ptr,
        <void *>hip._util.types.Pointer.fromPyobj(params)._ptr))
    return (_hipsolverDnSsygvj_bufferSize__retval,)


@cython.embedsignature(True)
def hipsolverDnDsygvj_bufferSize(object handle, object itype, object jobz, object uplo, int n, object A, int lda, object B, int ldb, object W, object lwork, object params):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        itype (`~.hipsolverEigType_t`):
            (undocumented)

        jobz (`~.hipsolverEigMode_t`):
            (undocumented)

        uplo (`~.hipblasFillMode_t`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        A (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        B (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        ldb (`~.int`):
            (undocumented)

        W (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lwork (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)

        params (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)
    """
    if not isinstance(itype,_hipsolverEigType_t__Base):
        raise TypeError("argument 'itype' must be of type '_hipsolverEigType_t__Base'")                    
    if not isinstance(jobz,_hipsolverEigMode_t__Base):
        raise TypeError("argument 'jobz' must be of type '_hipsolverEigMode_t__Base'")                    
    if not isinstance(uplo,_hipblasFillMode_t__Base):
        raise TypeError("argument 'uplo' must be of type '_hipblasFillMode_t__Base'")
    _hipsolverDnDsygvj_bufferSize__retval = hipsolverStatus_t(chipsolver.hipsolverDnDsygvj_bufferSize(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,itype.value,jobz.value,uplo.value,n,
        <const double *>hip._util.types.Pointer.fromPyobj(A)._ptr,lda,
        <const double *>hip._util.types.Pointer.fromPyobj(B)._ptr,ldb,
        <const double *>hip._util.types.Pointer.fromPyobj(W)._ptr,
        <int *>hip._util.types.ListOfInt.fromPyobj(lwork)._ptr,
        <void *>hip._util.types.Pointer.fromPyobj(params)._ptr))
    return (_hipsolverDnDsygvj_bufferSize__retval,)


@cython.embedsignature(True)
def hipsolverDnChegvj_bufferSize(object handle, object itype, object jobz, object uplo, int n, object A, int lda, object B, int ldb, object W, object lwork, object params):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        itype (`~.hipsolverEigType_t`):
            (undocumented)

        jobz (`~.hipsolverEigMode_t`):
            (undocumented)

        uplo (`~.hipblasFillMode_t`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        A (`~.float2`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        B (`~.float2`/`~.object`):
            (undocumented)

        ldb (`~.int`):
            (undocumented)

        W (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lwork (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)

        params (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)
    """
    if not isinstance(itype,_hipsolverEigType_t__Base):
        raise TypeError("argument 'itype' must be of type '_hipsolverEigType_t__Base'")                    
    if not isinstance(jobz,_hipsolverEigMode_t__Base):
        raise TypeError("argument 'jobz' must be of type '_hipsolverEigMode_t__Base'")                    
    if not isinstance(uplo,_hipblasFillMode_t__Base):
        raise TypeError("argument 'uplo' must be of type '_hipblasFillMode_t__Base'")
    _hipsolverDnChegvj_bufferSize__retval = hipsolverStatus_t(chipsolver.hipsolverDnChegvj_bufferSize(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,itype.value,jobz.value,uplo.value,n,
        float2.fromPyobj(A).getElementPtr(),lda,
        float2.fromPyobj(B).getElementPtr(),ldb,
        <const float *>hip._util.types.Pointer.fromPyobj(W)._ptr,
        <int *>hip._util.types.ListOfInt.fromPyobj(lwork)._ptr,
        <void *>hip._util.types.Pointer.fromPyobj(params)._ptr))
    return (_hipsolverDnChegvj_bufferSize__retval,)


@cython.embedsignature(True)
def hipsolverDnZhegvj_bufferSize(object handle, object itype, object jobz, object uplo, int n, object A, int lda, object B, int ldb, object W, object lwork, object params):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        itype (`~.hipsolverEigType_t`):
            (undocumented)

        jobz (`~.hipsolverEigMode_t`):
            (undocumented)

        uplo (`~.hipblasFillMode_t`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        A (`~.double2`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        B (`~.double2`/`~.object`):
            (undocumented)

        ldb (`~.int`):
            (undocumented)

        W (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lwork (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)

        params (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)
    """
    if not isinstance(itype,_hipsolverEigType_t__Base):
        raise TypeError("argument 'itype' must be of type '_hipsolverEigType_t__Base'")                    
    if not isinstance(jobz,_hipsolverEigMode_t__Base):
        raise TypeError("argument 'jobz' must be of type '_hipsolverEigMode_t__Base'")                    
    if not isinstance(uplo,_hipblasFillMode_t__Base):
        raise TypeError("argument 'uplo' must be of type '_hipblasFillMode_t__Base'")
    _hipsolverDnZhegvj_bufferSize__retval = hipsolverStatus_t(chipsolver.hipsolverDnZhegvj_bufferSize(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,itype.value,jobz.value,uplo.value,n,
        double2.fromPyobj(A).getElementPtr(),lda,
        double2.fromPyobj(B).getElementPtr(),ldb,
        <const double *>hip._util.types.Pointer.fromPyobj(W)._ptr,
        <int *>hip._util.types.ListOfInt.fromPyobj(lwork)._ptr,
        <void *>hip._util.types.Pointer.fromPyobj(params)._ptr))
    return (_hipsolverDnZhegvj_bufferSize__retval,)


@cython.embedsignature(True)
def hipsolverDnSsygvj(object handle, object itype, object jobz, object uplo, int n, object A, int lda, object B, int ldb, object W, object work, int lwork, object devInfo, object params):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        itype (`~.hipsolverEigType_t`):
            (undocumented)

        jobz (`~.hipsolverEigMode_t`):
            (undocumented)

        uplo (`~.hipblasFillMode_t`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        A (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        B (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        ldb (`~.int`):
            (undocumented)

        W (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        work (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lwork (`~.int`):
            (undocumented)

        devInfo (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)

        params (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)
    """
    if not isinstance(itype,_hipsolverEigType_t__Base):
        raise TypeError("argument 'itype' must be of type '_hipsolverEigType_t__Base'")                    
    if not isinstance(jobz,_hipsolverEigMode_t__Base):
        raise TypeError("argument 'jobz' must be of type '_hipsolverEigMode_t__Base'")                    
    if not isinstance(uplo,_hipblasFillMode_t__Base):
        raise TypeError("argument 'uplo' must be of type '_hipblasFillMode_t__Base'")
    _hipsolverDnSsygvj__retval = hipsolverStatus_t(chipsolver.hipsolverDnSsygvj(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,itype.value,jobz.value,uplo.value,n,
        <float *>hip._util.types.Pointer.fromPyobj(A)._ptr,lda,
        <float *>hip._util.types.Pointer.fromPyobj(B)._ptr,ldb,
        <float *>hip._util.types.Pointer.fromPyobj(W)._ptr,
        <float *>hip._util.types.Pointer.fromPyobj(work)._ptr,lwork,
        <int *>hip._util.types.ListOfInt.fromPyobj(devInfo)._ptr,
        <void *>hip._util.types.Pointer.fromPyobj(params)._ptr))
    return (_hipsolverDnSsygvj__retval,)


@cython.embedsignature(True)
def hipsolverDnDsygvj(object handle, object itype, object jobz, object uplo, int n, object A, int lda, object B, int ldb, object W, object work, int lwork, object devInfo, object params):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        itype (`~.hipsolverEigType_t`):
            (undocumented)

        jobz (`~.hipsolverEigMode_t`):
            (undocumented)

        uplo (`~.hipblasFillMode_t`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        A (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        B (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        ldb (`~.int`):
            (undocumented)

        W (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        work (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lwork (`~.int`):
            (undocumented)

        devInfo (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)

        params (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)
    """
    if not isinstance(itype,_hipsolverEigType_t__Base):
        raise TypeError("argument 'itype' must be of type '_hipsolverEigType_t__Base'")                    
    if not isinstance(jobz,_hipsolverEigMode_t__Base):
        raise TypeError("argument 'jobz' must be of type '_hipsolverEigMode_t__Base'")                    
    if not isinstance(uplo,_hipblasFillMode_t__Base):
        raise TypeError("argument 'uplo' must be of type '_hipblasFillMode_t__Base'")
    _hipsolverDnDsygvj__retval = hipsolverStatus_t(chipsolver.hipsolverDnDsygvj(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,itype.value,jobz.value,uplo.value,n,
        <double *>hip._util.types.Pointer.fromPyobj(A)._ptr,lda,
        <double *>hip._util.types.Pointer.fromPyobj(B)._ptr,ldb,
        <double *>hip._util.types.Pointer.fromPyobj(W)._ptr,
        <double *>hip._util.types.Pointer.fromPyobj(work)._ptr,lwork,
        <int *>hip._util.types.ListOfInt.fromPyobj(devInfo)._ptr,
        <void *>hip._util.types.Pointer.fromPyobj(params)._ptr))
    return (_hipsolverDnDsygvj__retval,)


@cython.embedsignature(True)
def hipsolverDnChegvj(object handle, object itype, object jobz, object uplo, int n, object A, int lda, object B, int ldb, object W, object work, int lwork, object devInfo, object params):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        itype (`~.hipsolverEigType_t`):
            (undocumented)

        jobz (`~.hipsolverEigMode_t`):
            (undocumented)

        uplo (`~.hipblasFillMode_t`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        A (`~.float2`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        B (`~.float2`/`~.object`):
            (undocumented)

        ldb (`~.int`):
            (undocumented)

        W (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        work (`~.float2`/`~.object`):
            (undocumented)

        lwork (`~.int`):
            (undocumented)

        devInfo (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)

        params (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)
    """
    if not isinstance(itype,_hipsolverEigType_t__Base):
        raise TypeError("argument 'itype' must be of type '_hipsolverEigType_t__Base'")                    
    if not isinstance(jobz,_hipsolverEigMode_t__Base):
        raise TypeError("argument 'jobz' must be of type '_hipsolverEigMode_t__Base'")                    
    if not isinstance(uplo,_hipblasFillMode_t__Base):
        raise TypeError("argument 'uplo' must be of type '_hipblasFillMode_t__Base'")
    _hipsolverDnChegvj__retval = hipsolverStatus_t(chipsolver.hipsolverDnChegvj(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,itype.value,jobz.value,uplo.value,n,
        float2.fromPyobj(A).getElementPtr(),lda,
        float2.fromPyobj(B).getElementPtr(),ldb,
        <float *>hip._util.types.Pointer.fromPyobj(W)._ptr,
        float2.fromPyobj(work).getElementPtr(),lwork,
        <int *>hip._util.types.ListOfInt.fromPyobj(devInfo)._ptr,
        <void *>hip._util.types.Pointer.fromPyobj(params)._ptr))
    return (_hipsolverDnChegvj__retval,)


@cython.embedsignature(True)
def hipsolverDnZhegvj(object handle, object itype, object jobz, object uplo, int n, object A, int lda, object B, int ldb, object W, object work, int lwork, object devInfo, object params):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        itype (`~.hipsolverEigType_t`):
            (undocumented)

        jobz (`~.hipsolverEigMode_t`):
            (undocumented)

        uplo (`~.hipblasFillMode_t`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        A (`~.double2`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        B (`~.double2`/`~.object`):
            (undocumented)

        ldb (`~.int`):
            (undocumented)

        W (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        work (`~.double2`/`~.object`):
            (undocumented)

        lwork (`~.int`):
            (undocumented)

        devInfo (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)

        params (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)
    """
    if not isinstance(itype,_hipsolverEigType_t__Base):
        raise TypeError("argument 'itype' must be of type '_hipsolverEigType_t__Base'")                    
    if not isinstance(jobz,_hipsolverEigMode_t__Base):
        raise TypeError("argument 'jobz' must be of type '_hipsolverEigMode_t__Base'")                    
    if not isinstance(uplo,_hipblasFillMode_t__Base):
        raise TypeError("argument 'uplo' must be of type '_hipblasFillMode_t__Base'")
    _hipsolverDnZhegvj__retval = hipsolverStatus_t(chipsolver.hipsolverDnZhegvj(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,itype.value,jobz.value,uplo.value,n,
        double2.fromPyobj(A).getElementPtr(),lda,
        double2.fromPyobj(B).getElementPtr(),ldb,
        <double *>hip._util.types.Pointer.fromPyobj(W)._ptr,
        double2.fromPyobj(work).getElementPtr(),lwork,
        <int *>hip._util.types.ListOfInt.fromPyobj(devInfo)._ptr,
        <void *>hip._util.types.Pointer.fromPyobj(params)._ptr))
    return (_hipsolverDnZhegvj__retval,)


@cython.embedsignature(True)
def hipsolverDnSsytrd_bufferSize(object handle, object uplo, int n, object A, int lda, object D, object E, object tau, object lwork):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        uplo (`~.hipblasFillMode_t`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        A (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        D (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        E (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        tau (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lwork (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)
    """
    if not isinstance(uplo,_hipblasFillMode_t__Base):
        raise TypeError("argument 'uplo' must be of type '_hipblasFillMode_t__Base'")
    _hipsolverDnSsytrd_bufferSize__retval = hipsolverStatus_t(chipsolver.hipsolverDnSsytrd_bufferSize(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,uplo.value,n,
        <const float *>hip._util.types.Pointer.fromPyobj(A)._ptr,lda,
        <const float *>hip._util.types.Pointer.fromPyobj(D)._ptr,
        <const float *>hip._util.types.Pointer.fromPyobj(E)._ptr,
        <const float *>hip._util.types.Pointer.fromPyobj(tau)._ptr,
        <int *>hip._util.types.ListOfInt.fromPyobj(lwork)._ptr))
    return (_hipsolverDnSsytrd_bufferSize__retval,)


@cython.embedsignature(True)
def hipsolverDnDsytrd_bufferSize(object handle, object uplo, int n, object A, int lda, object D, object E, object tau, object lwork):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        uplo (`~.hipblasFillMode_t`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        A (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        D (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        E (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        tau (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lwork (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)
    """
    if not isinstance(uplo,_hipblasFillMode_t__Base):
        raise TypeError("argument 'uplo' must be of type '_hipblasFillMode_t__Base'")
    _hipsolverDnDsytrd_bufferSize__retval = hipsolverStatus_t(chipsolver.hipsolverDnDsytrd_bufferSize(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,uplo.value,n,
        <const double *>hip._util.types.Pointer.fromPyobj(A)._ptr,lda,
        <const double *>hip._util.types.Pointer.fromPyobj(D)._ptr,
        <const double *>hip._util.types.Pointer.fromPyobj(E)._ptr,
        <const double *>hip._util.types.Pointer.fromPyobj(tau)._ptr,
        <int *>hip._util.types.ListOfInt.fromPyobj(lwork)._ptr))
    return (_hipsolverDnDsytrd_bufferSize__retval,)


@cython.embedsignature(True)
def hipsolverDnChetrd_bufferSize(object handle, object uplo, int n, object A, int lda, object D, object E, object tau, object lwork):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        uplo (`~.hipblasFillMode_t`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        A (`~.float2`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        D (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        E (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        tau (`~.float2`/`~.object`):
            (undocumented)

        lwork (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)
    """
    if not isinstance(uplo,_hipblasFillMode_t__Base):
        raise TypeError("argument 'uplo' must be of type '_hipblasFillMode_t__Base'")
    _hipsolverDnChetrd_bufferSize__retval = hipsolverStatus_t(chipsolver.hipsolverDnChetrd_bufferSize(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,uplo.value,n,
        float2.fromPyobj(A).getElementPtr(),lda,
        <const float *>hip._util.types.Pointer.fromPyobj(D)._ptr,
        <const float *>hip._util.types.Pointer.fromPyobj(E)._ptr,
        float2.fromPyobj(tau).getElementPtr(),
        <int *>hip._util.types.ListOfInt.fromPyobj(lwork)._ptr))
    return (_hipsolverDnChetrd_bufferSize__retval,)


@cython.embedsignature(True)
def hipsolverDnZhetrd_bufferSize(object handle, object uplo, int n, object A, int lda, object D, object E, object tau, object lwork):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        uplo (`~.hipblasFillMode_t`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        A (`~.double2`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        D (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        E (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        tau (`~.double2`/`~.object`):
            (undocumented)

        lwork (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)
    """
    if not isinstance(uplo,_hipblasFillMode_t__Base):
        raise TypeError("argument 'uplo' must be of type '_hipblasFillMode_t__Base'")
    _hipsolverDnZhetrd_bufferSize__retval = hipsolverStatus_t(chipsolver.hipsolverDnZhetrd_bufferSize(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,uplo.value,n,
        double2.fromPyobj(A).getElementPtr(),lda,
        <const double *>hip._util.types.Pointer.fromPyobj(D)._ptr,
        <const double *>hip._util.types.Pointer.fromPyobj(E)._ptr,
        double2.fromPyobj(tau).getElementPtr(),
        <int *>hip._util.types.ListOfInt.fromPyobj(lwork)._ptr))
    return (_hipsolverDnZhetrd_bufferSize__retval,)


@cython.embedsignature(True)
def hipsolverDnSsytrd(object handle, object uplo, int n, object A, int lda, object D, object E, object tau, object work, int lwork, object devInfo):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        uplo (`~.hipblasFillMode_t`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        A (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        D (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        E (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        tau (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        work (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lwork (`~.int`):
            (undocumented)

        devInfo (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)
    """
    if not isinstance(uplo,_hipblasFillMode_t__Base):
        raise TypeError("argument 'uplo' must be of type '_hipblasFillMode_t__Base'")
    _hipsolverDnSsytrd__retval = hipsolverStatus_t(chipsolver.hipsolverDnSsytrd(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,uplo.value,n,
        <float *>hip._util.types.Pointer.fromPyobj(A)._ptr,lda,
        <float *>hip._util.types.Pointer.fromPyobj(D)._ptr,
        <float *>hip._util.types.Pointer.fromPyobj(E)._ptr,
        <float *>hip._util.types.Pointer.fromPyobj(tau)._ptr,
        <float *>hip._util.types.Pointer.fromPyobj(work)._ptr,lwork,
        <int *>hip._util.types.ListOfInt.fromPyobj(devInfo)._ptr))
    return (_hipsolverDnSsytrd__retval,)


@cython.embedsignature(True)
def hipsolverDnDsytrd(object handle, object uplo, int n, object A, int lda, object D, object E, object tau, object work, int lwork, object devInfo):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        uplo (`~.hipblasFillMode_t`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        A (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        D (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        E (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        tau (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        work (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lwork (`~.int`):
            (undocumented)

        devInfo (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)
    """
    if not isinstance(uplo,_hipblasFillMode_t__Base):
        raise TypeError("argument 'uplo' must be of type '_hipblasFillMode_t__Base'")
    _hipsolverDnDsytrd__retval = hipsolverStatus_t(chipsolver.hipsolverDnDsytrd(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,uplo.value,n,
        <double *>hip._util.types.Pointer.fromPyobj(A)._ptr,lda,
        <double *>hip._util.types.Pointer.fromPyobj(D)._ptr,
        <double *>hip._util.types.Pointer.fromPyobj(E)._ptr,
        <double *>hip._util.types.Pointer.fromPyobj(tau)._ptr,
        <double *>hip._util.types.Pointer.fromPyobj(work)._ptr,lwork,
        <int *>hip._util.types.ListOfInt.fromPyobj(devInfo)._ptr))
    return (_hipsolverDnDsytrd__retval,)


@cython.embedsignature(True)
def hipsolverDnChetrd(object handle, object uplo, int n, object A, int lda, object D, object E, object tau, object work, int lwork, object devInfo):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        uplo (`~.hipblasFillMode_t`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        A (`~.float2`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        D (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        E (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        tau (`~.float2`/`~.object`):
            (undocumented)

        work (`~.float2`/`~.object`):
            (undocumented)

        lwork (`~.int`):
            (undocumented)

        devInfo (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)
    """
    if not isinstance(uplo,_hipblasFillMode_t__Base):
        raise TypeError("argument 'uplo' must be of type '_hipblasFillMode_t__Base'")
    _hipsolverDnChetrd__retval = hipsolverStatus_t(chipsolver.hipsolverDnChetrd(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,uplo.value,n,
        float2.fromPyobj(A).getElementPtr(),lda,
        <float *>hip._util.types.Pointer.fromPyobj(D)._ptr,
        <float *>hip._util.types.Pointer.fromPyobj(E)._ptr,
        float2.fromPyobj(tau).getElementPtr(),
        float2.fromPyobj(work).getElementPtr(),lwork,
        <int *>hip._util.types.ListOfInt.fromPyobj(devInfo)._ptr))
    return (_hipsolverDnChetrd__retval,)


@cython.embedsignature(True)
def hipsolverDnZhetrd(object handle, object uplo, int n, object A, int lda, object D, object E, object tau, object work, int lwork, object devInfo):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        uplo (`~.hipblasFillMode_t`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        A (`~.double2`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        D (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        E (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        tau (`~.double2`/`~.object`):
            (undocumented)

        work (`~.double2`/`~.object`):
            (undocumented)

        lwork (`~.int`):
            (undocumented)

        devInfo (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)
    """
    if not isinstance(uplo,_hipblasFillMode_t__Base):
        raise TypeError("argument 'uplo' must be of type '_hipblasFillMode_t__Base'")
    _hipsolverDnZhetrd__retval = hipsolverStatus_t(chipsolver.hipsolverDnZhetrd(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,uplo.value,n,
        double2.fromPyobj(A).getElementPtr(),lda,
        <double *>hip._util.types.Pointer.fromPyobj(D)._ptr,
        <double *>hip._util.types.Pointer.fromPyobj(E)._ptr,
        double2.fromPyobj(tau).getElementPtr(),
        double2.fromPyobj(work).getElementPtr(),lwork,
        <int *>hip._util.types.ListOfInt.fromPyobj(devInfo)._ptr))
    return (_hipsolverDnZhetrd__retval,)


@cython.embedsignature(True)
def hipsolverDnSsytrf_bufferSize(object handle, int n, object A, int lda, object lwork):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        A (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        lwork (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)
    """
    _hipsolverDnSsytrf_bufferSize__retval = hipsolverStatus_t(chipsolver.hipsolverDnSsytrf_bufferSize(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,n,
        <float *>hip._util.types.Pointer.fromPyobj(A)._ptr,lda,
        <int *>hip._util.types.ListOfInt.fromPyobj(lwork)._ptr))
    return (_hipsolverDnSsytrf_bufferSize__retval,)


@cython.embedsignature(True)
def hipsolverDnDsytrf_bufferSize(object handle, int n, object A, int lda, object lwork):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        A (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        lwork (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)
    """
    _hipsolverDnDsytrf_bufferSize__retval = hipsolverStatus_t(chipsolver.hipsolverDnDsytrf_bufferSize(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,n,
        <double *>hip._util.types.Pointer.fromPyobj(A)._ptr,lda,
        <int *>hip._util.types.ListOfInt.fromPyobj(lwork)._ptr))
    return (_hipsolverDnDsytrf_bufferSize__retval,)


@cython.embedsignature(True)
def hipsolverDnCsytrf_bufferSize(object handle, int n, object A, int lda, object lwork):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        A (`~.float2`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        lwork (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)
    """
    _hipsolverDnCsytrf_bufferSize__retval = hipsolverStatus_t(chipsolver.hipsolverDnCsytrf_bufferSize(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,n,
        float2.fromPyobj(A).getElementPtr(),lda,
        <int *>hip._util.types.ListOfInt.fromPyobj(lwork)._ptr))
    return (_hipsolverDnCsytrf_bufferSize__retval,)


@cython.embedsignature(True)
def hipsolverDnZsytrf_bufferSize(object handle, int n, object A, int lda, object lwork):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        A (`~.double2`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        lwork (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)
    """
    _hipsolverDnZsytrf_bufferSize__retval = hipsolverStatus_t(chipsolver.hipsolverDnZsytrf_bufferSize(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,n,
        double2.fromPyobj(A).getElementPtr(),lda,
        <int *>hip._util.types.ListOfInt.fromPyobj(lwork)._ptr))
    return (_hipsolverDnZsytrf_bufferSize__retval,)


@cython.embedsignature(True)
def hipsolverDnSsytrf(object handle, object uplo, int n, object A, int lda, object ipiv, object work, int lwork, object devInfo):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        uplo (`~.hipblasFillMode_t`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        A (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        ipiv (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)

        work (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lwork (`~.int`):
            (undocumented)

        devInfo (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)
    """
    if not isinstance(uplo,_hipblasFillMode_t__Base):
        raise TypeError("argument 'uplo' must be of type '_hipblasFillMode_t__Base'")
    _hipsolverDnSsytrf__retval = hipsolverStatus_t(chipsolver.hipsolverDnSsytrf(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,uplo.value,n,
        <float *>hip._util.types.Pointer.fromPyobj(A)._ptr,lda,
        <int *>hip._util.types.ListOfInt.fromPyobj(ipiv)._ptr,
        <float *>hip._util.types.Pointer.fromPyobj(work)._ptr,lwork,
        <int *>hip._util.types.ListOfInt.fromPyobj(devInfo)._ptr))
    return (_hipsolverDnSsytrf__retval,)


@cython.embedsignature(True)
def hipsolverDnDsytrf(object handle, object uplo, int n, object A, int lda, object ipiv, object work, int lwork, object devInfo):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        uplo (`~.hipblasFillMode_t`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        A (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        ipiv (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)

        work (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        lwork (`~.int`):
            (undocumented)

        devInfo (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)
    """
    if not isinstance(uplo,_hipblasFillMode_t__Base):
        raise TypeError("argument 'uplo' must be of type '_hipblasFillMode_t__Base'")
    _hipsolverDnDsytrf__retval = hipsolverStatus_t(chipsolver.hipsolverDnDsytrf(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,uplo.value,n,
        <double *>hip._util.types.Pointer.fromPyobj(A)._ptr,lda,
        <int *>hip._util.types.ListOfInt.fromPyobj(ipiv)._ptr,
        <double *>hip._util.types.Pointer.fromPyobj(work)._ptr,lwork,
        <int *>hip._util.types.ListOfInt.fromPyobj(devInfo)._ptr))
    return (_hipsolverDnDsytrf__retval,)


@cython.embedsignature(True)
def hipsolverDnCsytrf(object handle, object uplo, int n, object A, int lda, object ipiv, object work, int lwork, object devInfo):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        uplo (`~.hipblasFillMode_t`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        A (`~.float2`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        ipiv (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)

        work (`~.float2`/`~.object`):
            (undocumented)

        lwork (`~.int`):
            (undocumented)

        devInfo (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)
    """
    if not isinstance(uplo,_hipblasFillMode_t__Base):
        raise TypeError("argument 'uplo' must be of type '_hipblasFillMode_t__Base'")
    _hipsolverDnCsytrf__retval = hipsolverStatus_t(chipsolver.hipsolverDnCsytrf(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,uplo.value,n,
        float2.fromPyobj(A).getElementPtr(),lda,
        <int *>hip._util.types.ListOfInt.fromPyobj(ipiv)._ptr,
        float2.fromPyobj(work).getElementPtr(),lwork,
        <int *>hip._util.types.ListOfInt.fromPyobj(devInfo)._ptr))
    return (_hipsolverDnCsytrf__retval,)


@cython.embedsignature(True)
def hipsolverDnZsytrf(object handle, object uplo, int n, object A, int lda, object ipiv, object work, int lwork, object devInfo):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        uplo (`~.hipblasFillMode_t`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        A (`~.double2`/`~.object`):
            (undocumented)

        lda (`~.int`):
            (undocumented)

        ipiv (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)

        work (`~.double2`/`~.object`):
            (undocumented)

        lwork (`~.int`):
            (undocumented)

        devInfo (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)
    """
    if not isinstance(uplo,_hipblasFillMode_t__Base):
        raise TypeError("argument 'uplo' must be of type '_hipblasFillMode_t__Base'")
    _hipsolverDnZsytrf__retval = hipsolverStatus_t(chipsolver.hipsolverDnZsytrf(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,uplo.value,n,
        double2.fromPyobj(A).getElementPtr(),lda,
        <int *>hip._util.types.ListOfInt.fromPyobj(ipiv)._ptr,
        double2.fromPyobj(work).getElementPtr(),lwork,
        <int *>hip._util.types.ListOfInt.fromPyobj(devInfo)._ptr))
    return (_hipsolverDnZsytrf__retval,)


class _hipsolverRfFactorization_t__Base(enum.IntEnum):
    """Empty enum base class that allows subclassing.
    """
    pass
class hipsolverRfFactorization_t(_hipsolverRfFactorization_t__Base):
    """hipsolverRfFactorization_t

    Attributes:
        HIPSOLVERRF_FACTORIZATION_ALG0:
            (undocumented)
        HIPSOLVERRF_FACTORIZATION_ALG1:
            (undocumented)
        HIPSOLVERRF_FACTORIZATION_ALG2:
            (undocumented)
    """
    HIPSOLVERRF_FACTORIZATION_ALG0 = chipsolver.HIPSOLVERRF_FACTORIZATION_ALG0
    HIPSOLVERRF_FACTORIZATION_ALG1 = chipsolver.HIPSOLVERRF_FACTORIZATION_ALG1
    HIPSOLVERRF_FACTORIZATION_ALG2 = chipsolver.HIPSOLVERRF_FACTORIZATION_ALG2
    @staticmethod
    def ctypes_type():
        """The type of the enum constants as ctypes type."""
        return ctypes.c_uint


class _hipsolverRfMatrixFormat_t__Base(enum.IntEnum):
    """Empty enum base class that allows subclassing.
    """
    pass
class hipsolverRfMatrixFormat_t(_hipsolverRfMatrixFormat_t__Base):
    """hipsolverRfMatrixFormat_t

    Attributes:
        HIPSOLVERRF_MATRIX_FORMAT_CSR:
            (undocumented)
        HIPSOLVERRF_MATRIX_FORMAT_CSC:
            (undocumented)
    """
    HIPSOLVERRF_MATRIX_FORMAT_CSR = chipsolver.HIPSOLVERRF_MATRIX_FORMAT_CSR
    HIPSOLVERRF_MATRIX_FORMAT_CSC = chipsolver.HIPSOLVERRF_MATRIX_FORMAT_CSC
    @staticmethod
    def ctypes_type():
        """The type of the enum constants as ctypes type."""
        return ctypes.c_uint


class _hipsolverRfNumericBoostReport_t__Base(enum.IntEnum):
    """Empty enum base class that allows subclassing.
    """
    pass
class hipsolverRfNumericBoostReport_t(_hipsolverRfNumericBoostReport_t__Base):
    """hipsolverRfNumericBoostReport_t

    Attributes:
        HIPSOLVERRF_NUMERIC_BOOST_NOT_USED:
            (undocumented)
        HIPSOLVERRF_NUMERIC_BOOST_USED:
            (undocumented)
    """
    HIPSOLVERRF_NUMERIC_BOOST_NOT_USED = chipsolver.HIPSOLVERRF_NUMERIC_BOOST_NOT_USED
    HIPSOLVERRF_NUMERIC_BOOST_USED = chipsolver.HIPSOLVERRF_NUMERIC_BOOST_USED
    @staticmethod
    def ctypes_type():
        """The type of the enum constants as ctypes type."""
        return ctypes.c_uint


class _hipsolverRfResetValuesFastMode_t__Base(enum.IntEnum):
    """Empty enum base class that allows subclassing.
    """
    pass
class hipsolverRfResetValuesFastMode_t(_hipsolverRfResetValuesFastMode_t__Base):
    """hipsolverRfResetValuesFastMode_t

    Attributes:
        HIPSOLVERRF_RESET_VALUES_FAST_MODE_OFF:
            (undocumented)
        HIPSOLVERRF_RESET_VALUES_FAST_MODE_ON:
            (undocumented)
    """
    HIPSOLVERRF_RESET_VALUES_FAST_MODE_OFF = chipsolver.HIPSOLVERRF_RESET_VALUES_FAST_MODE_OFF
    HIPSOLVERRF_RESET_VALUES_FAST_MODE_ON = chipsolver.HIPSOLVERRF_RESET_VALUES_FAST_MODE_ON
    @staticmethod
    def ctypes_type():
        """The type of the enum constants as ctypes type."""
        return ctypes.c_uint


class _hipsolverRfTriangularSolve_t__Base(enum.IntEnum):
    """Empty enum base class that allows subclassing.
    """
    pass
class hipsolverRfTriangularSolve_t(_hipsolverRfTriangularSolve_t__Base):
    """hipsolverRfTriangularSolve_t

    Attributes:
        HIPSOLVERRF_TRIANGULAR_SOLVE_ALG1:
            (undocumented)
        HIPSOLVERRF_TRIANGULAR_SOLVE_ALG2:
            (undocumented)
        HIPSOLVERRF_TRIANGULAR_SOLVE_ALG3:
            (undocumented)
    """
    HIPSOLVERRF_TRIANGULAR_SOLVE_ALG1 = chipsolver.HIPSOLVERRF_TRIANGULAR_SOLVE_ALG1
    HIPSOLVERRF_TRIANGULAR_SOLVE_ALG2 = chipsolver.HIPSOLVERRF_TRIANGULAR_SOLVE_ALG2
    HIPSOLVERRF_TRIANGULAR_SOLVE_ALG3 = chipsolver.HIPSOLVERRF_TRIANGULAR_SOLVE_ALG3
    @staticmethod
    def ctypes_type():
        """The type of the enum constants as ctypes type."""
        return ctypes.c_uint


class _hipsolverRfUnitDiagonal_t__Base(enum.IntEnum):
    """Empty enum base class that allows subclassing.
    """
    pass
class hipsolverRfUnitDiagonal_t(_hipsolverRfUnitDiagonal_t__Base):
    """hipsolverRfUnitDiagonal_t

    Attributes:
        HIPSOLVERRF_UNIT_DIAGONAL_STORED_L:
            (undocumented)
        HIPSOLVERRF_UNIT_DIAGONAL_STORED_U:
            (undocumented)
        HIPSOLVERRF_UNIT_DIAGONAL_ASSUMED_L:
            (undocumented)
        HIPSOLVERRF_UNIT_DIAGONAL_ASSUMED_U:
            (undocumented)
    """
    HIPSOLVERRF_UNIT_DIAGONAL_STORED_L = chipsolver.HIPSOLVERRF_UNIT_DIAGONAL_STORED_L
    HIPSOLVERRF_UNIT_DIAGONAL_STORED_U = chipsolver.HIPSOLVERRF_UNIT_DIAGONAL_STORED_U
    HIPSOLVERRF_UNIT_DIAGONAL_ASSUMED_L = chipsolver.HIPSOLVERRF_UNIT_DIAGONAL_ASSUMED_L
    HIPSOLVERRF_UNIT_DIAGONAL_ASSUMED_U = chipsolver.HIPSOLVERRF_UNIT_DIAGONAL_ASSUMED_U
    @staticmethod
    def ctypes_type():
        """The type of the enum constants as ctypes type."""
        return ctypes.c_uint


@cython.embedsignature(True)
def hipsolverRfCreate():
    r"""(No short description, might be part of a group.)

    Returns:
        A `~.tuple` of size 1 that contains (in that order):

        * handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)
    """
    handle = hip._util.types.Pointer.fromPtr(NULL)
    _hipsolverRfCreate__retval = hipsolverStatus_t(chipsolver.hipsolverRfCreate(
        <void **>&handle._ptr))
    return (_hipsolverRfCreate__retval,None if handle._ptr == NULL else handle)


@cython.embedsignature(True)
def hipsolverRfDestroy(object handle):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)
    """
    _hipsolverRfDestroy__retval = hipsolverStatus_t(chipsolver.hipsolverRfDestroy(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr))
    return (_hipsolverRfDestroy__retval,)


@cython.embedsignature(True)
def hipsolverRfSetupDevice(int n, int nnzA, object csrRowPtrA, object csrColIndA, object csrValA, int nnzL, object csrRowPtrL, object csrColIndL, object csrValL, int nnzU, object csrRowPtrU, object csrColIndU, object csrValU, object P, object Q, object handle):
    r"""(No short description, might be part of a group.)

    Args:
        n (`~.int`):
            (undocumented)

        nnzA (`~.int`):
            (undocumented)

        csrRowPtrA (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)

        csrColIndA (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)

        csrValA (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        nnzL (`~.int`):
            (undocumented)

        csrRowPtrL (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)

        csrColIndL (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)

        csrValL (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        nnzU (`~.int`):
            (undocumented)

        csrRowPtrU (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)

        csrColIndU (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)

        csrValU (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        P (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)

        Q (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)

        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)
    """
    _hipsolverRfSetupDevice__retval = hipsolverStatus_t(chipsolver.hipsolverRfSetupDevice(n,nnzA,
        <int *>hip._util.types.ListOfInt.fromPyobj(csrRowPtrA)._ptr,
        <int *>hip._util.types.ListOfInt.fromPyobj(csrColIndA)._ptr,
        <double *>hip._util.types.Pointer.fromPyobj(csrValA)._ptr,nnzL,
        <int *>hip._util.types.ListOfInt.fromPyobj(csrRowPtrL)._ptr,
        <int *>hip._util.types.ListOfInt.fromPyobj(csrColIndL)._ptr,
        <double *>hip._util.types.Pointer.fromPyobj(csrValL)._ptr,nnzU,
        <int *>hip._util.types.ListOfInt.fromPyobj(csrRowPtrU)._ptr,
        <int *>hip._util.types.ListOfInt.fromPyobj(csrColIndU)._ptr,
        <double *>hip._util.types.Pointer.fromPyobj(csrValU)._ptr,
        <int *>hip._util.types.ListOfInt.fromPyobj(P)._ptr,
        <int *>hip._util.types.ListOfInt.fromPyobj(Q)._ptr,
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr))
    return (_hipsolverRfSetupDevice__retval,)


@cython.embedsignature(True)
def hipsolverRfSetupHost(int n, int nnzA, object h_csrRowPtrA, object h_csrColIndA, object h_csrValA, int nnzL, object h_csrRowPtrL, object h_csrColIndL, object h_csrValL, int nnzU, object h_csrRowPtrU, object h_csrColIndU, object h_csrValU, object h_P, object h_Q, object handle):
    r"""(No short description, might be part of a group.)

    Args:
        n (`~.int`):
            (undocumented)

        nnzA (`~.int`):
            (undocumented)

        h_csrRowPtrA (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)

        h_csrColIndA (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)

        h_csrValA (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        nnzL (`~.int`):
            (undocumented)

        h_csrRowPtrL (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)

        h_csrColIndL (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)

        h_csrValL (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        nnzU (`~.int`):
            (undocumented)

        h_csrRowPtrU (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)

        h_csrColIndU (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)

        h_csrValU (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        h_P (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)

        h_Q (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)

        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)
    """
    _hipsolverRfSetupHost__retval = hipsolverStatus_t(chipsolver.hipsolverRfSetupHost(n,nnzA,
        <int *>hip._util.types.ListOfInt.fromPyobj(h_csrRowPtrA)._ptr,
        <int *>hip._util.types.ListOfInt.fromPyobj(h_csrColIndA)._ptr,
        <double *>hip._util.types.Pointer.fromPyobj(h_csrValA)._ptr,nnzL,
        <int *>hip._util.types.ListOfInt.fromPyobj(h_csrRowPtrL)._ptr,
        <int *>hip._util.types.ListOfInt.fromPyobj(h_csrColIndL)._ptr,
        <double *>hip._util.types.Pointer.fromPyobj(h_csrValL)._ptr,nnzU,
        <int *>hip._util.types.ListOfInt.fromPyobj(h_csrRowPtrU)._ptr,
        <int *>hip._util.types.ListOfInt.fromPyobj(h_csrColIndU)._ptr,
        <double *>hip._util.types.Pointer.fromPyobj(h_csrValU)._ptr,
        <int *>hip._util.types.ListOfInt.fromPyobj(h_P)._ptr,
        <int *>hip._util.types.ListOfInt.fromPyobj(h_Q)._ptr,
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr))
    return (_hipsolverRfSetupHost__retval,)


@cython.embedsignature(True)
def hipsolverRfAccessBundledFactorsDevice(object handle, object nnzM, object Mp, object Mi, object Mx):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        nnzM (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)

        Mp (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)

        Mi (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)

        Mx (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)
    """
    _hipsolverRfAccessBundledFactorsDevice__retval = hipsolverStatus_t(chipsolver.hipsolverRfAccessBundledFactorsDevice(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,
        <int *>hip._util.types.ListOfInt.fromPyobj(nnzM)._ptr,
        <int **>hip._util.types.ListOfInt.fromPyobj(Mp)._ptr,
        <int **>hip._util.types.ListOfInt.fromPyobj(Mi)._ptr,
        <double **>hip._util.types.Pointer.fromPyobj(Mx)._ptr))
    return (_hipsolverRfAccessBundledFactorsDevice__retval,)


@cython.embedsignature(True)
def hipsolverRfAnalyze(object handle):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)
    """
    _hipsolverRfAnalyze__retval = hipsolverStatus_t(chipsolver.hipsolverRfAnalyze(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr))
    return (_hipsolverRfAnalyze__retval,)


@cython.embedsignature(True)
def hipsolverRfExtractBundledFactorsHost(object handle, object h_nnzM, object h_Mp, object h_Mi, object h_Mx):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        h_nnzM (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)

        h_Mp (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)

        h_Mi (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)

        h_Mx (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)
    """
    _hipsolverRfExtractBundledFactorsHost__retval = hipsolverStatus_t(chipsolver.hipsolverRfExtractBundledFactorsHost(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,
        <int *>hip._util.types.ListOfInt.fromPyobj(h_nnzM)._ptr,
        <int **>hip._util.types.ListOfInt.fromPyobj(h_Mp)._ptr,
        <int **>hip._util.types.ListOfInt.fromPyobj(h_Mi)._ptr,
        <double **>hip._util.types.Pointer.fromPyobj(h_Mx)._ptr))
    return (_hipsolverRfExtractBundledFactorsHost__retval,)


@cython.embedsignature(True)
def hipsolverRfExtractSplitFactorsHost(object handle, object h_nnzL, object h_Lp, object h_Li, object h_Lx, object h_nnzU, object h_Up, object h_Ui, object h_Ux):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        h_nnzL (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)

        h_Lp (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)

        h_Li (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)

        h_Lx (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        h_nnzU (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)

        h_Up (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)

        h_Ui (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)

        h_Ux (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)
    """
    _hipsolverRfExtractSplitFactorsHost__retval = hipsolverStatus_t(chipsolver.hipsolverRfExtractSplitFactorsHost(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,
        <int *>hip._util.types.ListOfInt.fromPyobj(h_nnzL)._ptr,
        <int **>hip._util.types.ListOfInt.fromPyobj(h_Lp)._ptr,
        <int **>hip._util.types.ListOfInt.fromPyobj(h_Li)._ptr,
        <double **>hip._util.types.Pointer.fromPyobj(h_Lx)._ptr,
        <int *>hip._util.types.ListOfInt.fromPyobj(h_nnzU)._ptr,
        <int **>hip._util.types.ListOfInt.fromPyobj(h_Up)._ptr,
        <int **>hip._util.types.ListOfInt.fromPyobj(h_Ui)._ptr,
        <double **>hip._util.types.Pointer.fromPyobj(h_Ux)._ptr))
    return (_hipsolverRfExtractSplitFactorsHost__retval,)


@cython.embedsignature(True)
def hipsolverRfGet_Algs(object handle, object fact_alg, object solve_alg):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        fact_alg (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        solve_alg (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)
    """
    _hipsolverRfGet_Algs__retval = hipsolverStatus_t(chipsolver.hipsolverRfGet_Algs(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,
        <chipsolver.hipsolverRfFactorization_t *>hip._util.types.Pointer.fromPyobj(fact_alg)._ptr,
        <chipsolver.hipsolverRfTriangularSolve_t *>hip._util.types.Pointer.fromPyobj(solve_alg)._ptr))
    return (_hipsolverRfGet_Algs__retval,)


@cython.embedsignature(True)
def hipsolverRfGetMatrixFormat(object handle, object format, object diag):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        format (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        diag (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)
    """
    _hipsolverRfGetMatrixFormat__retval = hipsolverStatus_t(chipsolver.hipsolverRfGetMatrixFormat(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,
        <chipsolver.hipsolverRfMatrixFormat_t *>hip._util.types.Pointer.fromPyobj(format)._ptr,
        <chipsolver.hipsolverRfUnitDiagonal_t *>hip._util.types.Pointer.fromPyobj(diag)._ptr))
    return (_hipsolverRfGetMatrixFormat__retval,)


@cython.embedsignature(True)
def hipsolverRfGetNumericBoostReport(object handle, object report):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        report (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)
    """
    _hipsolverRfGetNumericBoostReport__retval = hipsolverStatus_t(chipsolver.hipsolverRfGetNumericBoostReport(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,
        <chipsolver.hipsolverRfNumericBoostReport_t *>hip._util.types.Pointer.fromPyobj(report)._ptr))
    return (_hipsolverRfGetNumericBoostReport__retval,)


@cython.embedsignature(True)
def hipsolverRfGetNumericProperties(object handle, object zero, object boost):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        zero (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        boost (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)
    """
    _hipsolverRfGetNumericProperties__retval = hipsolverStatus_t(chipsolver.hipsolverRfGetNumericProperties(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,
        <double *>hip._util.types.Pointer.fromPyobj(zero)._ptr,
        <double *>hip._util.types.Pointer.fromPyobj(boost)._ptr))
    return (_hipsolverRfGetNumericProperties__retval,)


@cython.embedsignature(True)
def hipsolverRfGetResetValuesFastMode(object handle, object fastMode):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        fastMode (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)
    """
    _hipsolverRfGetResetValuesFastMode__retval = hipsolverStatus_t(chipsolver.hipsolverRfGetResetValuesFastMode(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,
        <chipsolver.hipsolverRfResetValuesFastMode_t *>hip._util.types.Pointer.fromPyobj(fastMode)._ptr))
    return (_hipsolverRfGetResetValuesFastMode__retval,)


@cython.embedsignature(True)
def hipsolverRfRefactor(object handle):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)
    """
    _hipsolverRfRefactor__retval = hipsolverStatus_t(chipsolver.hipsolverRfRefactor(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr))
    return (_hipsolverRfRefactor__retval,)


@cython.embedsignature(True)
def hipsolverRfResetValues(int n, int nnzA, object csrRowPtrA, object csrColIndA, object csrValA, object P, object Q, object handle):
    r"""(No short description, might be part of a group.)

    Args:
        n (`~.int`):
            (undocumented)

        nnzA (`~.int`):
            (undocumented)

        csrRowPtrA (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)

        csrColIndA (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)

        csrValA (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        P (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)

        Q (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)

        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)
    """
    _hipsolverRfResetValues__retval = hipsolverStatus_t(chipsolver.hipsolverRfResetValues(n,nnzA,
        <int *>hip._util.types.ListOfInt.fromPyobj(csrRowPtrA)._ptr,
        <int *>hip._util.types.ListOfInt.fromPyobj(csrColIndA)._ptr,
        <double *>hip._util.types.Pointer.fromPyobj(csrValA)._ptr,
        <int *>hip._util.types.ListOfInt.fromPyobj(P)._ptr,
        <int *>hip._util.types.ListOfInt.fromPyobj(Q)._ptr,
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr))
    return (_hipsolverRfResetValues__retval,)


@cython.embedsignature(True)
def hipsolverRfSetAlgs(object handle, object fact_alg, object solve_alg):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        fact_alg (`~.hipsolverRfFactorization_t`):
            (undocumented)

        solve_alg (`~.hipsolverRfTriangularSolve_t`):
            (undocumented)
    """
    if not isinstance(fact_alg,_hipsolverRfFactorization_t__Base):
        raise TypeError("argument 'fact_alg' must be of type '_hipsolverRfFactorization_t__Base'")                    
    if not isinstance(solve_alg,_hipsolverRfTriangularSolve_t__Base):
        raise TypeError("argument 'solve_alg' must be of type '_hipsolverRfTriangularSolve_t__Base'")
    _hipsolverRfSetAlgs__retval = hipsolverStatus_t(chipsolver.hipsolverRfSetAlgs(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,fact_alg.value,solve_alg.value))
    return (_hipsolverRfSetAlgs__retval,)


@cython.embedsignature(True)
def hipsolverRfSetMatrixFormat(object handle, object format, object diag):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        format (`~.hipsolverRfMatrixFormat_t`):
            (undocumented)

        diag (`~.hipsolverRfUnitDiagonal_t`):
            (undocumented)
    """
    if not isinstance(format,_hipsolverRfMatrixFormat_t__Base):
        raise TypeError("argument 'format' must be of type '_hipsolverRfMatrixFormat_t__Base'")                    
    if not isinstance(diag,_hipsolverRfUnitDiagonal_t__Base):
        raise TypeError("argument 'diag' must be of type '_hipsolverRfUnitDiagonal_t__Base'")
    _hipsolverRfSetMatrixFormat__retval = hipsolverStatus_t(chipsolver.hipsolverRfSetMatrixFormat(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,format.value,diag.value))
    return (_hipsolverRfSetMatrixFormat__retval,)


@cython.embedsignature(True)
def hipsolverRfSetNumericProperties(object handle, double effective_zero, double boost_val):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        effective_zero (`~.float`/`~.int`):
            (undocumented)

        boost_val (`~.float`/`~.int`):
            (undocumented)
    """
    _hipsolverRfSetNumericProperties__retval = hipsolverStatus_t(chipsolver.hipsolverRfSetNumericProperties(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,effective_zero,boost_val))
    return (_hipsolverRfSetNumericProperties__retval,)


@cython.embedsignature(True)
def hipsolverRfSetResetValuesFastMode(object handle, object fastMode):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        fastMode (`~.hipsolverRfResetValuesFastMode_t`):
            (undocumented)
    """
    if not isinstance(fastMode,_hipsolverRfResetValuesFastMode_t__Base):
        raise TypeError("argument 'fastMode' must be of type '_hipsolverRfResetValuesFastMode_t__Base'")
    _hipsolverRfSetResetValuesFastMode__retval = hipsolverStatus_t(chipsolver.hipsolverRfSetResetValuesFastMode(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,fastMode.value))
    return (_hipsolverRfSetResetValuesFastMode__retval,)


@cython.embedsignature(True)
def hipsolverRfSolve(object handle, object P, object Q, int nrhs, object Temp, int ldt, object XF, int ldxf):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        P (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)

        Q (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)

        nrhs (`~.int`):
            (undocumented)

        Temp (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        ldt (`~.int`):
            (undocumented)

        XF (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        ldxf (`~.int`):
            (undocumented)
    """
    _hipsolverRfSolve__retval = hipsolverStatus_t(chipsolver.hipsolverRfSolve(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,
        <int *>hip._util.types.ListOfInt.fromPyobj(P)._ptr,
        <int *>hip._util.types.ListOfInt.fromPyobj(Q)._ptr,nrhs,
        <double *>hip._util.types.Pointer.fromPyobj(Temp)._ptr,ldt,
        <double *>hip._util.types.Pointer.fromPyobj(XF)._ptr,ldxf))
    return (_hipsolverRfSolve__retval,)


@cython.embedsignature(True)
def hipsolverRfBatchSetupHost(int batchSize, int n, int nnzA, object h_csrRowPtrA, object h_csrColIndA, object h_csrValA_array, int nnzL, object h_csrRowPtrL, object h_csrColIndL, object h_csrValL, int nnzU, object h_csrRowPtrU, object h_csrColIndU, object h_csrValU, object h_P, object h_Q, object handle):
    r"""(No short description, might be part of a group.)

    Args:
        batchSize (`~.int`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        nnzA (`~.int`):
            (undocumented)

        h_csrRowPtrA (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)

        h_csrColIndA (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)

        h_csrValA_array (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        nnzL (`~.int`):
            (undocumented)

        h_csrRowPtrL (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)

        h_csrColIndL (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)

        h_csrValL (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        nnzU (`~.int`):
            (undocumented)

        h_csrRowPtrU (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)

        h_csrColIndU (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)

        h_csrValU (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        h_P (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)

        h_Q (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)

        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)
    """
    _hipsolverRfBatchSetupHost__retval = hipsolverStatus_t(chipsolver.hipsolverRfBatchSetupHost(batchSize,n,nnzA,
        <int *>hip._util.types.ListOfInt.fromPyobj(h_csrRowPtrA)._ptr,
        <int *>hip._util.types.ListOfInt.fromPyobj(h_csrColIndA)._ptr,
        <double **>hip._util.types.Pointer.fromPyobj(h_csrValA_array)._ptr,nnzL,
        <int *>hip._util.types.ListOfInt.fromPyobj(h_csrRowPtrL)._ptr,
        <int *>hip._util.types.ListOfInt.fromPyobj(h_csrColIndL)._ptr,
        <double *>hip._util.types.Pointer.fromPyobj(h_csrValL)._ptr,nnzU,
        <int *>hip._util.types.ListOfInt.fromPyobj(h_csrRowPtrU)._ptr,
        <int *>hip._util.types.ListOfInt.fromPyobj(h_csrColIndU)._ptr,
        <double *>hip._util.types.Pointer.fromPyobj(h_csrValU)._ptr,
        <int *>hip._util.types.ListOfInt.fromPyobj(h_P)._ptr,
        <int *>hip._util.types.ListOfInt.fromPyobj(h_Q)._ptr,
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr))
    return (_hipsolverRfBatchSetupHost__retval,)


@cython.embedsignature(True)
def hipsolverRfBatchAnalyze(object handle):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)
    """
    _hipsolverRfBatchAnalyze__retval = hipsolverStatus_t(chipsolver.hipsolverRfBatchAnalyze(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr))
    return (_hipsolverRfBatchAnalyze__retval,)


@cython.embedsignature(True)
def hipsolverRfBatchRefactor(object handle):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)
    """
    _hipsolverRfBatchRefactor__retval = hipsolverStatus_t(chipsolver.hipsolverRfBatchRefactor(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr))
    return (_hipsolverRfBatchRefactor__retval,)


@cython.embedsignature(True)
def hipsolverRfBatchResetValues(int batchSize, int n, int nnzA, object csrRowPtrA, object csrColIndA, object csrValA_array, object P, object Q, object handle):
    r"""(No short description, might be part of a group.)

    Args:
        batchSize (`~.int`):
            (undocumented)

        n (`~.int`):
            (undocumented)

        nnzA (`~.int`):
            (undocumented)

        csrRowPtrA (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)

        csrColIndA (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)

        csrValA_array (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        P (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)

        Q (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)

        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)
    """
    _hipsolverRfBatchResetValues__retval = hipsolverStatus_t(chipsolver.hipsolverRfBatchResetValues(batchSize,n,nnzA,
        <int *>hip._util.types.ListOfInt.fromPyobj(csrRowPtrA)._ptr,
        <int *>hip._util.types.ListOfInt.fromPyobj(csrColIndA)._ptr,
        <double **>hip._util.types.Pointer.fromPyobj(csrValA_array)._ptr,
        <int *>hip._util.types.ListOfInt.fromPyobj(P)._ptr,
        <int *>hip._util.types.ListOfInt.fromPyobj(Q)._ptr,
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr))
    return (_hipsolverRfBatchResetValues__retval,)


@cython.embedsignature(True)
def hipsolverRfBatchSolve(object handle, object P, object Q, int nrhs, object Temp, int ldt, object XF_array, int ldxf):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        P (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)

        Q (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)

        nrhs (`~.int`):
            (undocumented)

        Temp (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        ldt (`~.int`):
            (undocumented)

        XF_array (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        ldxf (`~.int`):
            (undocumented)
    """
    _hipsolverRfBatchSolve__retval = hipsolverStatus_t(chipsolver.hipsolverRfBatchSolve(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,
        <int *>hip._util.types.ListOfInt.fromPyobj(P)._ptr,
        <int *>hip._util.types.ListOfInt.fromPyobj(Q)._ptr,nrhs,
        <double *>hip._util.types.Pointer.fromPyobj(Temp)._ptr,ldt,
        <double **>hip._util.types.Pointer.fromPyobj(XF_array)._ptr,ldxf))
    return (_hipsolverRfBatchSolve__retval,)


@cython.embedsignature(True)
def hipsolverRfBatchZeroPivot(object handle, object position):
    r"""(No short description, might be part of a group.)

    Args:
        handle (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        position (`~.hip._util.types.ListOfInt`/`~.object`):
            (undocumented)
    """
    _hipsolverRfBatchZeroPivot__retval = hipsolverStatus_t(chipsolver.hipsolverRfBatchZeroPivot(
        <void *>hip._util.types.Pointer.fromPyobj(handle)._ptr,
        <int *>hip._util.types.ListOfInt.fromPyobj(position)._ptr))
    return (_hipsolverRfBatchZeroPivot__retval,)

__all__ = [
    "hipsolverVersionMajor",
    "hipsolverVersionMinor",
    "hipsolverVersionPatch",
    "_hipsolverStatus_t__Base",
    "hipsolverStatus_t",
    "_hipsolverEigMode_t__Base",
    "hipsolverEigMode_t",
    "_hipsolverEigType_t__Base",
    "hipsolverEigType_t",
    "hipsolverCreate",
    "hipsolverDestroy",
    "hipsolverSetStream",
    "hipsolverGetStream",
    "hipsolverCreateGesvdjInfo",
    "hipsolverDestroyGesvdjInfo",
    "hipsolverXgesvdjSetMaxSweeps",
    "hipsolverXgesvdjSetSortEig",
    "hipsolverXgesvdjSetTolerance",
    "hipsolverXgesvdjGetResidual",
    "hipsolverXgesvdjGetSweeps",
    "hipsolverCreateSyevjInfo",
    "hipsolverDestroySyevjInfo",
    "hipsolverXsyevjSetMaxSweeps",
    "hipsolverXsyevjSetSortEig",
    "hipsolverXsyevjSetTolerance",
    "hipsolverXsyevjGetResidual",
    "hipsolverXsyevjGetSweeps",
    "hipsolverSorgbr_bufferSize",
    "hipsolverDorgbr_bufferSize",
    "hipsolverCungbr_bufferSize",
    "hipsolverZungbr_bufferSize",
    "hipsolverSorgbr",
    "hipsolverDorgbr",
    "hipsolverCungbr",
    "hipsolverZungbr",
    "hipsolverSorgqr_bufferSize",
    "hipsolverDorgqr_bufferSize",
    "hipsolverCungqr_bufferSize",
    "hipsolverZungqr_bufferSize",
    "hipsolverSorgqr",
    "hipsolverDorgqr",
    "hipsolverCungqr",
    "hipsolverZungqr",
    "hipsolverSorgtr_bufferSize",
    "hipsolverDorgtr_bufferSize",
    "hipsolverCungtr_bufferSize",
    "hipsolverZungtr_bufferSize",
    "hipsolverSorgtr",
    "hipsolverDorgtr",
    "hipsolverCungtr",
    "hipsolverZungtr",
    "hipsolverSormqr_bufferSize",
    "hipsolverDormqr_bufferSize",
    "hipsolverCunmqr_bufferSize",
    "hipsolverZunmqr_bufferSize",
    "hipsolverSormqr",
    "hipsolverDormqr",
    "hipsolverCunmqr",
    "hipsolverZunmqr",
    "hipsolverSormtr_bufferSize",
    "hipsolverDormtr_bufferSize",
    "hipsolverCunmtr_bufferSize",
    "hipsolverZunmtr_bufferSize",
    "hipsolverSormtr",
    "hipsolverDormtr",
    "hipsolverCunmtr",
    "hipsolverZunmtr",
    "hipsolverSgebrd_bufferSize",
    "hipsolverDgebrd_bufferSize",
    "hipsolverCgebrd_bufferSize",
    "hipsolverZgebrd_bufferSize",
    "hipsolverSgebrd",
    "hipsolverDgebrd",
    "hipsolverCgebrd",
    "hipsolverZgebrd",
    "hipsolverSSgels_bufferSize",
    "hipsolverDDgels_bufferSize",
    "hipsolverCCgels_bufferSize",
    "hipsolverZZgels_bufferSize",
    "hipsolverSSgels",
    "hipsolverDDgels",
    "hipsolverCCgels",
    "hipsolverZZgels",
    "hipsolverSgeqrf_bufferSize",
    "hipsolverDgeqrf_bufferSize",
    "hipsolverCgeqrf_bufferSize",
    "hipsolverZgeqrf_bufferSize",
    "hipsolverSgeqrf",
    "hipsolverDgeqrf",
    "hipsolverCgeqrf",
    "hipsolverZgeqrf",
    "hipsolverSSgesv_bufferSize",
    "hipsolverDDgesv_bufferSize",
    "hipsolverCCgesv_bufferSize",
    "hipsolverZZgesv_bufferSize",
    "hipsolverSSgesv",
    "hipsolverDDgesv",
    "hipsolverCCgesv",
    "hipsolverZZgesv",
    "hipsolverSgesvd_bufferSize",
    "hipsolverDgesvd_bufferSize",
    "hipsolverCgesvd_bufferSize",
    "hipsolverZgesvd_bufferSize",
    "hipsolverSgesvd",
    "hipsolverDgesvd",
    "hipsolverCgesvd",
    "hipsolverZgesvd",
    "hipsolverSgesvdj_bufferSize",
    "hipsolverDgesvdj_bufferSize",
    "hipsolverCgesvdj_bufferSize",
    "hipsolverZgesvdj_bufferSize",
    "hipsolverSgesvdj",
    "hipsolverDgesvdj",
    "hipsolverCgesvdj",
    "hipsolverZgesvdj",
    "hipsolverSgesvdjBatched_bufferSize",
    "hipsolverDgesvdjBatched_bufferSize",
    "hipsolverCgesvdjBatched_bufferSize",
    "hipsolverZgesvdjBatched_bufferSize",
    "hipsolverSgesvdjBatched",
    "hipsolverDgesvdjBatched",
    "hipsolverCgesvdjBatched",
    "hipsolverZgesvdjBatched",
    "hipsolverSgetrf_bufferSize",
    "hipsolverDgetrf_bufferSize",
    "hipsolverCgetrf_bufferSize",
    "hipsolverZgetrf_bufferSize",
    "hipsolverSgetrf",
    "hipsolverDgetrf",
    "hipsolverCgetrf",
    "hipsolverZgetrf",
    "hipsolverSgetrs_bufferSize",
    "hipsolverDgetrs_bufferSize",
    "hipsolverCgetrs_bufferSize",
    "hipsolverZgetrs_bufferSize",
    "hipsolverSgetrs",
    "hipsolverDgetrs",
    "hipsolverCgetrs",
    "hipsolverZgetrs",
    "hipsolverSpotrf_bufferSize",
    "hipsolverDpotrf_bufferSize",
    "hipsolverCpotrf_bufferSize",
    "hipsolverZpotrf_bufferSize",
    "hipsolverSpotrf",
    "hipsolverDpotrf",
    "hipsolverCpotrf",
    "hipsolverZpotrf",
    "hipsolverSpotrfBatched_bufferSize",
    "hipsolverDpotrfBatched_bufferSize",
    "hipsolverCpotrfBatched_bufferSize",
    "hipsolverZpotrfBatched_bufferSize",
    "hipsolverSpotrfBatched",
    "hipsolverDpotrfBatched",
    "hipsolverCpotrfBatched",
    "hipsolverZpotrfBatched",
    "hipsolverSpotri_bufferSize",
    "hipsolverDpotri_bufferSize",
    "hipsolverCpotri_bufferSize",
    "hipsolverZpotri_bufferSize",
    "hipsolverSpotri",
    "hipsolverDpotri",
    "hipsolverCpotri",
    "hipsolverZpotri",
    "hipsolverSpotrs_bufferSize",
    "hipsolverDpotrs_bufferSize",
    "hipsolverCpotrs_bufferSize",
    "hipsolverZpotrs_bufferSize",
    "hipsolverSpotrs",
    "hipsolverDpotrs",
    "hipsolverCpotrs",
    "hipsolverZpotrs",
    "hipsolverSpotrsBatched_bufferSize",
    "hipsolverDpotrsBatched_bufferSize",
    "hipsolverCpotrsBatched_bufferSize",
    "hipsolverZpotrsBatched_bufferSize",
    "hipsolverSpotrsBatched",
    "hipsolverDpotrsBatched",
    "hipsolverCpotrsBatched",
    "hipsolverZpotrsBatched",
    "hipsolverSsyevd_bufferSize",
    "hipsolverDsyevd_bufferSize",
    "hipsolverCheevd_bufferSize",
    "hipsolverZheevd_bufferSize",
    "hipsolverSsyevd",
    "hipsolverDsyevd",
    "hipsolverCheevd",
    "hipsolverZheevd",
    "hipsolverSsyevj_bufferSize",
    "hipsolverDsyevj_bufferSize",
    "hipsolverCheevj_bufferSize",
    "hipsolverZheevj_bufferSize",
    "hipsolverSsyevj",
    "hipsolverDsyevj",
    "hipsolverCheevj",
    "hipsolverZheevj",
    "hipsolverSsyevjBatched_bufferSize",
    "hipsolverDsyevjBatched_bufferSize",
    "hipsolverCheevjBatched_bufferSize",
    "hipsolverZheevjBatched_bufferSize",
    "hipsolverSsyevjBatched",
    "hipsolverDsyevjBatched",
    "hipsolverCheevjBatched",
    "hipsolverZheevjBatched",
    "hipsolverSsygvd_bufferSize",
    "hipsolverDsygvd_bufferSize",
    "hipsolverChegvd_bufferSize",
    "hipsolverZhegvd_bufferSize",
    "hipsolverSsygvd",
    "hipsolverDsygvd",
    "hipsolverChegvd",
    "hipsolverZhegvd",
    "hipsolverSsygvj_bufferSize",
    "hipsolverDsygvj_bufferSize",
    "hipsolverChegvj_bufferSize",
    "hipsolverZhegvj_bufferSize",
    "hipsolverSsygvj",
    "hipsolverDsygvj",
    "hipsolverChegvj",
    "hipsolverZhegvj",
    "hipsolverSsytrd_bufferSize",
    "hipsolverDsytrd_bufferSize",
    "hipsolverChetrd_bufferSize",
    "hipsolverZhetrd_bufferSize",
    "hipsolverSsytrd",
    "hipsolverDsytrd",
    "hipsolverChetrd",
    "hipsolverZhetrd",
    "hipsolverSsytrf_bufferSize",
    "hipsolverDsytrf_bufferSize",
    "hipsolverCsytrf_bufferSize",
    "hipsolverZsytrf_bufferSize",
    "hipsolverSsytrf",
    "hipsolverDsytrf",
    "hipsolverCsytrf",
    "hipsolverZsytrf",
    "_hipsolverEigRange_t__Base",
    "hipsolverEigRange_t",
    "hipsolverDnCreate",
    "hipsolverDnDestroy",
    "hipsolverDnSetStream",
    "hipsolverDnGetStream",
    "hipsolverDnCreateGesvdjInfo",
    "hipsolverDnDestroyGesvdjInfo",
    "hipsolverDnXgesvdjSetMaxSweeps",
    "hipsolverDnXgesvdjSetSortEig",
    "hipsolverDnXgesvdjSetTolerance",
    "hipsolverDnXgesvdjGetResidual",
    "hipsolverDnXgesvdjGetSweeps",
    "hipsolverDnCreateSyevjInfo",
    "hipsolverDnDestroySyevjInfo",
    "hipsolverDnXsyevjSetMaxSweeps",
    "hipsolverDnXsyevjSetSortEig",
    "hipsolverDnXsyevjSetTolerance",
    "hipsolverDnXsyevjGetResidual",
    "hipsolverDnXsyevjGetSweeps",
    "hipsolverDnSorgbr_bufferSize",
    "hipsolverDnDorgbr_bufferSize",
    "hipsolverDnCungbr_bufferSize",
    "hipsolverDnZungbr_bufferSize",
    "hipsolverDnSorgbr",
    "hipsolverDnDorgbr",
    "hipsolverDnCungbr",
    "hipsolverDnZungbr",
    "hipsolverDnSorgqr_bufferSize",
    "hipsolverDnDorgqr_bufferSize",
    "hipsolverDnCungqr_bufferSize",
    "hipsolverDnZungqr_bufferSize",
    "hipsolverDnSorgqr",
    "hipsolverDnDorgqr",
    "hipsolverDnCungqr",
    "hipsolverDnZungqr",
    "hipsolverDnSorgtr_bufferSize",
    "hipsolverDnDorgtr_bufferSize",
    "hipsolverDnCungtr_bufferSize",
    "hipsolverDnZungtr_bufferSize",
    "hipsolverDnSorgtr",
    "hipsolverDnDorgtr",
    "hipsolverDnCungtr",
    "hipsolverDnZungtr",
    "hipsolverDnSormqr_bufferSize",
    "hipsolverDnDormqr_bufferSize",
    "hipsolverDnCunmqr_bufferSize",
    "hipsolverDnZunmqr_bufferSize",
    "hipsolverDnSormqr",
    "hipsolverDnDormqr",
    "hipsolverDnCunmqr",
    "hipsolverDnZunmqr",
    "hipsolverDnSormtr_bufferSize",
    "hipsolverDnDormtr_bufferSize",
    "hipsolverDnCunmtr_bufferSize",
    "hipsolverDnZunmtr_bufferSize",
    "hipsolverDnSormtr",
    "hipsolverDnDormtr",
    "hipsolverDnCunmtr",
    "hipsolverDnZunmtr",
    "hipsolverDnSgebrd_bufferSize",
    "hipsolverDnDgebrd_bufferSize",
    "hipsolverDnCgebrd_bufferSize",
    "hipsolverDnZgebrd_bufferSize",
    "hipsolverDnSgebrd",
    "hipsolverDnDgebrd",
    "hipsolverDnCgebrd",
    "hipsolverDnZgebrd",
    "hipsolverDnSSgels_bufferSize",
    "hipsolverDnDDgels_bufferSize",
    "hipsolverDnCCgels_bufferSize",
    "hipsolverDnZZgels_bufferSize",
    "hipsolverDnSSgels",
    "hipsolverDnDDgels",
    "hipsolverDnCCgels",
    "hipsolverDnZZgels",
    "hipsolverDnSgeqrf_bufferSize",
    "hipsolverDnDgeqrf_bufferSize",
    "hipsolverDnCgeqrf_bufferSize",
    "hipsolverDnZgeqrf_bufferSize",
    "hipsolverDnSgeqrf",
    "hipsolverDnDgeqrf",
    "hipsolverDnCgeqrf",
    "hipsolverDnZgeqrf",
    "hipsolverDnSSgesv_bufferSize",
    "hipsolverDnDDgesv_bufferSize",
    "hipsolverDnCCgesv_bufferSize",
    "hipsolverDnZZgesv_bufferSize",
    "hipsolverDnSSgesv",
    "hipsolverDnDDgesv",
    "hipsolverDnCCgesv",
    "hipsolverDnZZgesv",
    "hipsolverDnSgesvd_bufferSize",
    "hipsolverDnDgesvd_bufferSize",
    "hipsolverDnCgesvd_bufferSize",
    "hipsolverDnZgesvd_bufferSize",
    "hipsolverDnSgesvd",
    "hipsolverDnDgesvd",
    "hipsolverDnCgesvd",
    "hipsolverDnZgesvd",
    "hipsolverDnSgesvdj_bufferSize",
    "hipsolverDnDgesvdj_bufferSize",
    "hipsolverDnCgesvdj_bufferSize",
    "hipsolverDnZgesvdj_bufferSize",
    "hipsolverDnSgesvdj",
    "hipsolverDnDgesvdj",
    "hipsolverDnCgesvdj",
    "hipsolverDnZgesvdj",
    "hipsolverDnSgesvdjBatched_bufferSize",
    "hipsolverDnDgesvdjBatched_bufferSize",
    "hipsolverDnCgesvdjBatched_bufferSize",
    "hipsolverDnZgesvdjBatched_bufferSize",
    "hipsolverDnSgesvdjBatched",
    "hipsolverDnDgesvdjBatched",
    "hipsolverDnCgesvdjBatched",
    "hipsolverDnZgesvdjBatched",
    "hipsolverDnSgesvdaStridedBatched_bufferSize",
    "hipsolverDnDgesvdaStridedBatched_bufferSize",
    "hipsolverDnCgesvdaStridedBatched_bufferSize",
    "hipsolverDnZgesvdaStridedBatched_bufferSize",
    "hipsolverDnSgesvdaStridedBatched",
    "hipsolverDnDgesvdaStridedBatched",
    "hipsolverDnCgesvdaStridedBatched",
    "hipsolverDnZgesvdaStridedBatched",
    "hipsolverDnSgetrf_bufferSize",
    "hipsolverDnDgetrf_bufferSize",
    "hipsolverDnCgetrf_bufferSize",
    "hipsolverDnZgetrf_bufferSize",
    "hipsolverDnSgetrf",
    "hipsolverDnDgetrf",
    "hipsolverDnCgetrf",
    "hipsolverDnZgetrf",
    "hipsolverDnSgetrs",
    "hipsolverDnDgetrs",
    "hipsolverDnCgetrs",
    "hipsolverDnZgetrs",
    "hipsolverDnSpotrf_bufferSize",
    "hipsolverDnDpotrf_bufferSize",
    "hipsolverDnCpotrf_bufferSize",
    "hipsolverDnZpotrf_bufferSize",
    "hipsolverDnSpotrf",
    "hipsolverDnDpotrf",
    "hipsolverDnCpotrf",
    "hipsolverDnZpotrf",
    "hipsolverDnSpotrfBatched",
    "hipsolverDnDpotrfBatched",
    "hipsolverDnCpotrfBatched",
    "hipsolverDnZpotrfBatched",
    "hipsolverDnSpotri_bufferSize",
    "hipsolverDnDpotri_bufferSize",
    "hipsolverDnCpotri_bufferSize",
    "hipsolverDnZpotri_bufferSize",
    "hipsolverDnSpotri",
    "hipsolverDnDpotri",
    "hipsolverDnCpotri",
    "hipsolverDnZpotri",
    "hipsolverDnSpotrs",
    "hipsolverDnDpotrs",
    "hipsolverDnCpotrs",
    "hipsolverDnZpotrs",
    "hipsolverDnSpotrsBatched",
    "hipsolverDnDpotrsBatched",
    "hipsolverDnCpotrsBatched",
    "hipsolverDnZpotrsBatched",
    "hipsolverDnSsyevd_bufferSize",
    "hipsolverDnDsyevd_bufferSize",
    "hipsolverDnCheevd_bufferSize",
    "hipsolverDnZheevd_bufferSize",
    "hipsolverDnSsyevd",
    "hipsolverDnDsyevd",
    "hipsolverDnCheevd",
    "hipsolverDnZheevd",
    "hipsolverDnSsyevdx_bufferSize",
    "hipsolverDnDsyevdx_bufferSize",
    "hipsolverDnCheevdx_bufferSize",
    "hipsolverDnZheevdx_bufferSize",
    "hipsolverDnSsyevdx",
    "hipsolverDnDsyevdx",
    "hipsolverDnCheevdx",
    "hipsolverDnZheevdx",
    "hipsolverDnSsyevj_bufferSize",
    "hipsolverDnDsyevj_bufferSize",
    "hipsolverDnCheevj_bufferSize",
    "hipsolverDnZheevj_bufferSize",
    "hipsolverDnSsyevj",
    "hipsolverDnDsyevj",
    "hipsolverDnCheevj",
    "hipsolverDnZheevj",
    "hipsolverDnSsyevjBatched_bufferSize",
    "hipsolverDnDsyevjBatched_bufferSize",
    "hipsolverDnCheevjBatched_bufferSize",
    "hipsolverDnZheevjBatched_bufferSize",
    "hipsolverDnSsyevjBatched",
    "hipsolverDnDsyevjBatched",
    "hipsolverDnCheevjBatched",
    "hipsolverDnZheevjBatched",
    "hipsolverDnSsygvd_bufferSize",
    "hipsolverDnDsygvd_bufferSize",
    "hipsolverDnChegvd_bufferSize",
    "hipsolverDnZhegvd_bufferSize",
    "hipsolverDnSsygvd",
    "hipsolverDnDsygvd",
    "hipsolverDnChegvd",
    "hipsolverDnZhegvd",
    "hipsolverDnSsygvdx_bufferSize",
    "hipsolverDnDsygvdx_bufferSize",
    "hipsolverDnChegvdx_bufferSize",
    "hipsolverDnZhegvdx_bufferSize",
    "hipsolverDnSsygvdx",
    "hipsolverDnDsygvdx",
    "hipsolverDnChegvdx",
    "hipsolverDnZhegvdx",
    "hipsolverDnSsygvj_bufferSize",
    "hipsolverDnDsygvj_bufferSize",
    "hipsolverDnChegvj_bufferSize",
    "hipsolverDnZhegvj_bufferSize",
    "hipsolverDnSsygvj",
    "hipsolverDnDsygvj",
    "hipsolverDnChegvj",
    "hipsolverDnZhegvj",
    "hipsolverDnSsytrd_bufferSize",
    "hipsolverDnDsytrd_bufferSize",
    "hipsolverDnChetrd_bufferSize",
    "hipsolverDnZhetrd_bufferSize",
    "hipsolverDnSsytrd",
    "hipsolverDnDsytrd",
    "hipsolverDnChetrd",
    "hipsolverDnZhetrd",
    "hipsolverDnSsytrf_bufferSize",
    "hipsolverDnDsytrf_bufferSize",
    "hipsolverDnCsytrf_bufferSize",
    "hipsolverDnZsytrf_bufferSize",
    "hipsolverDnSsytrf",
    "hipsolverDnDsytrf",
    "hipsolverDnCsytrf",
    "hipsolverDnZsytrf",
    "_hipsolverRfFactorization_t__Base",
    "hipsolverRfFactorization_t",
    "_hipsolverRfMatrixFormat_t__Base",
    "hipsolverRfMatrixFormat_t",
    "_hipsolverRfNumericBoostReport_t__Base",
    "hipsolverRfNumericBoostReport_t",
    "_hipsolverRfResetValuesFastMode_t__Base",
    "hipsolverRfResetValuesFastMode_t",
    "_hipsolverRfTriangularSolve_t__Base",
    "hipsolverRfTriangularSolve_t",
    "_hipsolverRfUnitDiagonal_t__Base",
    "hipsolverRfUnitDiagonal_t",
    "hipsolverRfCreate",
    "hipsolverRfDestroy",
    "hipsolverRfSetupDevice",
    "hipsolverRfSetupHost",
    "hipsolverRfAccessBundledFactorsDevice",
    "hipsolverRfAnalyze",
    "hipsolverRfExtractBundledFactorsHost",
    "hipsolverRfExtractSplitFactorsHost",
    "hipsolverRfGet_Algs",
    "hipsolverRfGetMatrixFormat",
    "hipsolverRfGetNumericBoostReport",
    "hipsolverRfGetNumericProperties",
    "hipsolverRfGetResetValuesFastMode",
    "hipsolverRfRefactor",
    "hipsolverRfResetValues",
    "hipsolverRfSetAlgs",
    "hipsolverRfSetMatrixFormat",
    "hipsolverRfSetNumericProperties",
    "hipsolverRfSetResetValuesFastMode",
    "hipsolverRfSolve",
    "hipsolverRfBatchSetupHost",
    "hipsolverRfBatchAnalyze",
    "hipsolverRfBatchRefactor",
    "hipsolverRfBatchResetValues",
    "hipsolverRfBatchSolve",
    "hipsolverRfBatchZeroPivot",
]