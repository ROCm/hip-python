# MIT License
#
# Copyright (c) 2023-2024 Advanced Micro Devices, Inc.
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

# This file has been autogenerated, do not modify.


"""
(No short description)

Attributes:
    ROCTX_VERSION_MAJOR (`~.int`):
        Macro constant.

    ROCTX_VERSION_MINOR (`~.int`):
        Macro constant.

"""

import cython
import ctypes
import enum
ROCTX_VERSION_MAJOR = croctx.ROCTX_VERSION_MAJOR

ROCTX_VERSION_MINOR = croctx.ROCTX_VERSION_MINOR

@cython.embedsignature(True)
def roctx_version_major():
    r"""(No short description, might be part of a group.)

    Query the major version of the installed library.

    Return the major version of the installed library. This can be used to check
    if it is compatible with this interface version.

    Returns:
        A `~.tuple` of size 1 that contains (in that order):

        * `~.int`: Returns the major version number.
    """
    cdef unsigned int _roctx_version_major__retval = croctx.roctx_version_major()
    return (_roctx_version_major__retval,)


@cython.embedsignature(True)
def roctx_version_minor():
    r"""(No short description, might be part of a group.)

    Query the minor version of the installed library.

    Return the minor version of the installed library. This can be used to check
    if it is compatible with this interface version.

    Returns:
        A `~.tuple` of size 1 that contains (in that order):

        * `~.int`: Returns the minor version number.
    """
    cdef unsigned int _roctx_version_minor__retval = croctx.roctx_version_minor()
    return (_roctx_version_minor__retval,)


@cython.embedsignature(True)
def roctxMarkA(object message):
    r"""(No short description, might be part of a group.)

    Mark an event.

    Args:
        message (`~.hip._util.types.CStr`/`~.object`) -- *IN*:
            The message associated with the event.
    """
    croctx.roctxMarkA(
        <const char *>hip._util.types.CStr.fromPyobj(message)._ptr)


@cython.embedsignature(True)
def roctxRangePushA(object message):
    r"""(No short description, might be part of a group.)

    Start a new nested range.

    Nested ranges are stacked and local to the current CPU thread.

    Args:
        message (`~.hip._util.types.CStr`/`~.object`) -- *IN*:
            The message associated with this range.

    Returns:
        A `~.tuple` of size 1 that contains (in that order):

        * `~.int`: Returns the level this nested range is started at. Nested range
            levels are 0 based.
    """
    cdef int _roctxRangePushA__retval = croctx.roctxRangePushA(
        <const char *>hip._util.types.CStr.fromPyobj(message)._ptr)
    return (_roctxRangePushA__retval,)


@cython.embedsignature(True)
def roctxRangePop():
    r"""(No short description, might be part of a group.)

    Stop the current nested range.

    Stop the current nested range, and pop it from the stack. If a nested range
    was active before the last one was started, it becomes again the current
    nested range.

    Returns:
        A `~.tuple` of size 1 that contains (in that order):

        * `~.int`: Returns the level the stopped nested range was started at, or a
            negative value if there was no nested range active.
    """
    cdef int _roctxRangePop__retval = croctx.roctxRangePop()
    return (_roctxRangePop__retval,)


@cython.embedsignature(True)
def roctxRangeStartA(object message):
    r"""(No short description, might be part of a group.)

    Starts a process range.

    Start/stop ranges can be started and stopped in different threads. Each
    timespan is assigned a unique range ID.

    Args:
        message (`~.hip._util.types.CStr`/`~.object`) -- *IN*:
            The message associated with this range.

    Returns:
        A `~.tuple` of size 1 that contains (in that order):

        * `~.int`: Returns the ID of the new range.
    """
    cdef unsigned long _roctxRangeStartA__retval = croctx.roctxRangeStartA(
        <const char *>hip._util.types.CStr.fromPyobj(message)._ptr)
    return (_roctxRangeStartA__retval,)


@cython.embedsignature(True)
def roctxRangeStop(unsigned long id):
    r"""(No short description, might be part of a group.)

    Stop a process range.

    Args:
        id (`~.int`):
            (undocumented)
    """
    croctx.roctxRangeStop(id)

__all__ = [
    "ROCTX_VERSION_MAJOR",
    "ROCTX_VERSION_MINOR",
    "roctx_version_major",
    "roctx_version_minor",
    "roctxMarkA",
    "roctxRangePushA",
    "roctxRangePop",
    "roctxRangeStartA",
    "roctxRangeStop",
]