# MIT License
#
# Copyright (c) 2023-2024 Advanced Micro Devices, Inc.
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

# This file has been autogenerated, do not modify.

cimport hip._util.posixloader as loader
cdef void* _lib_handle = NULL

DLL = b"libhiprtc.so"

cdef int __init() except 1 nogil:
    global DLL
    global _lib_handle
    cdef char* dll = NULL
    if _lib_handle == NULL:
        with gil:
            dll = DLL
        return loader.open_library(&_lib_handle,dll)
    return 0

cdef int __init_symbol(void** result, const char* name) except 1 nogil:
    global _lib_handle
    cdef int init_result = 0
    if _lib_handle == NULL:
        init_result = __init()
        if init_result > 0:
            return init_result
    if result[0] == NULL:
        return loader.load_symbol(result,_lib_handle, name)
    return 0


cdef void* _hiprtcGetErrorString__funptr = NULL
# 
# @brief Returns text string message to explain the error which occurred
# 
# @param [in] result  code to convert to string.
# @return  const char pointer to the NULL-terminated error string
# 
# @warning In HIP, this function returns the name of the error,
# if the hiprtc result is defined, it will return "Invalid HIPRTC error code"
# 
# @see hiprtcResult
cdef const char * hiprtcGetErrorString(hiprtcResult result) noexcept nogil:
    global _hiprtcGetErrorString__funptr
    if __init_symbol(&_hiprtcGetErrorString__funptr,"hiprtcGetErrorString") > 0:
        pass
    return (<const char * (*)(hiprtcResult) noexcept nogil> _hiprtcGetErrorString__funptr)(result)


cdef void* _hiprtcVersion__funptr = NULL
# 
# @brief Sets the parameters as major and minor version.
# 
# @param [out] major  HIP Runtime Compilation major version.
# @param [out] minor  HIP Runtime Compilation minor version.
#
cdef hiprtcResult hiprtcVersion(int * major,int * minor) except? HIPRTC_ERROR_INTERNAL_ERROR nogil:
    global _hiprtcVersion__funptr
    if __init_symbol(&_hiprtcVersion__funptr,"hiprtcVersion") > 0:
        return HIPRTC_ERROR_INTERNAL_ERROR
    return (<hiprtcResult (*)(int *,int *) noexcept nogil> _hiprtcVersion__funptr)(major,minor)


cdef void* _hiprtcAddNameExpression__funptr = NULL
# 
# @brief Adds the given name exprssion to the runtime compilation program.
# 
# @param [in] prog  runtime compilation program instance.
# @param [in] name_expression  const char pointer to the name expression.
# @return  HIPRTC_SUCCESS
# 
# If const char pointer is NULL, it will return HIPRTC_ERROR_INVALID_INPUT.
# 
# @see hiprtcResult
cdef hiprtcResult hiprtcAddNameExpression(hiprtcProgram prog,const char * name_expression) except? HIPRTC_ERROR_INTERNAL_ERROR nogil:
    global _hiprtcAddNameExpression__funptr
    if __init_symbol(&_hiprtcAddNameExpression__funptr,"hiprtcAddNameExpression") > 0:
        return HIPRTC_ERROR_INTERNAL_ERROR
    return (<hiprtcResult (*)(hiprtcProgram,const char *) noexcept nogil> _hiprtcAddNameExpression__funptr)(prog,name_expression)


cdef void* _hiprtcCompileProgram__funptr = NULL
# 
# @brief Compiles the given runtime compilation program.
# 
# @param [in] prog  runtime compilation program instance.
# @param [in] numOptions  number of compiler options.
# @param [in] options  compiler options as const array of strins.
# @return HIPRTC_SUCCESS
# 
# If the compiler failed to build the runtime compilation program,
# it will return HIPRTC_ERROR_COMPILATION.
# 
# @see hiprtcResult
cdef hiprtcResult hiprtcCompileProgram(hiprtcProgram prog,int numOptions,const char ** options) except? HIPRTC_ERROR_INTERNAL_ERROR nogil:
    global _hiprtcCompileProgram__funptr
    if __init_symbol(&_hiprtcCompileProgram__funptr,"hiprtcCompileProgram") > 0:
        return HIPRTC_ERROR_INTERNAL_ERROR
    return (<hiprtcResult (*)(hiprtcProgram,int,const char **) noexcept nogil> _hiprtcCompileProgram__funptr)(prog,numOptions,options)


cdef void* _hiprtcCreateProgram__funptr = NULL
# 
# @brief Creates an instance of hiprtcProgram with the given input parameters,
# and sets the output hiprtcProgram prog with it.
# 
# @param [in, out] prog  runtime compilation program instance.
# @param [in] src  const char pointer to the program source.
# @param [in] name  const char pointer to the program name.
# @param [in] numHeaders  number of headers.
# @param [in] headers  array of strings pointing to headers.
# @param [in] includeNames  array of strings pointing to names included in program source.
# @return HIPRTC_SUCCESS
# 
# Any invalide input parameter, it will return HIPRTC_ERROR_INVALID_INPUT
# or HIPRTC_ERROR_INVALID_PROGRAM.
# 
# If failed to create the program, it will return HIPRTC_ERROR_PROGRAM_CREATION_FAILURE.
# 
# @see hiprtcResult
cdef hiprtcResult hiprtcCreateProgram(hiprtcProgram* prog,const char * src,const char * name,int numHeaders,const char ** headers,const char ** includeNames) except? HIPRTC_ERROR_INTERNAL_ERROR nogil:
    global _hiprtcCreateProgram__funptr
    if __init_symbol(&_hiprtcCreateProgram__funptr,"hiprtcCreateProgram") > 0:
        return HIPRTC_ERROR_INTERNAL_ERROR
    return (<hiprtcResult (*)(hiprtcProgram*,const char *,const char *,int,const char **,const char **) noexcept nogil> _hiprtcCreateProgram__funptr)(prog,src,name,numHeaders,headers,includeNames)


cdef void* _hiprtcDestroyProgram__funptr = NULL
# 
# @brief Destroys an instance of given hiprtcProgram.
# 
# @param [in] prog  runtime compilation program instance.
# @return HIPRTC_SUCCESS
# 
# If prog is NULL, it will return HIPRTC_ERROR_INVALID_INPUT.
# 
# @see hiprtcResult
cdef hiprtcResult hiprtcDestroyProgram(hiprtcProgram* prog) except? HIPRTC_ERROR_INTERNAL_ERROR nogil:
    global _hiprtcDestroyProgram__funptr
    if __init_symbol(&_hiprtcDestroyProgram__funptr,"hiprtcDestroyProgram") > 0:
        return HIPRTC_ERROR_INTERNAL_ERROR
    return (<hiprtcResult (*)(hiprtcProgram*) noexcept nogil> _hiprtcDestroyProgram__funptr)(prog)


cdef void* _hiprtcGetLoweredName__funptr = NULL
# 
# @brief Gets the lowered (mangled) name from an instance of hiprtcProgram with the given input parameters,
# and sets the output lowered_name with it.
# 
# @param [in] prog  runtime compilation program instance.
# @param [in] name_expression  const char pointer to the name expression.
# @param [in, out] lowered_name  const char array to the lowered (mangled) name.
# @return HIPRTC_SUCCESS
# 
# If any invalide nullptr input parameters, it will return HIPRTC_ERROR_INVALID_INPUT
# 
# If name_expression is not found, it will return HIPRTC_ERROR_NAME_EXPRESSION_NOT_VALID
# 
# If failed to get lowered_name from the program, it will return HIPRTC_ERROR_COMPILATION.
# 
# @see hiprtcResult
cdef hiprtcResult hiprtcGetLoweredName(hiprtcProgram prog,const char * name_expression,const char ** lowered_name) except? HIPRTC_ERROR_INTERNAL_ERROR nogil:
    global _hiprtcGetLoweredName__funptr
    if __init_symbol(&_hiprtcGetLoweredName__funptr,"hiprtcGetLoweredName") > 0:
        return HIPRTC_ERROR_INTERNAL_ERROR
    return (<hiprtcResult (*)(hiprtcProgram,const char *,const char **) noexcept nogil> _hiprtcGetLoweredName__funptr)(prog,name_expression,lowered_name)


cdef void* _hiprtcGetProgramLog__funptr = NULL
# 
# @brief Gets the log generated by the runtime compilation program instance.
# 
# @param [in] prog  runtime compilation program instance.
# @param [out] log  memory pointer to the generated log.
# @return HIPRTC_SUCCESS
# 
# @see hiprtcResult
cdef hiprtcResult hiprtcGetProgramLog(hiprtcProgram prog,char * log) except? HIPRTC_ERROR_INTERNAL_ERROR nogil:
    global _hiprtcGetProgramLog__funptr
    if __init_symbol(&_hiprtcGetProgramLog__funptr,"hiprtcGetProgramLog") > 0:
        return HIPRTC_ERROR_INTERNAL_ERROR
    return (<hiprtcResult (*)(hiprtcProgram,char *) noexcept nogil> _hiprtcGetProgramLog__funptr)(prog,log)


cdef void* _hiprtcGetProgramLogSize__funptr = NULL
# 
# @brief Gets the size of log generated by the runtime compilation program instance.
# 
# @param [in] prog  runtime compilation program instance.
# @param [out] logSizeRet  size of generated log.
# @return HIPRTC_SUCCESS
# 
# @see hiprtcResult
cdef hiprtcResult hiprtcGetProgramLogSize(hiprtcProgram prog,unsigned long * logSizeRet) except? HIPRTC_ERROR_INTERNAL_ERROR nogil:
    global _hiprtcGetProgramLogSize__funptr
    if __init_symbol(&_hiprtcGetProgramLogSize__funptr,"hiprtcGetProgramLogSize") > 0:
        return HIPRTC_ERROR_INTERNAL_ERROR
    return (<hiprtcResult (*)(hiprtcProgram,unsigned long *) noexcept nogil> _hiprtcGetProgramLogSize__funptr)(prog,logSizeRet)


cdef void* _hiprtcGetCode__funptr = NULL
# 
# @brief Gets the pointer of compilation binary by the runtime compilation program instance.
# 
# @param [in] prog  runtime compilation program instance.
# @param [out] code  char pointer to binary.
# @return HIPRTC_SUCCESS
# 
# @see hiprtcResult
cdef hiprtcResult hiprtcGetCode(hiprtcProgram prog,char * code) except? HIPRTC_ERROR_INTERNAL_ERROR nogil:
    global _hiprtcGetCode__funptr
    if __init_symbol(&_hiprtcGetCode__funptr,"hiprtcGetCode") > 0:
        return HIPRTC_ERROR_INTERNAL_ERROR
    return (<hiprtcResult (*)(hiprtcProgram,char *) noexcept nogil> _hiprtcGetCode__funptr)(prog,code)


cdef void* _hiprtcGetCodeSize__funptr = NULL
# 
# @brief Gets the size of compilation binary by the runtime compilation program instance.
# 
# @param [in] prog  runtime compilation program instance.
# @param [out] code  the size of binary.
# @return HIPRTC_SUCCESS
# 
# @see hiprtcResult
cdef hiprtcResult hiprtcGetCodeSize(hiprtcProgram prog,unsigned long * codeSizeRet) except? HIPRTC_ERROR_INTERNAL_ERROR nogil:
    global _hiprtcGetCodeSize__funptr
    if __init_symbol(&_hiprtcGetCodeSize__funptr,"hiprtcGetCodeSize") > 0:
        return HIPRTC_ERROR_INTERNAL_ERROR
    return (<hiprtcResult (*)(hiprtcProgram,unsigned long *) noexcept nogil> _hiprtcGetCodeSize__funptr)(prog,codeSizeRet)


cdef void* _hiprtcGetBitcode__funptr = NULL
# 
# @brief Gets the pointer of compiled bitcode by the runtime compilation program instance.
# 
# @param [in] prog  runtime compilation program instance.
# @param [out] code  char pointer to bitcode.
# @return HIPRTC_SUCCESS
# 
# @see hiprtcResult
cdef hiprtcResult hiprtcGetBitcode(hiprtcProgram prog,char * bitcode) except? HIPRTC_ERROR_INTERNAL_ERROR nogil:
    global _hiprtcGetBitcode__funptr
    if __init_symbol(&_hiprtcGetBitcode__funptr,"hiprtcGetBitcode") > 0:
        return HIPRTC_ERROR_INTERNAL_ERROR
    return (<hiprtcResult (*)(hiprtcProgram,char *) noexcept nogil> _hiprtcGetBitcode__funptr)(prog,bitcode)


cdef void* _hiprtcGetBitcodeSize__funptr = NULL
# 
# @brief Gets the size of compiled bitcode by the runtime compilation program instance.
# 
# 
# @param [in] prog  runtime compilation program instance.
# @param [out] code  the size of bitcode.
# @return HIPRTC_SUCCESS
# 
# @see hiprtcResult
cdef hiprtcResult hiprtcGetBitcodeSize(hiprtcProgram prog,unsigned long * bitcode_size) except? HIPRTC_ERROR_INTERNAL_ERROR nogil:
    global _hiprtcGetBitcodeSize__funptr
    if __init_symbol(&_hiprtcGetBitcodeSize__funptr,"hiprtcGetBitcodeSize") > 0:
        return HIPRTC_ERROR_INTERNAL_ERROR
    return (<hiprtcResult (*)(hiprtcProgram,unsigned long *) noexcept nogil> _hiprtcGetBitcodeSize__funptr)(prog,bitcode_size)


cdef void* _hiprtcLinkCreate__funptr = NULL
# 
# @brief Creates the link instance via hiprtc APIs.
# 
# @param [in] hip_jit_options
# @param [out] hiprtc link state instance
# @return HIPRTC_SUCCESS
# 
# @see hiprtcResult
cdef hiprtcResult hiprtcLinkCreate(unsigned int num_options,hiprtcJIT_option * option_ptr,void ** option_vals_pptr,hiprtcLinkState* hip_link_state_ptr) except? HIPRTC_ERROR_INTERNAL_ERROR nogil:
    global _hiprtcLinkCreate__funptr
    if __init_symbol(&_hiprtcLinkCreate__funptr,"hiprtcLinkCreate") > 0:
        return HIPRTC_ERROR_INTERNAL_ERROR
    return (<hiprtcResult (*)(unsigned int,hiprtcJIT_option *,void **,hiprtcLinkState*) noexcept nogil> _hiprtcLinkCreate__funptr)(num_options,option_ptr,option_vals_pptr,hip_link_state_ptr)


cdef void* _hiprtcLinkAddFile__funptr = NULL
# 
# @brief Adds a file with bit code to be linked with options
# 
# @param [in] hiprtc link state, jit input type, file path,
#        option reated parameters.
# @param [out] None.
# @return HIPRTC_SUCCESS
# 
# If input values are invalid, it will
# @return HIPRTC_ERROR_INVALID_INPUT
# 
# @see hiprtcResult
cdef hiprtcResult hiprtcLinkAddFile(hiprtcLinkState hip_link_state,hiprtcJITInputType input_type,const char * file_path,unsigned int num_options,hiprtcJIT_option * options_ptr,void ** option_values) except? HIPRTC_ERROR_INTERNAL_ERROR nogil:
    global _hiprtcLinkAddFile__funptr
    if __init_symbol(&_hiprtcLinkAddFile__funptr,"hiprtcLinkAddFile") > 0:
        return HIPRTC_ERROR_INTERNAL_ERROR
    return (<hiprtcResult (*)(hiprtcLinkState,hiprtcJITInputType,const char *,unsigned int,hiprtcJIT_option *,void **) noexcept nogil> _hiprtcLinkAddFile__funptr)(hip_link_state,input_type,file_path,num_options,options_ptr,option_values)


cdef void* _hiprtcLinkAddData__funptr = NULL
# 
# @brief Completes the linking of the given program.
# 
# @param [in] hiprtc link state, jit input type, image_ptr ,
#        option reated parameters.
# @param [out] None.
# @return HIPRTC_SUCCESS
# 
# If adding the file fails, it will
# @return HIPRTC_ERROR_PROGRAM_CREATION_FAILURE
# 
# @see hiprtcResult
cdef hiprtcResult hiprtcLinkAddData(hiprtcLinkState hip_link_state,hiprtcJITInputType input_type,void * image,unsigned long image_size,const char * name,unsigned int num_options,hiprtcJIT_option * options_ptr,void ** option_values) except? HIPRTC_ERROR_INTERNAL_ERROR nogil:
    global _hiprtcLinkAddData__funptr
    if __init_symbol(&_hiprtcLinkAddData__funptr,"hiprtcLinkAddData") > 0:
        return HIPRTC_ERROR_INTERNAL_ERROR
    return (<hiprtcResult (*)(hiprtcLinkState,hiprtcJITInputType,void *,unsigned long,const char *,unsigned int,hiprtcJIT_option *,void **) noexcept nogil> _hiprtcLinkAddData__funptr)(hip_link_state,input_type,image,image_size,name,num_options,options_ptr,option_values)


cdef void* _hiprtcLinkComplete__funptr = NULL
# 
# @brief Completes the linking of the given program.
# 
# @param [in] hiprtc link state instance
# @param [out] linked_binary, linked_binary_size.
# @return HIPRTC_SUCCESS
# 
# If adding the data fails, it will
# @return HIPRTC_ERROR_PROGRAM_CREATION_FAILURE
# 
# @see hiprtcResult
cdef hiprtcResult hiprtcLinkComplete(hiprtcLinkState hip_link_state,void ** bin_out,unsigned long * size_out) except? HIPRTC_ERROR_INTERNAL_ERROR nogil:
    global _hiprtcLinkComplete__funptr
    if __init_symbol(&_hiprtcLinkComplete__funptr,"hiprtcLinkComplete") > 0:
        return HIPRTC_ERROR_INTERNAL_ERROR
    return (<hiprtcResult (*)(hiprtcLinkState,void **,unsigned long *) noexcept nogil> _hiprtcLinkComplete__funptr)(hip_link_state,bin_out,size_out)


cdef void* _hiprtcLinkDestroy__funptr = NULL
# 
# @brief Deletes the link instance via hiprtc APIs.
# 
# @param [in] hiprtc link state instance
# @param [out] code  the size of binary.
# @return HIPRTC_SUCCESS
# 
# If linking fails, it will
# @return HIPRTC_ERROR_LINKING
# 
# @see hiprtcResult
cdef hiprtcResult hiprtcLinkDestroy(hiprtcLinkState hip_link_state) except? HIPRTC_ERROR_INTERNAL_ERROR nogil:
    global _hiprtcLinkDestroy__funptr
    if __init_symbol(&_hiprtcLinkDestroy__funptr,"hiprtcLinkDestroy") > 0:
        return HIPRTC_ERROR_INTERNAL_ERROR
    return (<hiprtcResult (*)(hiprtcLinkState) noexcept nogil> _hiprtcLinkDestroy__funptr)(hip_link_state)
