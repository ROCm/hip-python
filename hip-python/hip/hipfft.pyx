# MIT License
#
# Copyright (c) 2023-2024 Advanced Micro Devices, Inc.
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

# This file has been autogenerated, do not modify.


"""
(No short description)

Attributes:
    HIPFFT_FORWARD (`~.int`):
        Macro constant.

    HIPFFT_BACKWARD (`~.int`):
        Macro constant.

    hipfftResult:
        alias of `~.hipfftResult_t`

    hipfftType:
        alias of `~.hipfftType_t`

    hipfftLibraryPropertyType:
        alias of `~.hipfftLibraryPropertyType_t`

    hipfftHandle:
        alias of `~.hipfftHandle_t`

"""

import cython
import ctypes
import enum
HIPFFT_FORWARD = chipfft.HIPFFT_FORWARD

HIPFFT_BACKWARD = chipfft.HIPFFT_BACKWARD

class _hipfftResult_t__Base(enum.IntEnum):
    """Empty enum base class that allows subclassing.
    """
    pass
class hipfftResult_t(_hipfftResult_t__Base):
    """Result/status/error codes

    Attributes:
        HIPFFT_SUCCESS:
            hipFFT operation was successful
        HIPFFT_INVALID_PLAN:
            hipFFT was passed an invalid plan handle
        HIPFFT_ALLOC_FAILED:
            hipFFT failed to allocate GPU or CPU memory
        HIPFFT_INVALID_TYPE:
            No longer used
        HIPFFT_INVALID_VALUE:
            User specified an invalid pointer or parameter
        HIPFFT_INTERNAL_ERROR:
            Driver or internal hipFFT library error
        HIPFFT_EXEC_FAILED:
            Failed to execute an FFT on the GPU
        HIPFFT_SETUP_FAILED:
            hipFFT failed to initialize
        HIPFFT_INVALID_SIZE:
            User specified an invalid transform size
        HIPFFT_UNALIGNED_DATA:
            No longer used
        HIPFFT_INCOMPLETE_PARAMETER_LIST:
            Missing parameters in call
        HIPFFT_INVALID_DEVICE:
            Execution of a plan was on different GPU than plan creation
        HIPFFT_PARSE_ERROR:
            Internal plan database error
        HIPFFT_NO_WORKSPACE:
            No workspace has been provided prior to plan execution
        HIPFFT_NOT_IMPLEMENTED:
            Function does not implement functionality for parameters given.
        HIPFFT_NOT_SUPPORTED:
            Operation is not supported for parameters given.
    """
    HIPFFT_SUCCESS = chipfft.HIPFFT_SUCCESS
    HIPFFT_INVALID_PLAN = chipfft.HIPFFT_INVALID_PLAN
    HIPFFT_ALLOC_FAILED = chipfft.HIPFFT_ALLOC_FAILED
    HIPFFT_INVALID_TYPE = chipfft.HIPFFT_INVALID_TYPE
    HIPFFT_INVALID_VALUE = chipfft.HIPFFT_INVALID_VALUE
    HIPFFT_INTERNAL_ERROR = chipfft.HIPFFT_INTERNAL_ERROR
    HIPFFT_EXEC_FAILED = chipfft.HIPFFT_EXEC_FAILED
    HIPFFT_SETUP_FAILED = chipfft.HIPFFT_SETUP_FAILED
    HIPFFT_INVALID_SIZE = chipfft.HIPFFT_INVALID_SIZE
    HIPFFT_UNALIGNED_DATA = chipfft.HIPFFT_UNALIGNED_DATA
    HIPFFT_INCOMPLETE_PARAMETER_LIST = chipfft.HIPFFT_INCOMPLETE_PARAMETER_LIST
    HIPFFT_INVALID_DEVICE = chipfft.HIPFFT_INVALID_DEVICE
    HIPFFT_PARSE_ERROR = chipfft.HIPFFT_PARSE_ERROR
    HIPFFT_NO_WORKSPACE = chipfft.HIPFFT_NO_WORKSPACE
    HIPFFT_NOT_IMPLEMENTED = chipfft.HIPFFT_NOT_IMPLEMENTED
    HIPFFT_NOT_SUPPORTED = chipfft.HIPFFT_NOT_SUPPORTED
    @staticmethod
    def ctypes_type():
        """The type of the enum constants as ctypes type."""
        return ctypes.c_uint


hipfftResult = hipfftResult_t

class _hipfftType_t__Base(enum.IntEnum):
    """Empty enum base class that allows subclassing.
    """
    pass
class hipfftType_t(_hipfftType_t__Base):
    """Transform type

    Attributes:
        HIPFFT_R2C:
            Real to complex (interleaved)
        HIPFFT_C2R:
            Complex (interleaved) to real
        HIPFFT_C2C:
            Complex to complex (interleaved)
        HIPFFT_D2Z:
            Double to double-complex (interleaved)
        HIPFFT_Z2D:
            Double-complex (interleaved) to double
        HIPFFT_Z2Z:
            Double-complex to double-complex (interleaved)
    """
    HIPFFT_R2C = chipfft.HIPFFT_R2C
    HIPFFT_C2R = chipfft.HIPFFT_C2R
    HIPFFT_C2C = chipfft.HIPFFT_C2C
    HIPFFT_D2Z = chipfft.HIPFFT_D2Z
    HIPFFT_Z2D = chipfft.HIPFFT_Z2D
    HIPFFT_Z2Z = chipfft.HIPFFT_Z2Z
    @staticmethod
    def ctypes_type():
        """The type of the enum constants as ctypes type."""
        return ctypes.c_uint


hipfftType = hipfftType_t

class _hipfftLibraryPropertyType_t__Base(enum.IntEnum):
    """Empty enum base class that allows subclassing.
    """
    pass
class hipfftLibraryPropertyType_t(_hipfftLibraryPropertyType_t__Base):
    """hipfftLibraryPropertyType_t

    Attributes:
        HIPFFT_MAJOR_VERSION:
            (undocumented)
        HIPFFT_MINOR_VERSION:
            (undocumented)
        HIPFFT_PATCH_LEVEL:
            (undocumented)
    """
    HIPFFT_MAJOR_VERSION = chipfft.HIPFFT_MAJOR_VERSION
    HIPFFT_MINOR_VERSION = chipfft.HIPFFT_MINOR_VERSION
    HIPFFT_PATCH_LEVEL = chipfft.HIPFFT_PATCH_LEVEL
    @staticmethod
    def ctypes_type():
        """The type of the enum constants as ctypes type."""
        return ctypes.c_uint


hipfftLibraryPropertyType = hipfftLibraryPropertyType_t

cdef class hipfftHandle_t(hip._util.types.Pointer):
    """Python wrapper for cdef class chipfft.hipfftHandle_t.

    Python wrapper for cdef class chipfft.hipfftHandle_t.

    If this type is initialized via its `__init__` method, it allocates a
    member of the underlying C type and destroys it again if the wrapper
    type is deallocated.

    This type also serves as adapter when appearing as argument type in a
    function signature. In this case, the type can further be initialized
    from a number of Python objects:

    * `None`:

      This will set the ``self._ptr`` attribute to ``NULL``.

    * `int`:

      Interprets the integer value as pointer address and writes it to ``self._ptr``.
      No ownership is transferred.

    * `ctypes.c_void_p`:

      Takes the pointer address ``pyobj.value`` and writes it to ``self._ptr``.
      No ownership is transferred.

    * `object` that implements the `CUDA Array Interface <https://numba.readthedocs.io/en/stable/cuda/cuda_array_interface.html>`_ protocol:

      Takes the integer-valued pointer address, i.e. the first entry of the `data` tuple
      from `pyobj`'s member ``__cuda_array_interface__``  and writes it to ``self._ptr``.

    * `object` that implements the Python buffer protocol:

      If the object represents a simple contiguous array,
      writes the `Py_buffer` associated with ``pyobj`` to `self._py_buffer`,
      sets the `self._py_buffer_acquired` flag to `True`, and
      writes `self._py_buffer.buf` to the data pointer `self._ptr`.

    * `hip._util.types.Pointer`:

      Takes the pointer address ``pyobj._ptr`` and writes it to ``self._ptr``.
      No ownership is transferred.

    Type checks are performed in the above order.

    C Attributes:
        _ptr (C type ``void *``, protected):
            Stores a pointer to the data of the original Python object.
        _is_ptr_owner (C type ``bint``, protected):
            If this wrapper is the owner of the underlying data.
        _py_buffer (C type ``Py_buffer`, protected):
            Stores a pointer to the data of the original Python object.
        _py_buffer_acquired (C type ``bint``, protected):
            Stores a pointer to the data of the original Python object.
    """
    # C members declared in pxd file

    def __cinit__(self):
        self._ptr = NULL
        self._is_ptr_owner = False
        self._py_buffer_acquired = False

    cdef chipfft.hipfftHandle_t* getElementPtr(self):
        return <chipfft.hipfftHandle_t*>self._ptr

    @staticmethod
    cdef hipfftHandle_t fromPtr(void* ptr, bint owner=False):
        """Factory function to create ``hipfftHandle_t`` objects from
        given ``chipfft.hipfftHandle_t`` pointer.
        """
        # Fast call to __new__() that bypasses the __init__() constructor.
        cdef hipfftHandle_t wrapper = hipfftHandle_t.__new__(hipfftHandle_t)
        wrapper._ptr = ptr
        wrapper._is_ptr_owner = owner
        return wrapper

    @staticmethod
    def fromObj(pyobj):
        """Creates a hipfftHandle_t from a Python object.

        Derives a hipfftHandle_t from the given Python object ``pyobj``.
        In case ``pyobj`` is itself an ``hipfftHandle_t`` reference, this method
        returns it directly. No new ``hipfftHandle_t`` is created in this case.
        """
        return hipfftHandle_t.fromPyobj(pyobj)

    @staticmethod
    cdef hipfftHandle_t fromPyobj(object pyobj):
        """Creates a hipfftHandle_t from a Python object.

        Derives a hipfftHandle_t from the given Python object ``pyobj``.
        In case ``pyobj`` is itself an ``hipfftHandle_t`` reference, this method
        returns it directly. No new ``hipfftHandle_t`` is created in this case.

        Args:
            pyobj (object): Must be either `None`; a `hip._util.types.Pointer`; a simple, contiguous buffer according to the buffer protocol;
                            or of type `hipfftHandle_t`; `int`; or `ctypes.c_void_p`.

        Note:
            This routine does not perform a copy but returns the original ``pyobj``
            if ``pyobj`` is an instance of hipfftHandle_t!
        """
        cdef hipfftHandle_t wrapper

        if isinstance(pyobj,hipfftHandle_t):
            return pyobj
        else:
            wrapper = hipfftHandle_t.__new__(hipfftHandle_t)
            wrapper.init_from_pyobj(pyobj)
            return wrapper

    def __dealloc__(self):
        # Release the buffer handle
        if self._py_buffer_acquired is True:
            cpython.buffer.PyBuffer_Release(&self._py_buffer)

    def __int__(self):
        """Returns the data's address as long integer.
        """
        return cpython.long.PyLong_FromVoidPtr(self._ptr)

    def __repr__(self):
        return f"<hipfftHandle_t object, ptr: {int(self)}>"

    def as_c_void_p(self):
        """Returns the data's address as `ctypes.c_void_p`
        Note:
            Implemented as function to not collide with
            autogenerated property names.
        """
        return ctypes.c_void_p(int(self))

    @staticmethod
    def PROPERTIES():
        return []

    def __contains__(self,item):
        properties = self.PROPERTIES()
        return item in properties

    def __getitem__(self,item):
        properties = self.PROPERTIES()
        if isinstance(item,int):
            if item < 0 or item >= len(properties):
                raise IndexError()
            return getattr(self,properties[item])
        raise ValueError("'item' type must be 'int'")


hipfftHandle = hipfftHandle_t

@cython.embedsignature(True)
def hipfftPlan1d(int nx, object type, int batch):
    r"""Create a new one-dimensional FFT plan.

    Allocate and initialize a new one-dimensional FFT plan.

    Args:
        nx (`~.int`) -- *IN*:
            FFT length.

        type (`~.hipfftType_t`) -- *IN*:
            FFT type.

        batch (`~.int`) -- *IN*:
            Number of batched transforms to compute.

    Returns:
        A `~.tuple` of size 1 that contains (in that order):

        * `~.hipfftHandle_t`:
                Pointer to the FFT plan handle.
    """
    plan = hipfftHandle_t.fromPtr(NULL)
    if not isinstance(type,_hipfftType_t__Base):
        raise TypeError("argument 'type' must be of type '_hipfftType_t__Base'")
    _hipfftPlan1d__retval = hipfftResult_t(chipfft.hipfftPlan1d(<chipfft.hipfftHandle_t**>&plan._ptr,nx,type.value,batch))
    return (_hipfftPlan1d__retval,None if plan._ptr == NULL else plan)


@cython.embedsignature(True)
def hipfftPlan2d(int nx, int ny, object type):
    r"""Create a new two-dimensional FFT plan.

    Allocate and initialize a new two-dimensional FFT plan.
    Two-dimensional data should be stored in C ordering (row-major
    format), so that indexes in y-direction (j index) vary the
    fastest.

    Args:
        nx (`~.int`) -- *IN*:
            Number of elements in the x-direction (slow index).

        ny (`~.int`) -- *IN*:
            Number of elements in the y-direction (fast index).

        type (`~.hipfftType_t`) -- *IN*:
            FFT type.

    Returns:
        A `~.tuple` of size 1 that contains (in that order):

        * `~.hipfftHandle_t`:
                Pointer to the FFT plan handle.
    """
    plan = hipfftHandle_t.fromPtr(NULL)
    if not isinstance(type,_hipfftType_t__Base):
        raise TypeError("argument 'type' must be of type '_hipfftType_t__Base'")
    _hipfftPlan2d__retval = hipfftResult_t(chipfft.hipfftPlan2d(<chipfft.hipfftHandle_t**>&plan._ptr,nx,ny,type.value))
    return (_hipfftPlan2d__retval,None if plan._ptr == NULL else plan)


@cython.embedsignature(True)
def hipfftPlan3d(int nx, int ny, int nz, object type):
    r"""Create a new three-dimensional FFT plan.

    Allocate and initialize a new three-dimensional FFT plan.
    Three-dimensional data should be stored in C ordering (row-major
    format), so that indexes in z-direction (k index) vary the
    fastest.

    Args:
        nx (`~.int`) -- *IN*:
            Number of elements in the x-direction (slowest index).

        ny (`~.int`) -- *IN*:
            Number of elements in the y-direction.

        nz (`~.int`) -- *IN*:
            Number of elements in the z-direction (fastest index).

        type (`~.hipfftType_t`) -- *IN*:
            FFT type.

    Returns:
        A `~.tuple` of size 1 that contains (in that order):

        * `~.hipfftHandle_t`:
                Pointer to the FFT plan handle.
    """
    plan = hipfftHandle_t.fromPtr(NULL)
    if not isinstance(type,_hipfftType_t__Base):
        raise TypeError("argument 'type' must be of type '_hipfftType_t__Base'")
    _hipfftPlan3d__retval = hipfftResult_t(chipfft.hipfftPlan3d(<chipfft.hipfftHandle_t**>&plan._ptr,nx,ny,nz,type.value))
    return (_hipfftPlan3d__retval,None if plan._ptr == NULL else plan)


@cython.embedsignature(True)
def hipfftPlanMany(int rank, object n, object inembed, int istride, int idist, object onembed, int ostride, int odist, object type, int batch):
    r"""Create a new batched rank-dimensional FFT plan with advanced data layout.

    Allocate and initialize a new batched rank-dimensional
    FFT plan. The number of elements to transform in each direction of
    the input data is specified in n.

    The batch parameter tells hipFFT how many transforms to perform.
    The distance between the first elements of two consecutive batches
    of the input and output data are specified with the idist and odist
    parameters.

    The inembed and onembed parameters define the input and output data
    layouts. The number of elements in the data is assumed to be larger
    than the number of elements in the transform. Strided data layouts
    are also supported. Strides along the fastest direction in the input
    and output data are specified via the istride and ostride parameters.

    If both inembed and onembed parameters are set to NULL, all the
    advanced data layout parameters are ignored and reverted to default
    values, i.e., the batched transform is performed with non-strided data
    access and the number of data/transform elements are assumed to be
    equivalent.

    Args:
        rank (`~.int`) -- *IN*:
            Dimension of transform (1, 2, or 3).

        n (`~.hip._util.types.Pointer`/`~.object`) -- *IN*:
            Number of elements to transform in the x/y/z directions.

        inembed (`~.hip._util.types.Pointer`/`~.object`) -- *IN*:
            Number of elements in the input data in the x/y/z directions.

        istride (`~.int`) -- *IN*:
            Distance between two successive elements in the input data.

        idist (`~.int`) -- *IN*:
            Distance between input batches.

        onembed (`~.hip._util.types.Pointer`/`~.object`) -- *IN*:
            Number of elements in the output data in the x/y/z directions.

        ostride (`~.int`) -- *IN*:
            Distance between two successive elements in the output data.

        odist (`~.int`) -- *IN*:
            Distance between output batches.

        type (`~.hipfftType_t`) -- *IN*:
            FFT type.

        batch (`~.int`) -- *IN*:
            Number of batched transforms to perform.

    Returns:
        A `~.tuple` of size 1 that contains (in that order):

        * `~.hipfftHandle_t`:
                Pointer to the FFT plan handle.
    """
    plan = hipfftHandle_t.fromPtr(NULL)
    if not isinstance(type,_hipfftType_t__Base):
        raise TypeError("argument 'type' must be of type '_hipfftType_t__Base'")
    _hipfftPlanMany__retval = hipfftResult_t(chipfft.hipfftPlanMany(<chipfft.hipfftHandle_t**>&plan._ptr,rank,
        <int *>hip._util.types.Pointer.fromPyobj(n)._ptr,
        <int *>hip._util.types.Pointer.fromPyobj(inembed)._ptr,istride,idist,
        <int *>hip._util.types.Pointer.fromPyobj(onembed)._ptr,ostride,odist,type.value,batch))
    return (_hipfftPlanMany__retval,None if plan._ptr == NULL else plan)


@cython.embedsignature(True)
def hipfftCreate():
    r"""Allocate a new plan.

    Returns:
        A `~.tuple` of size 1 that contains (in that order):

        * plan (`~.hipfftHandle_t`):
            (undocumented)
    """
    plan = hipfftHandle_t.fromPtr(NULL)
    _hipfftCreate__retval = hipfftResult_t(chipfft.hipfftCreate(<chipfft.hipfftHandle_t**>&plan._ptr))
    return (_hipfftCreate__retval,None if plan._ptr == NULL else plan)


@cython.embedsignature(True)
def hipfftExtPlanScaleFactor(object plan, double scalefactor):
    r"""Set scaling factor.

    hipFFT multiplies each element of the result by the given factor at the end of the transform.

    The supplied factor must be a finite number.  That is, it must neither be infinity nor NaN.

    This function must be called after the plan is allocated using
    `~.hipfftCreate`, but before the plan is initialized by any of the
    "MakePlan" functions.  Therefore, API functions that combine
    creation and initialization (`~.hipfftPlan1d`, `~.hipfftPlan2d`,
    `~.hipfftPlan3d`, and `~.hipfftPlanMany`) cannot set a scale factor.

    Note that the scale factor applies to both forward and
    backward transforms executed with the specified plan handle.

    Args:
        plan (`~.hipfftHandle_t`/`~.object`):
            (undocumented)

        scalefactor (`~.float`/`~.int`):
            (undocumented)
    """
    _hipfftExtPlanScaleFactor__retval = hipfftResult_t(chipfft.hipfftExtPlanScaleFactor(
        hipfftHandle_t.fromPyobj(plan).getElementPtr(),scalefactor))
    return (_hipfftExtPlanScaleFactor__retval,)


@cython.embedsignature(True)
def hipfftMakePlan1d(object plan, int nx, object type, int batch):
    r"""Initialize a new one-dimensional FFT plan.

    Assumes that the plan has been created already, and
    modifies the plan associated with the plan handle.

    Args:
        plan (`~.hipfftHandle_t`/`~.object`) -- *IN*:
            Handle of the FFT plan.

        nx (`~.int`) -- *IN*:
            FFT length.

        type (`~.hipfftType_t`) -- *IN*:
            FFT type.

        batch (`~.int`) -- *IN*:
            Number of batched transforms to compute.

    Returns:
        A `~.tuple` of size 1 that contains (in that order):

        * workSize (`~.int`):
            (undocumented)
    """
    if not isinstance(type,_hipfftType_t__Base):
        raise TypeError("argument 'type' must be of type '_hipfftType_t__Base'")                    
    cdef unsigned long workSize
    _hipfftMakePlan1d__retval = hipfftResult_t(chipfft.hipfftMakePlan1d(
        hipfftHandle_t.fromPyobj(plan).getElementPtr(),nx,type.value,batch,&workSize))
    return (_hipfftMakePlan1d__retval,workSize)


@cython.embedsignature(True)
def hipfftMakePlan2d(object plan, int nx, int ny, object type):
    r"""Initialize a new two-dimensional FFT plan.

    Assumes that the plan has been created already, and
    modifies the plan associated with the plan handle.
    Two-dimensional data should be stored in C ordering (row-major
    format), so that indexes in y-direction (j index) vary the
    fastest.

    Args:
        plan (`~.hipfftHandle_t`/`~.object`) -- *IN*:
            Handle of the FFT plan.

        nx (`~.int`) -- *IN*:
            Number of elements in the x-direction (slow index).

        ny (`~.int`) -- *IN*:
            Number of elements in the y-direction (fast index).

        type (`~.hipfftType_t`) -- *IN*:
            FFT type.

    Returns:
        A `~.tuple` of size 1 that contains (in that order):

        * `~.int`:
                Pointer to work area size (returned value).
    """
    if not isinstance(type,_hipfftType_t__Base):
        raise TypeError("argument 'type' must be of type '_hipfftType_t__Base'")                    
    cdef unsigned long workSize
    _hipfftMakePlan2d__retval = hipfftResult_t(chipfft.hipfftMakePlan2d(
        hipfftHandle_t.fromPyobj(plan).getElementPtr(),nx,ny,type.value,&workSize))
    return (_hipfftMakePlan2d__retval,workSize)


@cython.embedsignature(True)
def hipfftMakePlan3d(object plan, int nx, int ny, int nz, object type):
    r"""Initialize a new two-dimensional FFT plan.

    Assumes that the plan has been created already, and
    modifies the plan associated with the plan handle.
    Three-dimensional data should be stored in C ordering (row-major
    format), so that indexes in z-direction (k index) vary the
    fastest.

    Args:
        plan (`~.hipfftHandle_t`/`~.object`) -- *IN*:
            Handle of the FFT plan.

        nx (`~.int`) -- *IN*:
            Number of elements in the x-direction (slowest index).

        ny (`~.int`) -- *IN*:
            Number of elements in the y-direction.

        nz (`~.int`) -- *IN*:
            Number of elements in the z-direction (fastest index).

        type (`~.hipfftType_t`) -- *IN*:
            FFT type.

    Returns:
        A `~.tuple` of size 1 that contains (in that order):

        * `~.int`:
                Pointer to work area size (returned value).
    """
    if not isinstance(type,_hipfftType_t__Base):
        raise TypeError("argument 'type' must be of type '_hipfftType_t__Base'")                    
    cdef unsigned long workSize
    _hipfftMakePlan3d__retval = hipfftResult_t(chipfft.hipfftMakePlan3d(
        hipfftHandle_t.fromPyobj(plan).getElementPtr(),nx,ny,nz,type.value,&workSize))
    return (_hipfftMakePlan3d__retval,workSize)


@cython.embedsignature(True)
def hipfftMakePlanMany(object plan, int rank, object n, object inembed, int istride, int idist, object onembed, int ostride, int odist, object type, int batch):
    r"""Initialize a new batched rank-dimensional FFT plan with advanced data layout.

    Assumes that the plan has been created already, and
    modifies the plan associated with the plan handle. The number
    of elements to transform in each direction of the input data
    in the FFT plan is specified in n.

    The batch parameter tells hipFFT how many transforms to perform.
    The distance between the first elements of two consecutive batches
    of the input and output data are specified with the idist and odist
    parameters.

    The inembed and onembed parameters define the input and output data
    layouts. The number of elements in the data is assumed to be larger
    than the number of elements in the transform. Strided data layouts
    are also supported. Strides along the fastest direction in the input
    and output data are specified via the istride and ostride parameters.

    If both inembed and onembed parameters are set to NULL, all the
    advanced data layout parameters are ignored and reverted to default
    values, i.e., the batched transform is performed with non-strided data
    access and the number of data/transform elements are assumed to be
    equivalent.

    Args:
        plan (`~.hipfftHandle_t`/`~.object`) -- *OUT*:
            Pointer to the FFT plan handle.

        rank (`~.int`) -- *IN*:
            Dimension of transform (1, 2, or 3).

        n (`~.hip._util.types.Pointer`/`~.object`) -- *IN*:
            Number of elements to transform in the x/y/z directions.

        inembed (`~.hip._util.types.Pointer`/`~.object`) -- *IN*:
            Number of elements in the input data in the x/y/z directions.

        istride (`~.int`) -- *IN*:
            Distance between two successive elements in the input data.

        idist (`~.int`) -- *IN*:
            Distance between input batches.

        onembed (`~.hip._util.types.Pointer`/`~.object`) -- *IN*:
            Number of elements in the output data in the x/y/z directions.

        ostride (`~.int`) -- *IN*:
            Distance between two successive elements in the output data.

        odist (`~.int`) -- *IN*:
            Distance between output batches.

        type (`~.hipfftType_t`) -- *IN*:
            FFT type.

        batch (`~.int`) -- *IN*:
            Number of batched transforms to perform.

    Returns:
        A `~.tuple` of size 1 that contains (in that order):

        * `~.int`:
                Pointer to work area size (returned value).
    """
    if not isinstance(type,_hipfftType_t__Base):
        raise TypeError("argument 'type' must be of type '_hipfftType_t__Base'")                    
    cdef unsigned long workSize
    _hipfftMakePlanMany__retval = hipfftResult_t(chipfft.hipfftMakePlanMany(
        hipfftHandle_t.fromPyobj(plan).getElementPtr(),rank,
        <int *>hip._util.types.Pointer.fromPyobj(n)._ptr,
        <int *>hip._util.types.Pointer.fromPyobj(inembed)._ptr,istride,idist,
        <int *>hip._util.types.Pointer.fromPyobj(onembed)._ptr,ostride,odist,type.value,batch,&workSize))
    return (_hipfftMakePlanMany__retval,workSize)


@cython.embedsignature(True)
def hipfftMakePlanMany64(object plan, int rank, object n, object inembed, long long istride, long long idist, object onembed, long long ostride, long long odist, object type, long long batch):
    r"""(No short description, might be part of a group.)

    Args:
        plan (`~.hipfftHandle_t`/`~.object`):
            (undocumented)

        rank (`~.int`):
            (undocumented)

        n (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        inembed (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        istride (`~.int`):
            (undocumented)

        idist (`~.int`):
            (undocumented)

        onembed (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        ostride (`~.int`):
            (undocumented)

        odist (`~.int`):
            (undocumented)

        type (`~.hipfftType_t`):
            (undocumented)

        batch (`~.int`):
            (undocumented)

    Returns:
        A `~.tuple` of size 1 that contains (in that order):

        * workSize (`~.int`):
            (undocumented)
    """
    if not isinstance(type,_hipfftType_t__Base):
        raise TypeError("argument 'type' must be of type '_hipfftType_t__Base'")                    
    cdef unsigned long workSize
    _hipfftMakePlanMany64__retval = hipfftResult_t(chipfft.hipfftMakePlanMany64(
        hipfftHandle_t.fromPyobj(plan).getElementPtr(),rank,
        <long long *>hip._util.types.Pointer.fromPyobj(n)._ptr,
        <long long *>hip._util.types.Pointer.fromPyobj(inembed)._ptr,istride,idist,
        <long long *>hip._util.types.Pointer.fromPyobj(onembed)._ptr,ostride,odist,type.value,batch,&workSize))
    return (_hipfftMakePlanMany64__retval,workSize)


@cython.embedsignature(True)
def hipfftEstimate1d(int nx, object type, int batch):
    r"""Return an estimate of the work area size required for a 1D plan.

    Args:
        nx (`~.int`) -- *IN*:
            Number of elements in the x-direction.

        type (`~.hipfftType_t`) -- *IN*:
            FFT type.

        batch (`~.int`):
            (undocumented)

    Returns:
        A `~.tuple` of size 1 that contains (in that order):

        * `~.int`:
                Pointer to work area size (returned value).
    """
    if not isinstance(type,_hipfftType_t__Base):
        raise TypeError("argument 'type' must be of type '_hipfftType_t__Base'")                    
    cdef unsigned long workSize
    _hipfftEstimate1d__retval = hipfftResult_t(chipfft.hipfftEstimate1d(nx,type.value,batch,&workSize))
    return (_hipfftEstimate1d__retval,workSize)


@cython.embedsignature(True)
def hipfftEstimate2d(int nx, int ny, object type):
    r"""Return an estimate of the work area size required for a 2D plan.

    Args:
        nx (`~.int`) -- *IN*:
            Number of elements in the x-direction.

        ny (`~.int`) -- *IN*:
            Number of elements in the y-direction.

        type (`~.hipfftType_t`) -- *IN*:
            FFT type.

    Returns:
        A `~.tuple` of size 1 that contains (in that order):

        * `~.int`:
                Pointer to work area size (returned value).
    """
    if not isinstance(type,_hipfftType_t__Base):
        raise TypeError("argument 'type' must be of type '_hipfftType_t__Base'")                    
    cdef unsigned long workSize
    _hipfftEstimate2d__retval = hipfftResult_t(chipfft.hipfftEstimate2d(nx,ny,type.value,&workSize))
    return (_hipfftEstimate2d__retval,workSize)


@cython.embedsignature(True)
def hipfftEstimate3d(int nx, int ny, int nz, object type):
    r"""Return an estimate of the work area size required for a 3D plan.

    Args:
        nx (`~.int`) -- *IN*:
            Number of elements in the x-direction.

        ny (`~.int`) -- *IN*:
            Number of elements in the y-direction.

        nz (`~.int`) -- *IN*:
            Number of elements in the z-direction.

        type (`~.hipfftType_t`) -- *IN*:
            FFT type.

    Returns:
        A `~.tuple` of size 1 that contains (in that order):

        * `~.int`:
                Pointer to work area size (returned value).
    """
    if not isinstance(type,_hipfftType_t__Base):
        raise TypeError("argument 'type' must be of type '_hipfftType_t__Base'")                    
    cdef unsigned long workSize
    _hipfftEstimate3d__retval = hipfftResult_t(chipfft.hipfftEstimate3d(nx,ny,nz,type.value,&workSize))
    return (_hipfftEstimate3d__retval,workSize)


@cython.embedsignature(True)
def hipfftEstimateMany(int rank, object n, object inembed, int istride, int idist, object onembed, int ostride, int odist, object type, int batch):
    r"""Return an estimate of the work area size required for a rank-dimensional plan.

    Args:
        rank (`~.int`) -- *IN*:
            Dimension of FFT transform (1, 2, or 3).

        n (`~.hip._util.types.Pointer`/`~.object`) -- *IN*:
            Number of elements in the x/y/z directions.

        inembed (`~.hip._util.types.Pointer`/`~.object`) -- *IN*:

        istride (`~.int`) -- *IN*:

        idist (`~.int`) -- *IN*:
            Distance between input batches.

        onembed (`~.hip._util.types.Pointer`/`~.object`) -- *IN*:

        ostride (`~.int`) -- *IN*:

        odist (`~.int`) -- *IN*:
            Distance between output batches.

        type (`~.hipfftType_t`) -- *IN*:
            FFT type.

        batch (`~.int`) -- *IN*:
            Number of batched transforms to perform.

    Returns:
        A `~.tuple` of size 1 that contains (in that order):

        * `~.int`:
                Pointer to work area size (returned value).
    """
    if not isinstance(type,_hipfftType_t__Base):
        raise TypeError("argument 'type' must be of type '_hipfftType_t__Base'")                    
    cdef unsigned long workSize
    _hipfftEstimateMany__retval = hipfftResult_t(chipfft.hipfftEstimateMany(rank,
        <int *>hip._util.types.Pointer.fromPyobj(n)._ptr,
        <int *>hip._util.types.Pointer.fromPyobj(inembed)._ptr,istride,idist,
        <int *>hip._util.types.Pointer.fromPyobj(onembed)._ptr,ostride,odist,type.value,batch,&workSize))
    return (_hipfftEstimateMany__retval,workSize)


@cython.embedsignature(True)
def hipfftGetSize1d(object plan, int nx, object type, int batch):
    r"""Return size of the work area size required for a 1D plan.

    Args:
        plan (`~.hipfftHandle_t`/`~.object`) -- *IN*:
            Pointer to the FFT plan.

        nx (`~.int`) -- *IN*:
            Number of elements in the x-direction.

        type (`~.hipfftType_t`) -- *IN*:
            FFT type.

        batch (`~.int`):
            (undocumented)

    Returns:
        A `~.tuple` of size 1 that contains (in that order):

        * `~.int`:
                Pointer to work area size (returned value).
    """
    if not isinstance(type,_hipfftType_t__Base):
        raise TypeError("argument 'type' must be of type '_hipfftType_t__Base'")                    
    cdef unsigned long workSize
    _hipfftGetSize1d__retval = hipfftResult_t(chipfft.hipfftGetSize1d(
        hipfftHandle_t.fromPyobj(plan).getElementPtr(),nx,type.value,batch,&workSize))
    return (_hipfftGetSize1d__retval,workSize)


@cython.embedsignature(True)
def hipfftGetSize2d(object plan, int nx, int ny, object type):
    r"""Return size of the work area size required for a 2D plan.

    Args:
        plan (`~.hipfftHandle_t`/`~.object`) -- *IN*:
            Pointer to the FFT plan.

        nx (`~.int`) -- *IN*:
            Number of elements in the x-direction.

        ny (`~.int`) -- *IN*:
            Number of elements in the y-direction.

        type (`~.hipfftType_t`) -- *IN*:
            FFT type.

    Returns:
        A `~.tuple` of size 1 that contains (in that order):

        * `~.int`:
                Pointer to work area size (returned value).
    """
    if not isinstance(type,_hipfftType_t__Base):
        raise TypeError("argument 'type' must be of type '_hipfftType_t__Base'")                    
    cdef unsigned long workSize
    _hipfftGetSize2d__retval = hipfftResult_t(chipfft.hipfftGetSize2d(
        hipfftHandle_t.fromPyobj(plan).getElementPtr(),nx,ny,type.value,&workSize))
    return (_hipfftGetSize2d__retval,workSize)


@cython.embedsignature(True)
def hipfftGetSize3d(object plan, int nx, int ny, int nz, object type):
    r"""Return size of the work area size required for a 3D plan.

    Args:
        plan (`~.hipfftHandle_t`/`~.object`) -- *IN*:
            Pointer to the FFT plan.

        nx (`~.int`) -- *IN*:
            Number of elements in the x-direction.

        ny (`~.int`) -- *IN*:
            Number of elements in the y-direction.

        nz (`~.int`) -- *IN*:
            Number of elements in the z-direction.

        type (`~.hipfftType_t`) -- *IN*:
            FFT type.

    Returns:
        A `~.tuple` of size 1 that contains (in that order):

        * `~.int`:
                Pointer to work area size (returned value).
    """
    if not isinstance(type,_hipfftType_t__Base):
        raise TypeError("argument 'type' must be of type '_hipfftType_t__Base'")                    
    cdef unsigned long workSize
    _hipfftGetSize3d__retval = hipfftResult_t(chipfft.hipfftGetSize3d(
        hipfftHandle_t.fromPyobj(plan).getElementPtr(),nx,ny,nz,type.value,&workSize))
    return (_hipfftGetSize3d__retval,workSize)


@cython.embedsignature(True)
def hipfftGetSizeMany(object plan, int rank, object n, object inembed, int istride, int idist, object onembed, int ostride, int odist, object type, int batch):
    r"""Return size of the work area size required for a rank-dimensional plan.

    Args:
        plan (`~.hipfftHandle_t`/`~.object`) -- *IN*:
            Pointer to the FFT plan.

        rank (`~.int`) -- *IN*:
            Dimension of FFT transform (1, 2, or 3).

        n (`~.hip._util.types.Pointer`/`~.object`) -- *IN*:
            Number of elements in the x/y/z directions.

        inembed (`~.hip._util.types.Pointer`/`~.object`) -- *IN*:

        istride (`~.int`) -- *IN*:

        idist (`~.int`) -- *IN*:
            Distance between input batches.

        onembed (`~.hip._util.types.Pointer`/`~.object`) -- *IN*:

        ostride (`~.int`) -- *IN*:

        odist (`~.int`) -- *IN*:
            Distance between output batches.

        type (`~.hipfftType_t`) -- *IN*:
            FFT type.

        batch (`~.int`) -- *IN*:
            Number of batched transforms to perform.

    Returns:
        A `~.tuple` of size 1 that contains (in that order):

        * `~.int`:
                Pointer to work area size (returned value).
    """
    if not isinstance(type,_hipfftType_t__Base):
        raise TypeError("argument 'type' must be of type '_hipfftType_t__Base'")                    
    cdef unsigned long workSize
    _hipfftGetSizeMany__retval = hipfftResult_t(chipfft.hipfftGetSizeMany(
        hipfftHandle_t.fromPyobj(plan).getElementPtr(),rank,
        <int *>hip._util.types.Pointer.fromPyobj(n)._ptr,
        <int *>hip._util.types.Pointer.fromPyobj(inembed)._ptr,istride,idist,
        <int *>hip._util.types.Pointer.fromPyobj(onembed)._ptr,ostride,odist,type.value,batch,&workSize))
    return (_hipfftGetSizeMany__retval,workSize)


@cython.embedsignature(True)
def hipfftGetSizeMany64(object plan, int rank, object n, object inembed, long long istride, long long idist, object onembed, long long ostride, long long odist, object type, long long batch):
    r"""(No short description, might be part of a group.)

    Args:
        plan (`~.hipfftHandle_t`/`~.object`):
            (undocumented)

        rank (`~.int`):
            (undocumented)

        n (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        inembed (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        istride (`~.int`):
            (undocumented)

        idist (`~.int`):
            (undocumented)

        onembed (`~.hip._util.types.Pointer`/`~.object`):
            (undocumented)

        ostride (`~.int`):
            (undocumented)

        odist (`~.int`):
            (undocumented)

        type (`~.hipfftType_t`):
            (undocumented)

        batch (`~.int`):
            (undocumented)

    Returns:
        A `~.tuple` of size 1 that contains (in that order):

        * workSize (`~.int`):
            (undocumented)
    """
    if not isinstance(type,_hipfftType_t__Base):
        raise TypeError("argument 'type' must be of type '_hipfftType_t__Base'")                    
    cdef unsigned long workSize
    _hipfftGetSizeMany64__retval = hipfftResult_t(chipfft.hipfftGetSizeMany64(
        hipfftHandle_t.fromPyobj(plan).getElementPtr(),rank,
        <long long *>hip._util.types.Pointer.fromPyobj(n)._ptr,
        <long long *>hip._util.types.Pointer.fromPyobj(inembed)._ptr,istride,idist,
        <long long *>hip._util.types.Pointer.fromPyobj(onembed)._ptr,ostride,odist,type.value,batch,&workSize))
    return (_hipfftGetSizeMany64__retval,workSize)


@cython.embedsignature(True)
def hipfftGetSize(object plan):
    r"""Return size of the work area size required for a rank-dimensional plan.

    Args:
        plan (`~.hipfftHandle_t`/`~.object`) -- *IN*:
            Pointer to the FFT plan.

    Returns:
        A `~.tuple` of size 1 that contains (in that order):

        * workSize (`~.int`):
            (undocumented)
    """
    cdef unsigned long workSize
    _hipfftGetSize__retval = hipfftResult_t(chipfft.hipfftGetSize(
        hipfftHandle_t.fromPyobj(plan).getElementPtr(),&workSize))
    return (_hipfftGetSize__retval,workSize)


@cython.embedsignature(True)
def hipfftSetAutoAllocation(object plan, int autoAllocate):
    r"""Set the plan's auto-allocation flag.  The plan will allocate its own workarea.

    Args:
        plan (`~.hipfftHandle_t`/`~.object`) -- *IN*:
            Pointer to the FFT plan.

        autoAllocate (`~.int`) -- *IN*:
            0 to disable auto-allocation, non-zero to enable.
    """
    _hipfftSetAutoAllocation__retval = hipfftResult_t(chipfft.hipfftSetAutoAllocation(
        hipfftHandle_t.fromPyobj(plan).getElementPtr(),autoAllocate))
    return (_hipfftSetAutoAllocation__retval,)


@cython.embedsignature(True)
def hipfftSetWorkArea(object plan, object workArea):
    r"""Set the plan's work area.

    Args:
        plan (`~.hipfftHandle_t`/`~.object`) -- *IN*:
            Pointer to the FFT plan.

        workArea (`~.hip._util.types.Pointer`/`~.object`) -- *IN*:
            Pointer to the work area (on device).
    """
    _hipfftSetWorkArea__retval = hipfftResult_t(chipfft.hipfftSetWorkArea(
        hipfftHandle_t.fromPyobj(plan).getElementPtr(),
        <void *>hip._util.types.Pointer.fromPyobj(workArea)._ptr))
    return (_hipfftSetWorkArea__retval,)


@cython.embedsignature(True)
def hipfftExecC2C(object plan, object idata, object odata, int direction):
    r"""Execute a (float) complex-to-complex FFT.

    If the input and output buffers are equal, an in-place
    transform is performed.

    Args:
        plan (`~.hipfftHandle_t`/`~.object`):
            The FFT plan.

        idata (`~.float2`/`~.object`):
            Input data (on device).

        odata (`~.float2`/`~.object`):
            Output data (on device).

        direction (`~.int`):
            Either `HIPFFT_FORWARD` or `HIPFFT_BACKWARD`.
    """
    _hipfftExecC2C__retval = hipfftResult_t(chipfft.hipfftExecC2C(
        hipfftHandle_t.fromPyobj(plan).getElementPtr(),
        float2.fromPyobj(idata).getElementPtr(),
        float2.fromPyobj(odata).getElementPtr(),direction))
    return (_hipfftExecC2C__retval,)


@cython.embedsignature(True)
def hipfftExecR2C(object plan, object idata, object odata):
    r"""Execute a (float) real-to-complex FFT.

    If the input and output buffers are equal, an in-place
    transform is performed.

    Args:
        plan (`~.hipfftHandle_t`/`~.object`):
            The FFT plan.

        idata (`~.hip._util.types.Pointer`/`~.object`):
            Input data (on device).

        odata (`~.float2`/`~.object`):
            Output data (on device).
    """
    _hipfftExecR2C__retval = hipfftResult_t(chipfft.hipfftExecR2C(
        hipfftHandle_t.fromPyobj(plan).getElementPtr(),
        <float *>hip._util.types.Pointer.fromPyobj(idata)._ptr,
        float2.fromPyobj(odata).getElementPtr()))
    return (_hipfftExecR2C__retval,)


@cython.embedsignature(True)
def hipfftExecC2R(object plan, object idata, object odata):
    r"""Execute a (float) complex-to-real FFT.

    If the input and output buffers are equal, an in-place
    transform is performed.

    Args:
        plan (`~.hipfftHandle_t`/`~.object`):
            The FFT plan.

        idata (`~.float2`/`~.object`):
            Input data (on device).

        odata (`~.hip._util.types.Pointer`/`~.object`):
            Output data (on device).
    """
    _hipfftExecC2R__retval = hipfftResult_t(chipfft.hipfftExecC2R(
        hipfftHandle_t.fromPyobj(plan).getElementPtr(),
        float2.fromPyobj(idata).getElementPtr(),
        <float *>hip._util.types.Pointer.fromPyobj(odata)._ptr))
    return (_hipfftExecC2R__retval,)


@cython.embedsignature(True)
def hipfftExecZ2Z(object plan, object idata, object odata, int direction):
    r"""Execute a (double) complex-to-complex FFT.

    If the input and output buffers are equal, an in-place
    transform is performed.

    Args:
        plan (`~.hipfftHandle_t`/`~.object`):
            The FFT plan.

        idata (`~.double2`/`~.object`):
            Input data (on device).

        odata (`~.double2`/`~.object`):
            Output data (on device).

        direction (`~.int`):
            Either `HIPFFT_FORWARD` or `HIPFFT_BACKWARD`.
    """
    _hipfftExecZ2Z__retval = hipfftResult_t(chipfft.hipfftExecZ2Z(
        hipfftHandle_t.fromPyobj(plan).getElementPtr(),
        double2.fromPyobj(idata).getElementPtr(),
        double2.fromPyobj(odata).getElementPtr(),direction))
    return (_hipfftExecZ2Z__retval,)


@cython.embedsignature(True)
def hipfftExecD2Z(object plan, object idata, object odata):
    r"""Execute a (double) real-to-complex FFT.

    If the input and output buffers are equal, an in-place
    transform is performed.

    Args:
        plan (`~.hipfftHandle_t`/`~.object`):
            The FFT plan.

        idata (`~.hip._util.types.Pointer`/`~.object`):
            Input data (on device).

        odata (`~.double2`/`~.object`):
            Output data (on device).
    """
    _hipfftExecD2Z__retval = hipfftResult_t(chipfft.hipfftExecD2Z(
        hipfftHandle_t.fromPyobj(plan).getElementPtr(),
        <double *>hip._util.types.Pointer.fromPyobj(idata)._ptr,
        double2.fromPyobj(odata).getElementPtr()))
    return (_hipfftExecD2Z__retval,)


@cython.embedsignature(True)
def hipfftExecZ2D(object plan, object idata, object odata):
    r"""Execute a (double) complex-to-real FFT.

    If the input and output buffers are equal, an in-place
    transform is performed.

    Args:
        plan (`~.hipfftHandle_t`/`~.object`):
            The FFT plan.

        idata (`~.double2`/`~.object`):
            Input data (on device).

        odata (`~.hip._util.types.Pointer`/`~.object`):
            Output data (on device).
    """
    _hipfftExecZ2D__retval = hipfftResult_t(chipfft.hipfftExecZ2D(
        hipfftHandle_t.fromPyobj(plan).getElementPtr(),
        double2.fromPyobj(idata).getElementPtr(),
        <double *>hip._util.types.Pointer.fromPyobj(odata)._ptr))
    return (_hipfftExecZ2D__retval,)


@cython.embedsignature(True)
def hipfftSetStream(object plan, object stream):
    r"""Set HIP stream to execute plan on.

    Associates a HIP stream with a hipFFT plan.  All kernels
    launched by this plan are associated with the provided stream.

    Args:
        plan (`~.hipfftHandle_t`/`~.object`):
            The FFT plan.

        stream (`~.ihipStream_t`/`~.object`):
            The HIP stream.
    """
    _hipfftSetStream__retval = hipfftResult_t(chipfft.hipfftSetStream(
        hipfftHandle_t.fromPyobj(plan).getElementPtr(),
        ihipStream_t.fromPyobj(stream).getElementPtr()))
    return (_hipfftSetStream__retval,)


@cython.embedsignature(True)
def hipfftDestroy(object plan):
    r"""Destroy and deallocate an existing plan.

    Args:
        plan (`~.hipfftHandle_t`/`~.object`):
            (undocumented)
    """
    _hipfftDestroy__retval = hipfftResult_t(chipfft.hipfftDestroy(
        hipfftHandle_t.fromPyobj(plan).getElementPtr()))
    return (_hipfftDestroy__retval,)


@cython.embedsignature(True)
def hipfftGetVersion(object version):
    r"""Get rocFFT/cuFFT version.

    Args:
        version (`~.hip._util.types.Pointer`/`~.object`) -- *OUT*:
            cuFFT/rocFFT version (returned value).
    """
    _hipfftGetVersion__retval = hipfftResult_t(chipfft.hipfftGetVersion(
        <int *>hip._util.types.Pointer.fromPyobj(version)._ptr))
    return (_hipfftGetVersion__retval,)


@cython.embedsignature(True)
def hipfftGetProperty(object type, object value):
    r"""Get library property.

    Args:
        type (`~.hipfftLibraryPropertyType_t`) -- *IN*:
            Property type.

        value (`~.hip._util.types.Pointer`/`~.object`) -- *OUT*:
            Returned value.
    """
    if not isinstance(type,_hipfftLibraryPropertyType_t__Base):
        raise TypeError("argument 'type' must be of type '_hipfftLibraryPropertyType_t__Base'")
    _hipfftGetProperty__retval = hipfftResult_t(chipfft.hipfftGetProperty(type.value,
        <int *>hip._util.types.Pointer.fromPyobj(value)._ptr))
    return (_hipfftGetProperty__retval,)

__all__ = [
    "HIPFFT_FORWARD",
    "HIPFFT_BACKWARD",
    "_hipfftResult_t__Base",
    "hipfftResult_t",
    "hipfftResult",
    "_hipfftType_t__Base",
    "hipfftType_t",
    "hipfftType",
    "_hipfftLibraryPropertyType_t__Base",
    "hipfftLibraryPropertyType_t",
    "hipfftLibraryPropertyType",
    "hipfftHandle_t",
    "hipfftHandle",
    "hipfftPlan1d",
    "hipfftPlan2d",
    "hipfftPlan3d",
    "hipfftPlanMany",
    "hipfftCreate",
    "hipfftExtPlanScaleFactor",
    "hipfftMakePlan1d",
    "hipfftMakePlan2d",
    "hipfftMakePlan3d",
    "hipfftMakePlanMany",
    "hipfftMakePlanMany64",
    "hipfftEstimate1d",
    "hipfftEstimate2d",
    "hipfftEstimate3d",
    "hipfftEstimateMany",
    "hipfftGetSize1d",
    "hipfftGetSize2d",
    "hipfftGetSize3d",
    "hipfftGetSizeMany",
    "hipfftGetSizeMany64",
    "hipfftGetSize",
    "hipfftSetAutoAllocation",
    "hipfftSetWorkArea",
    "hipfftExecC2C",
    "hipfftExecR2C",
    "hipfftExecC2R",
    "hipfftExecZ2Z",
    "hipfftExecD2Z",
    "hipfftExecZ2D",
    "hipfftSetStream",
    "hipfftDestroy",
    "hipfftGetVersion",
    "hipfftGetProperty",
]